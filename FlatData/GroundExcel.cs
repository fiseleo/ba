// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GroundExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GroundExcel GetRootAsGroundExcel(ByteBuffer _bb) { return GetRootAsGroundExcel(_bb, new GroundExcel()); }
  public static GroundExcel GetRootAsGroundExcel(ByteBuffer _bb, GroundExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GroundExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StageFileName(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int StageFileNameLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string GroundSceneName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroundSceneNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGroundSceneNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGroundSceneNameArray() { return __p.__vector_as_array<byte>(8); }
  public long FormationGroupId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.StageTopography StageTopography { get { int o = __p.__offset(12); return o != 0 ? (FlatData.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : FlatData.StageTopography.Street; } }
  public FlatData.BulletType EnemyBulletType { get { int o = __p.__offset(14); return o != 0 ? (FlatData.BulletType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.BulletType.Normal; } }
  public FlatData.ArmorType EnemyArmorType { get { int o = __p.__offset(16); return o != 0 ? (FlatData.ArmorType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ArmorType.LightArmor; } }
  public long LevelNPC { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LevelMinion { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LevelElite { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LevelChampion { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LevelBoss { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ObstacleLevel { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GradeNPC { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GradeMinion { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GradeElite { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GradeChampion { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GradeBoss { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerSightPointAdd { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerSightPointRate { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerAttackRangeAdd { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerAttackRangeRate { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemySightPointAdd { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemySightPointRate { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemyAttackRangeAdd { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemyAttackRangeRate { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerSkillRangeAdd { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerSkillRangeRate { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemySkillRangeAdd { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemySkillRangeRate { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerMinimumPositionGapRate { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemyMinimumPositionGapRate { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool PlayerSightRangeMax { get { int o = __p.__offset(68); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnemySightRangeMax { get { int o = __p.__offset(70); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long TSSAirUnitHeight { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsPhaseBGM { get { int o = __p.__offset(74); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long BGMId { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool WarningUI { get { int o = __p.__offset(78); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TSSHatchOpen { get { int o = __p.__offset(80); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FlatData.TacticSpeed ForcedTacticSpeed { get { int o = __p.__offset(82); return o != 0 ? (FlatData.TacticSpeed)__p.bb.GetInt(o + __p.bb_pos) : FlatData.TacticSpeed.None; } }
  public FlatData.TacticSkillUse ForcedSkillUse { get { int o = __p.__offset(84); return o != 0 ? (FlatData.TacticSkillUse)__p.bb.GetInt(o + __p.bb_pos) : FlatData.TacticSkillUse.None; } }
  public FlatData.ShowSkillCutIn ShowNPCSkillCutIn { get { int o = __p.__offset(86); return o != 0 ? (FlatData.ShowSkillCutIn)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ShowSkillCutIn.None; } }
  public bool ImmuneHitBeforeTimeOutEnd { get { int o = __p.__offset(88); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UIBattleHideFromScratch { get { int o = __p.__offset(90); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string BattleReadyTimelinePath { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBattleReadyTimelinePathBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetBattleReadyTimelinePathBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetBattleReadyTimelinePathArray() { return __p.__vector_as_array<byte>(92); }
  public string BeforeVictoryTimelinePath { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforeVictoryTimelinePathBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetBeforeVictoryTimelinePathBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetBeforeVictoryTimelinePathArray() { return __p.__vector_as_array<byte>(94); }
  public bool SkipBattleEnd { get { int o = __p.__offset(96); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HideNPCWhenBattleEnd { get { int o = __p.__offset(98); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float UIHpScale { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float UIEmojiScale { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float UISkillMainLogScale { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string AllyPassiveSkillId(int j) { int o = __p.__offset(106); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AllyPassiveSkillIdLength { get { int o = __p.__offset(106); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int AllyPassiveSkillLevel(int j) { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AllyPassiveSkillLevelLength { get { int o = __p.__offset(108); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAllyPassiveSkillLevelBytes() { return __p.__vector_as_span<int>(108, 4); }
#else
  public ArraySegment<byte>? GetAllyPassiveSkillLevelBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public int[] GetAllyPassiveSkillLevelArray() { return __p.__vector_as_array<int>(108); }
  public string EnemyPassiveSkillId(int j) { int o = __p.__offset(110); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EnemyPassiveSkillIdLength { get { int o = __p.__offset(110); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int EnemyPassiveSkillLevel(int j) { int o = __p.__offset(112); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EnemyPassiveSkillLevelLength { get { int o = __p.__offset(112); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEnemyPassiveSkillLevelBytes() { return __p.__vector_as_span<int>(112, 4); }
#else
  public ArraySegment<byte>? GetEnemyPassiveSkillLevelBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public int[] GetEnemyPassiveSkillLevelArray() { return __p.__vector_as_array<int>(112); }

  public static Offset<FlatData.GroundExcel> CreateGroundExcel(FlatBufferBuilder builder,
      long Id = 0,
      VectorOffset StageFileNameOffset = default(VectorOffset),
      StringOffset GroundSceneNameOffset = default(StringOffset),
      long FormationGroupId = 0,
      FlatData.StageTopography StageTopography = FlatData.StageTopography.Street,
      FlatData.BulletType EnemyBulletType = FlatData.BulletType.Normal,
      FlatData.ArmorType EnemyArmorType = FlatData.ArmorType.LightArmor,
      long LevelNPC = 0,
      long LevelMinion = 0,
      long LevelElite = 0,
      long LevelChampion = 0,
      long LevelBoss = 0,
      long ObstacleLevel = 0,
      long GradeNPC = 0,
      long GradeMinion = 0,
      long GradeElite = 0,
      long GradeChampion = 0,
      long GradeBoss = 0,
      long PlayerSightPointAdd = 0,
      long PlayerSightPointRate = 0,
      long PlayerAttackRangeAdd = 0,
      long PlayerAttackRangeRate = 0,
      long EnemySightPointAdd = 0,
      long EnemySightPointRate = 0,
      long EnemyAttackRangeAdd = 0,
      long EnemyAttackRangeRate = 0,
      long PlayerSkillRangeAdd = 0,
      long PlayerSkillRangeRate = 0,
      long EnemySkillRangeAdd = 0,
      long EnemySkillRangeRate = 0,
      long PlayerMinimumPositionGapRate = 0,
      long EnemyMinimumPositionGapRate = 0,
      bool PlayerSightRangeMax = false,
      bool EnemySightRangeMax = false,
      long TSSAirUnitHeight = 0,
      bool IsPhaseBGM = false,
      long BGMId = 0,
      bool WarningUI = false,
      bool TSSHatchOpen = false,
      FlatData.TacticSpeed ForcedTacticSpeed = FlatData.TacticSpeed.None,
      FlatData.TacticSkillUse ForcedSkillUse = FlatData.TacticSkillUse.None,
      FlatData.ShowSkillCutIn ShowNPCSkillCutIn = FlatData.ShowSkillCutIn.None,
      bool ImmuneHitBeforeTimeOutEnd = false,
      bool UIBattleHideFromScratch = false,
      StringOffset BattleReadyTimelinePathOffset = default(StringOffset),
      StringOffset BeforeVictoryTimelinePathOffset = default(StringOffset),
      bool SkipBattleEnd = false,
      bool HideNPCWhenBattleEnd = false,
      float UIHpScale = 0.0f,
      float UIEmojiScale = 0.0f,
      float UISkillMainLogScale = 0.0f,
      VectorOffset AllyPassiveSkillIdOffset = default(VectorOffset),
      VectorOffset AllyPassiveSkillLevelOffset = default(VectorOffset),
      VectorOffset EnemyPassiveSkillIdOffset = default(VectorOffset),
      VectorOffset EnemyPassiveSkillLevelOffset = default(VectorOffset)) {
    builder.StartTable(55);
    GroundExcel.AddBGMId(builder, BGMId);
    GroundExcel.AddTSSAirUnitHeight(builder, TSSAirUnitHeight);
    GroundExcel.AddEnemyMinimumPositionGapRate(builder, EnemyMinimumPositionGapRate);
    GroundExcel.AddPlayerMinimumPositionGapRate(builder, PlayerMinimumPositionGapRate);
    GroundExcel.AddEnemySkillRangeRate(builder, EnemySkillRangeRate);
    GroundExcel.AddEnemySkillRangeAdd(builder, EnemySkillRangeAdd);
    GroundExcel.AddPlayerSkillRangeRate(builder, PlayerSkillRangeRate);
    GroundExcel.AddPlayerSkillRangeAdd(builder, PlayerSkillRangeAdd);
    GroundExcel.AddEnemyAttackRangeRate(builder, EnemyAttackRangeRate);
    GroundExcel.AddEnemyAttackRangeAdd(builder, EnemyAttackRangeAdd);
    GroundExcel.AddEnemySightPointRate(builder, EnemySightPointRate);
    GroundExcel.AddEnemySightPointAdd(builder, EnemySightPointAdd);
    GroundExcel.AddPlayerAttackRangeRate(builder, PlayerAttackRangeRate);
    GroundExcel.AddPlayerAttackRangeAdd(builder, PlayerAttackRangeAdd);
    GroundExcel.AddPlayerSightPointRate(builder, PlayerSightPointRate);
    GroundExcel.AddPlayerSightPointAdd(builder, PlayerSightPointAdd);
    GroundExcel.AddGradeBoss(builder, GradeBoss);
    GroundExcel.AddGradeChampion(builder, GradeChampion);
    GroundExcel.AddGradeElite(builder, GradeElite);
    GroundExcel.AddGradeMinion(builder, GradeMinion);
    GroundExcel.AddGradeNPC(builder, GradeNPC);
    GroundExcel.AddObstacleLevel(builder, ObstacleLevel);
    GroundExcel.AddLevelBoss(builder, LevelBoss);
    GroundExcel.AddLevelChampion(builder, LevelChampion);
    GroundExcel.AddLevelElite(builder, LevelElite);
    GroundExcel.AddLevelMinion(builder, LevelMinion);
    GroundExcel.AddLevelNPC(builder, LevelNPC);
    GroundExcel.AddFormationGroupId(builder, FormationGroupId);
    GroundExcel.AddId(builder, Id);
    GroundExcel.AddEnemyPassiveSkillLevel(builder, EnemyPassiveSkillLevelOffset);
    GroundExcel.AddEnemyPassiveSkillId(builder, EnemyPassiveSkillIdOffset);
    GroundExcel.AddAllyPassiveSkillLevel(builder, AllyPassiveSkillLevelOffset);
    GroundExcel.AddAllyPassiveSkillId(builder, AllyPassiveSkillIdOffset);
    GroundExcel.AddUISkillMainLogScale(builder, UISkillMainLogScale);
    GroundExcel.AddUIEmojiScale(builder, UIEmojiScale);
    GroundExcel.AddUIHpScale(builder, UIHpScale);
    GroundExcel.AddBeforeVictoryTimelinePath(builder, BeforeVictoryTimelinePathOffset);
    GroundExcel.AddBattleReadyTimelinePath(builder, BattleReadyTimelinePathOffset);
    GroundExcel.AddShowNPCSkillCutIn(builder, ShowNPCSkillCutIn);
    GroundExcel.AddForcedSkillUse(builder, ForcedSkillUse);
    GroundExcel.AddForcedTacticSpeed(builder, ForcedTacticSpeed);
    GroundExcel.AddEnemyArmorType(builder, EnemyArmorType);
    GroundExcel.AddEnemyBulletType(builder, EnemyBulletType);
    GroundExcel.AddStageTopography(builder, StageTopography);
    GroundExcel.AddGroundSceneName(builder, GroundSceneNameOffset);
    GroundExcel.AddStageFileName(builder, StageFileNameOffset);
    GroundExcel.AddHideNPCWhenBattleEnd(builder, HideNPCWhenBattleEnd);
    GroundExcel.AddSkipBattleEnd(builder, SkipBattleEnd);
    GroundExcel.AddUIBattleHideFromScratch(builder, UIBattleHideFromScratch);
    GroundExcel.AddImmuneHitBeforeTimeOutEnd(builder, ImmuneHitBeforeTimeOutEnd);
    GroundExcel.AddTSSHatchOpen(builder, TSSHatchOpen);
    GroundExcel.AddWarningUI(builder, WarningUI);
    GroundExcel.AddIsPhaseBGM(builder, IsPhaseBGM);
    GroundExcel.AddEnemySightRangeMax(builder, EnemySightRangeMax);
    GroundExcel.AddPlayerSightRangeMax(builder, PlayerSightRangeMax);
    return GroundExcel.EndGroundExcel(builder);
  }

  public static void StartGroundExcel(FlatBufferBuilder builder) { builder.StartTable(55); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddStageFileName(FlatBufferBuilder builder, VectorOffset stageFileNameOffset) { builder.AddOffset(1, stageFileNameOffset.Value, 0); }
  public static VectorOffset CreateStageFileNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStageFileNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStageFileNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStageFileNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStageFileNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGroundSceneName(FlatBufferBuilder builder, StringOffset groundSceneNameOffset) { builder.AddOffset(2, groundSceneNameOffset.Value, 0); }
  public static void AddFormationGroupId(FlatBufferBuilder builder, long formationGroupId) { builder.AddLong(3, formationGroupId, 0); }
  public static void AddStageTopography(FlatBufferBuilder builder, FlatData.StageTopography stageTopography) { builder.AddInt(4, (int)stageTopography, 0); }
  public static void AddEnemyBulletType(FlatBufferBuilder builder, FlatData.BulletType enemyBulletType) { builder.AddInt(5, (int)enemyBulletType, 0); }
  public static void AddEnemyArmorType(FlatBufferBuilder builder, FlatData.ArmorType enemyArmorType) { builder.AddInt(6, (int)enemyArmorType, 0); }
  public static void AddLevelNPC(FlatBufferBuilder builder, long levelNPC) { builder.AddLong(7, levelNPC, 0); }
  public static void AddLevelMinion(FlatBufferBuilder builder, long levelMinion) { builder.AddLong(8, levelMinion, 0); }
  public static void AddLevelElite(FlatBufferBuilder builder, long levelElite) { builder.AddLong(9, levelElite, 0); }
  public static void AddLevelChampion(FlatBufferBuilder builder, long levelChampion) { builder.AddLong(10, levelChampion, 0); }
  public static void AddLevelBoss(FlatBufferBuilder builder, long levelBoss) { builder.AddLong(11, levelBoss, 0); }
  public static void AddObstacleLevel(FlatBufferBuilder builder, long obstacleLevel) { builder.AddLong(12, obstacleLevel, 0); }
  public static void AddGradeNPC(FlatBufferBuilder builder, long gradeNPC) { builder.AddLong(13, gradeNPC, 0); }
  public static void AddGradeMinion(FlatBufferBuilder builder, long gradeMinion) { builder.AddLong(14, gradeMinion, 0); }
  public static void AddGradeElite(FlatBufferBuilder builder, long gradeElite) { builder.AddLong(15, gradeElite, 0); }
  public static void AddGradeChampion(FlatBufferBuilder builder, long gradeChampion) { builder.AddLong(16, gradeChampion, 0); }
  public static void AddGradeBoss(FlatBufferBuilder builder, long gradeBoss) { builder.AddLong(17, gradeBoss, 0); }
  public static void AddPlayerSightPointAdd(FlatBufferBuilder builder, long playerSightPointAdd) { builder.AddLong(18, playerSightPointAdd, 0); }
  public static void AddPlayerSightPointRate(FlatBufferBuilder builder, long playerSightPointRate) { builder.AddLong(19, playerSightPointRate, 0); }
  public static void AddPlayerAttackRangeAdd(FlatBufferBuilder builder, long playerAttackRangeAdd) { builder.AddLong(20, playerAttackRangeAdd, 0); }
  public static void AddPlayerAttackRangeRate(FlatBufferBuilder builder, long playerAttackRangeRate) { builder.AddLong(21, playerAttackRangeRate, 0); }
  public static void AddEnemySightPointAdd(FlatBufferBuilder builder, long enemySightPointAdd) { builder.AddLong(22, enemySightPointAdd, 0); }
  public static void AddEnemySightPointRate(FlatBufferBuilder builder, long enemySightPointRate) { builder.AddLong(23, enemySightPointRate, 0); }
  public static void AddEnemyAttackRangeAdd(FlatBufferBuilder builder, long enemyAttackRangeAdd) { builder.AddLong(24, enemyAttackRangeAdd, 0); }
  public static void AddEnemyAttackRangeRate(FlatBufferBuilder builder, long enemyAttackRangeRate) { builder.AddLong(25, enemyAttackRangeRate, 0); }
  public static void AddPlayerSkillRangeAdd(FlatBufferBuilder builder, long playerSkillRangeAdd) { builder.AddLong(26, playerSkillRangeAdd, 0); }
  public static void AddPlayerSkillRangeRate(FlatBufferBuilder builder, long playerSkillRangeRate) { builder.AddLong(27, playerSkillRangeRate, 0); }
  public static void AddEnemySkillRangeAdd(FlatBufferBuilder builder, long enemySkillRangeAdd) { builder.AddLong(28, enemySkillRangeAdd, 0); }
  public static void AddEnemySkillRangeRate(FlatBufferBuilder builder, long enemySkillRangeRate) { builder.AddLong(29, enemySkillRangeRate, 0); }
  public static void AddPlayerMinimumPositionGapRate(FlatBufferBuilder builder, long playerMinimumPositionGapRate) { builder.AddLong(30, playerMinimumPositionGapRate, 0); }
  public static void AddEnemyMinimumPositionGapRate(FlatBufferBuilder builder, long enemyMinimumPositionGapRate) { builder.AddLong(31, enemyMinimumPositionGapRate, 0); }
  public static void AddPlayerSightRangeMax(FlatBufferBuilder builder, bool playerSightRangeMax) { builder.AddBool(32, playerSightRangeMax, false); }
  public static void AddEnemySightRangeMax(FlatBufferBuilder builder, bool enemySightRangeMax) { builder.AddBool(33, enemySightRangeMax, false); }
  public static void AddTSSAirUnitHeight(FlatBufferBuilder builder, long tSSAirUnitHeight) { builder.AddLong(34, tSSAirUnitHeight, 0); }
  public static void AddIsPhaseBGM(FlatBufferBuilder builder, bool isPhaseBGM) { builder.AddBool(35, isPhaseBGM, false); }
  public static void AddBGMId(FlatBufferBuilder builder, long bGMId) { builder.AddLong(36, bGMId, 0); }
  public static void AddWarningUI(FlatBufferBuilder builder, bool warningUI) { builder.AddBool(37, warningUI, false); }
  public static void AddTSSHatchOpen(FlatBufferBuilder builder, bool tSSHatchOpen) { builder.AddBool(38, tSSHatchOpen, false); }
  public static void AddForcedTacticSpeed(FlatBufferBuilder builder, FlatData.TacticSpeed forcedTacticSpeed) { builder.AddInt(39, (int)forcedTacticSpeed, 0); }
  public static void AddForcedSkillUse(FlatBufferBuilder builder, FlatData.TacticSkillUse forcedSkillUse) { builder.AddInt(40, (int)forcedSkillUse, 0); }
  public static void AddShowNPCSkillCutIn(FlatBufferBuilder builder, FlatData.ShowSkillCutIn showNPCSkillCutIn) { builder.AddInt(41, (int)showNPCSkillCutIn, 0); }
  public static void AddImmuneHitBeforeTimeOutEnd(FlatBufferBuilder builder, bool immuneHitBeforeTimeOutEnd) { builder.AddBool(42, immuneHitBeforeTimeOutEnd, false); }
  public static void AddUIBattleHideFromScratch(FlatBufferBuilder builder, bool uIBattleHideFromScratch) { builder.AddBool(43, uIBattleHideFromScratch, false); }
  public static void AddBattleReadyTimelinePath(FlatBufferBuilder builder, StringOffset battleReadyTimelinePathOffset) { builder.AddOffset(44, battleReadyTimelinePathOffset.Value, 0); }
  public static void AddBeforeVictoryTimelinePath(FlatBufferBuilder builder, StringOffset beforeVictoryTimelinePathOffset) { builder.AddOffset(45, beforeVictoryTimelinePathOffset.Value, 0); }
  public static void AddSkipBattleEnd(FlatBufferBuilder builder, bool skipBattleEnd) { builder.AddBool(46, skipBattleEnd, false); }
  public static void AddHideNPCWhenBattleEnd(FlatBufferBuilder builder, bool hideNPCWhenBattleEnd) { builder.AddBool(47, hideNPCWhenBattleEnd, false); }
  public static void AddUIHpScale(FlatBufferBuilder builder, float uIHpScale) { builder.AddFloat(48, uIHpScale, 0.0f); }
  public static void AddUIEmojiScale(FlatBufferBuilder builder, float uIEmojiScale) { builder.AddFloat(49, uIEmojiScale, 0.0f); }
  public static void AddUISkillMainLogScale(FlatBufferBuilder builder, float uISkillMainLogScale) { builder.AddFloat(50, uISkillMainLogScale, 0.0f); }
  public static void AddAllyPassiveSkillId(FlatBufferBuilder builder, VectorOffset allyPassiveSkillIdOffset) { builder.AddOffset(51, allyPassiveSkillIdOffset.Value, 0); }
  public static VectorOffset CreateAllyPassiveSkillIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllyPassiveSkillIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllyPassiveSkillLevel(FlatBufferBuilder builder, VectorOffset allyPassiveSkillLevelOffset) { builder.AddOffset(52, allyPassiveSkillLevelOffset.Value, 0); }
  public static VectorOffset CreateAllyPassiveSkillLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllyPassiveSkillLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnemyPassiveSkillId(FlatBufferBuilder builder, VectorOffset enemyPassiveSkillIdOffset) { builder.AddOffset(53, enemyPassiveSkillIdOffset.Value, 0); }
  public static VectorOffset CreateEnemyPassiveSkillIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyPassiveSkillIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnemyPassiveSkillLevel(FlatBufferBuilder builder, VectorOffset enemyPassiveSkillLevelOffset) { builder.AddOffset(54, enemyPassiveSkillLevelOffset.Value, 0); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyPassiveSkillLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatData.GroundExcel> EndGroundExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.GroundExcel>(o);
  }
  public GroundExcelT UnPack() {
    var _o = new GroundExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GroundExcelT _o) {
    _o.Id = this.Id;
    _o.StageFileName = new List<string>();
    for (var _j = 0; _j < this.StageFileNameLength; ++_j) {_o.StageFileName.Add(this.StageFileName(_j));}
    _o.GroundSceneName = this.GroundSceneName;
    _o.FormationGroupId = this.FormationGroupId;
    _o.StageTopography = this.StageTopography;
    _o.EnemyBulletType = this.EnemyBulletType;
    _o.EnemyArmorType = this.EnemyArmorType;
    _o.LevelNPC = this.LevelNPC;
    _o.LevelMinion = this.LevelMinion;
    _o.LevelElite = this.LevelElite;
    _o.LevelChampion = this.LevelChampion;
    _o.LevelBoss = this.LevelBoss;
    _o.ObstacleLevel = this.ObstacleLevel;
    _o.GradeNPC = this.GradeNPC;
    _o.GradeMinion = this.GradeMinion;
    _o.GradeElite = this.GradeElite;
    _o.GradeChampion = this.GradeChampion;
    _o.GradeBoss = this.GradeBoss;
    _o.PlayerSightPointAdd = this.PlayerSightPointAdd;
    _o.PlayerSightPointRate = this.PlayerSightPointRate;
    _o.PlayerAttackRangeAdd = this.PlayerAttackRangeAdd;
    _o.PlayerAttackRangeRate = this.PlayerAttackRangeRate;
    _o.EnemySightPointAdd = this.EnemySightPointAdd;
    _o.EnemySightPointRate = this.EnemySightPointRate;
    _o.EnemyAttackRangeAdd = this.EnemyAttackRangeAdd;
    _o.EnemyAttackRangeRate = this.EnemyAttackRangeRate;
    _o.PlayerSkillRangeAdd = this.PlayerSkillRangeAdd;
    _o.PlayerSkillRangeRate = this.PlayerSkillRangeRate;
    _o.EnemySkillRangeAdd = this.EnemySkillRangeAdd;
    _o.EnemySkillRangeRate = this.EnemySkillRangeRate;
    _o.PlayerMinimumPositionGapRate = this.PlayerMinimumPositionGapRate;
    _o.EnemyMinimumPositionGapRate = this.EnemyMinimumPositionGapRate;
    _o.PlayerSightRangeMax = this.PlayerSightRangeMax;
    _o.EnemySightRangeMax = this.EnemySightRangeMax;
    _o.TSSAirUnitHeight = this.TSSAirUnitHeight;
    _o.IsPhaseBGM = this.IsPhaseBGM;
    _o.BGMId = this.BGMId;
    _o.WarningUI = this.WarningUI;
    _o.TSSHatchOpen = this.TSSHatchOpen;
    _o.ForcedTacticSpeed = this.ForcedTacticSpeed;
    _o.ForcedSkillUse = this.ForcedSkillUse;
    _o.ShowNPCSkillCutIn = this.ShowNPCSkillCutIn;
    _o.ImmuneHitBeforeTimeOutEnd = this.ImmuneHitBeforeTimeOutEnd;
    _o.UIBattleHideFromScratch = this.UIBattleHideFromScratch;
    _o.BattleReadyTimelinePath = this.BattleReadyTimelinePath;
    _o.BeforeVictoryTimelinePath = this.BeforeVictoryTimelinePath;
    _o.SkipBattleEnd = this.SkipBattleEnd;
    _o.HideNPCWhenBattleEnd = this.HideNPCWhenBattleEnd;
    _o.UIHpScale = this.UIHpScale;
    _o.UIEmojiScale = this.UIEmojiScale;
    _o.UISkillMainLogScale = this.UISkillMainLogScale;
    _o.AllyPassiveSkillId = new List<string>();
    for (var _j = 0; _j < this.AllyPassiveSkillIdLength; ++_j) {_o.AllyPassiveSkillId.Add(this.AllyPassiveSkillId(_j));}
    _o.AllyPassiveSkillLevel = new List<int>();
    for (var _j = 0; _j < this.AllyPassiveSkillLevelLength; ++_j) {_o.AllyPassiveSkillLevel.Add(this.AllyPassiveSkillLevel(_j));}
    _o.EnemyPassiveSkillId = new List<string>();
    for (var _j = 0; _j < this.EnemyPassiveSkillIdLength; ++_j) {_o.EnemyPassiveSkillId.Add(this.EnemyPassiveSkillId(_j));}
    _o.EnemyPassiveSkillLevel = new List<int>();
    for (var _j = 0; _j < this.EnemyPassiveSkillLevelLength; ++_j) {_o.EnemyPassiveSkillLevel.Add(this.EnemyPassiveSkillLevel(_j));}
  }
  public static Offset<FlatData.GroundExcel> Pack(FlatBufferBuilder builder, GroundExcelT _o) {
    if (_o == null) return default(Offset<FlatData.GroundExcel>);
    var _StageFileName = default(VectorOffset);
    if (_o.StageFileName != null) {
      var __StageFileName = new StringOffset[_o.StageFileName.Count];
      for (var _j = 0; _j < __StageFileName.Length; ++_j) { __StageFileName[_j] = builder.CreateString(_o.StageFileName[_j]); }
      _StageFileName = CreateStageFileNameVector(builder, __StageFileName);
    }
    var _GroundSceneName = _o.GroundSceneName == null ? default(StringOffset) : builder.CreateString(_o.GroundSceneName);
    var _BattleReadyTimelinePath = _o.BattleReadyTimelinePath == null ? default(StringOffset) : builder.CreateString(_o.BattleReadyTimelinePath);
    var _BeforeVictoryTimelinePath = _o.BeforeVictoryTimelinePath == null ? default(StringOffset) : builder.CreateString(_o.BeforeVictoryTimelinePath);
    var _AllyPassiveSkillId = default(VectorOffset);
    if (_o.AllyPassiveSkillId != null) {
      var __AllyPassiveSkillId = new StringOffset[_o.AllyPassiveSkillId.Count];
      for (var _j = 0; _j < __AllyPassiveSkillId.Length; ++_j) { __AllyPassiveSkillId[_j] = builder.CreateString(_o.AllyPassiveSkillId[_j]); }
      _AllyPassiveSkillId = CreateAllyPassiveSkillIdVector(builder, __AllyPassiveSkillId);
    }
    var _AllyPassiveSkillLevel = default(VectorOffset);
    if (_o.AllyPassiveSkillLevel != null) {
      var __AllyPassiveSkillLevel = _o.AllyPassiveSkillLevel.ToArray();
      _AllyPassiveSkillLevel = CreateAllyPassiveSkillLevelVector(builder, __AllyPassiveSkillLevel);
    }
    var _EnemyPassiveSkillId = default(VectorOffset);
    if (_o.EnemyPassiveSkillId != null) {
      var __EnemyPassiveSkillId = new StringOffset[_o.EnemyPassiveSkillId.Count];
      for (var _j = 0; _j < __EnemyPassiveSkillId.Length; ++_j) { __EnemyPassiveSkillId[_j] = builder.CreateString(_o.EnemyPassiveSkillId[_j]); }
      _EnemyPassiveSkillId = CreateEnemyPassiveSkillIdVector(builder, __EnemyPassiveSkillId);
    }
    var _EnemyPassiveSkillLevel = default(VectorOffset);
    if (_o.EnemyPassiveSkillLevel != null) {
      var __EnemyPassiveSkillLevel = _o.EnemyPassiveSkillLevel.ToArray();
      _EnemyPassiveSkillLevel = CreateEnemyPassiveSkillLevelVector(builder, __EnemyPassiveSkillLevel);
    }
    return CreateGroundExcel(
      builder,
      _o.Id,
      _StageFileName,
      _GroundSceneName,
      _o.FormationGroupId,
      _o.StageTopography,
      _o.EnemyBulletType,
      _o.EnemyArmorType,
      _o.LevelNPC,
      _o.LevelMinion,
      _o.LevelElite,
      _o.LevelChampion,
      _o.LevelBoss,
      _o.ObstacleLevel,
      _o.GradeNPC,
      _o.GradeMinion,
      _o.GradeElite,
      _o.GradeChampion,
      _o.GradeBoss,
      _o.PlayerSightPointAdd,
      _o.PlayerSightPointRate,
      _o.PlayerAttackRangeAdd,
      _o.PlayerAttackRangeRate,
      _o.EnemySightPointAdd,
      _o.EnemySightPointRate,
      _o.EnemyAttackRangeAdd,
      _o.EnemyAttackRangeRate,
      _o.PlayerSkillRangeAdd,
      _o.PlayerSkillRangeRate,
      _o.EnemySkillRangeAdd,
      _o.EnemySkillRangeRate,
      _o.PlayerMinimumPositionGapRate,
      _o.EnemyMinimumPositionGapRate,
      _o.PlayerSightRangeMax,
      _o.EnemySightRangeMax,
      _o.TSSAirUnitHeight,
      _o.IsPhaseBGM,
      _o.BGMId,
      _o.WarningUI,
      _o.TSSHatchOpen,
      _o.ForcedTacticSpeed,
      _o.ForcedSkillUse,
      _o.ShowNPCSkillCutIn,
      _o.ImmuneHitBeforeTimeOutEnd,
      _o.UIBattleHideFromScratch,
      _BattleReadyTimelinePath,
      _BeforeVictoryTimelinePath,
      _o.SkipBattleEnd,
      _o.HideNPCWhenBattleEnd,
      _o.UIHpScale,
      _o.UIEmojiScale,
      _o.UISkillMainLogScale,
      _AllyPassiveSkillId,
      _AllyPassiveSkillLevel,
      _EnemyPassiveSkillId,
      _EnemyPassiveSkillLevel);
  }
}

public class GroundExcelT
{
  [Newtonsoft.Json.JsonProperty("Id")]
  public long Id { get; set; }
  [Newtonsoft.Json.JsonProperty("StageFileName")]
  public List<string> StageFileName { get; set; }
  [Newtonsoft.Json.JsonProperty("GroundSceneName")]
  public string GroundSceneName { get; set; }
  [Newtonsoft.Json.JsonProperty("FormationGroupId")]
  public long FormationGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("StageTopography")]
  public FlatData.StageTopography StageTopography { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemyBulletType")]
  public FlatData.BulletType EnemyBulletType { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemyArmorType")]
  public FlatData.ArmorType EnemyArmorType { get; set; }
  [Newtonsoft.Json.JsonProperty("LevelNPC")]
  public long LevelNPC { get; set; }
  [Newtonsoft.Json.JsonProperty("LevelMinion")]
  public long LevelMinion { get; set; }
  [Newtonsoft.Json.JsonProperty("LevelElite")]
  public long LevelElite { get; set; }
  [Newtonsoft.Json.JsonProperty("LevelChampion")]
  public long LevelChampion { get; set; }
  [Newtonsoft.Json.JsonProperty("LevelBoss")]
  public long LevelBoss { get; set; }
  [Newtonsoft.Json.JsonProperty("ObstacleLevel")]
  public long ObstacleLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("GradeNPC")]
  public long GradeNPC { get; set; }
  [Newtonsoft.Json.JsonProperty("GradeMinion")]
  public long GradeMinion { get; set; }
  [Newtonsoft.Json.JsonProperty("GradeElite")]
  public long GradeElite { get; set; }
  [Newtonsoft.Json.JsonProperty("GradeChampion")]
  public long GradeChampion { get; set; }
  [Newtonsoft.Json.JsonProperty("GradeBoss")]
  public long GradeBoss { get; set; }
  [Newtonsoft.Json.JsonProperty("PlayerSightPointAdd")]
  public long PlayerSightPointAdd { get; set; }
  [Newtonsoft.Json.JsonProperty("PlayerSightPointRate")]
  public long PlayerSightPointRate { get; set; }
  [Newtonsoft.Json.JsonProperty("PlayerAttackRangeAdd")]
  public long PlayerAttackRangeAdd { get; set; }
  [Newtonsoft.Json.JsonProperty("PlayerAttackRangeRate")]
  public long PlayerAttackRangeRate { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemySightPointAdd")]
  public long EnemySightPointAdd { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemySightPointRate")]
  public long EnemySightPointRate { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemyAttackRangeAdd")]
  public long EnemyAttackRangeAdd { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemyAttackRangeRate")]
  public long EnemyAttackRangeRate { get; set; }
  [Newtonsoft.Json.JsonProperty("PlayerSkillRangeAdd")]
  public long PlayerSkillRangeAdd { get; set; }
  [Newtonsoft.Json.JsonProperty("PlayerSkillRangeRate")]
  public long PlayerSkillRangeRate { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemySkillRangeAdd")]
  public long EnemySkillRangeAdd { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemySkillRangeRate")]
  public long EnemySkillRangeRate { get; set; }
  [Newtonsoft.Json.JsonProperty("PlayerMinimumPositionGapRate")]
  public long PlayerMinimumPositionGapRate { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemyMinimumPositionGapRate")]
  public long EnemyMinimumPositionGapRate { get; set; }
  [Newtonsoft.Json.JsonProperty("PlayerSightRangeMax")]
  public bool PlayerSightRangeMax { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemySightRangeMax")]
  public bool EnemySightRangeMax { get; set; }
  [Newtonsoft.Json.JsonProperty("TSSAirUnitHeight")]
  public long TSSAirUnitHeight { get; set; }
  [Newtonsoft.Json.JsonProperty("IsPhaseBGM")]
  public bool IsPhaseBGM { get; set; }
  [Newtonsoft.Json.JsonProperty("BGMId")]
  public long BGMId { get; set; }
  [Newtonsoft.Json.JsonProperty("WarningUI")]
  public bool WarningUI { get; set; }
  [Newtonsoft.Json.JsonProperty("TSSHatchOpen")]
  public bool TSSHatchOpen { get; set; }
  [Newtonsoft.Json.JsonProperty("ForcedTacticSpeed")]
  public FlatData.TacticSpeed ForcedTacticSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("ForcedSkillUse")]
  public FlatData.TacticSkillUse ForcedSkillUse { get; set; }
  [Newtonsoft.Json.JsonProperty("ShowNPCSkillCutIn")]
  public FlatData.ShowSkillCutIn ShowNPCSkillCutIn { get; set; }
  [Newtonsoft.Json.JsonProperty("ImmuneHitBeforeTimeOutEnd")]
  public bool ImmuneHitBeforeTimeOutEnd { get; set; }
  [Newtonsoft.Json.JsonProperty("UIBattleHideFromScratch")]
  public bool UIBattleHideFromScratch { get; set; }
  [Newtonsoft.Json.JsonProperty("BattleReadyTimelinePath")]
  public string BattleReadyTimelinePath { get; set; }
  [Newtonsoft.Json.JsonProperty("BeforeVictoryTimelinePath")]
  public string BeforeVictoryTimelinePath { get; set; }
  [Newtonsoft.Json.JsonProperty("SkipBattleEnd")]
  public bool SkipBattleEnd { get; set; }
  [Newtonsoft.Json.JsonProperty("HideNPCWhenBattleEnd")]
  public bool HideNPCWhenBattleEnd { get; set; }
  [Newtonsoft.Json.JsonProperty("UIHpScale")]
  public float UIHpScale { get; set; }
  [Newtonsoft.Json.JsonProperty("UIEmojiScale")]
  public float UIEmojiScale { get; set; }
  [Newtonsoft.Json.JsonProperty("UISkillMainLogScale")]
  public float UISkillMainLogScale { get; set; }
  [Newtonsoft.Json.JsonProperty("AllyPassiveSkillId")]
  public List<string> AllyPassiveSkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("AllyPassiveSkillLevel")]
  public List<int> AllyPassiveSkillLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemyPassiveSkillId")]
  public List<string> EnemyPassiveSkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemyPassiveSkillLevel")]
  public List<int> EnemyPassiveSkillLevel { get; set; }

  public GroundExcelT() {
    this.Id = 0;
    this.StageFileName = null;
    this.GroundSceneName = null;
    this.FormationGroupId = 0;
    this.StageTopography = FlatData.StageTopography.Street;
    this.EnemyBulletType = FlatData.BulletType.Normal;
    this.EnemyArmorType = FlatData.ArmorType.LightArmor;
    this.LevelNPC = 0;
    this.LevelMinion = 0;
    this.LevelElite = 0;
    this.LevelChampion = 0;
    this.LevelBoss = 0;
    this.ObstacleLevel = 0;
    this.GradeNPC = 0;
    this.GradeMinion = 0;
    this.GradeElite = 0;
    this.GradeChampion = 0;
    this.GradeBoss = 0;
    this.PlayerSightPointAdd = 0;
    this.PlayerSightPointRate = 0;
    this.PlayerAttackRangeAdd = 0;
    this.PlayerAttackRangeRate = 0;
    this.EnemySightPointAdd = 0;
    this.EnemySightPointRate = 0;
    this.EnemyAttackRangeAdd = 0;
    this.EnemyAttackRangeRate = 0;
    this.PlayerSkillRangeAdd = 0;
    this.PlayerSkillRangeRate = 0;
    this.EnemySkillRangeAdd = 0;
    this.EnemySkillRangeRate = 0;
    this.PlayerMinimumPositionGapRate = 0;
    this.EnemyMinimumPositionGapRate = 0;
    this.PlayerSightRangeMax = false;
    this.EnemySightRangeMax = false;
    this.TSSAirUnitHeight = 0;
    this.IsPhaseBGM = false;
    this.BGMId = 0;
    this.WarningUI = false;
    this.TSSHatchOpen = false;
    this.ForcedTacticSpeed = FlatData.TacticSpeed.None;
    this.ForcedSkillUse = FlatData.TacticSkillUse.None;
    this.ShowNPCSkillCutIn = FlatData.ShowSkillCutIn.None;
    this.ImmuneHitBeforeTimeOutEnd = false;
    this.UIBattleHideFromScratch = false;
    this.BattleReadyTimelinePath = null;
    this.BeforeVictoryTimelinePath = null;
    this.SkipBattleEnd = false;
    this.HideNPCWhenBattleEnd = false;
    this.UIHpScale = 0.0f;
    this.UIEmojiScale = 0.0f;
    this.UISkillMainLogScale = 0.0f;
    this.AllyPassiveSkillId = null;
    this.AllyPassiveSkillLevel = null;
    this.EnemyPassiveSkillId = null;
    this.EnemyPassiveSkillLevel = null;
  }
}


static public class GroundExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*StageFileName*/, false)
      && verifier.VerifyString(tablePos, 8 /*GroundSceneName*/, false)
      && verifier.VerifyField(tablePos, 10 /*FormationGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*StageTopography*/, 4 /*FlatData.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*EnemyBulletType*/, 4 /*FlatData.BulletType*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*EnemyArmorType*/, 4 /*FlatData.ArmorType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*LevelNPC*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*LevelMinion*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*LevelElite*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*LevelChampion*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*LevelBoss*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*ObstacleLevel*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*GradeNPC*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*GradeMinion*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*GradeElite*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*GradeChampion*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*GradeBoss*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*PlayerSightPointAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*PlayerSightPointRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*PlayerAttackRangeAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*PlayerAttackRangeRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*EnemySightPointAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*EnemySightPointRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*EnemyAttackRangeAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*EnemyAttackRangeRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*PlayerSkillRangeAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*PlayerSkillRangeRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*EnemySkillRangeAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*EnemySkillRangeRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*PlayerMinimumPositionGapRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*EnemyMinimumPositionGapRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*PlayerSightRangeMax*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 70 /*EnemySightRangeMax*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 72 /*TSSAirUnitHeight*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*IsPhaseBGM*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 76 /*BGMId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*WarningUI*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 80 /*TSSHatchOpen*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 82 /*ForcedTacticSpeed*/, 4 /*FlatData.TacticSpeed*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*ForcedSkillUse*/, 4 /*FlatData.TacticSkillUse*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*ShowNPCSkillCutIn*/, 4 /*FlatData.ShowSkillCutIn*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*ImmuneHitBeforeTimeOutEnd*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 90 /*UIBattleHideFromScratch*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 92 /*BattleReadyTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 94 /*BeforeVictoryTimelinePath*/, false)
      && verifier.VerifyField(tablePos, 96 /*SkipBattleEnd*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 98 /*HideNPCWhenBattleEnd*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 100 /*UIHpScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 102 /*UIEmojiScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 104 /*UISkillMainLogScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 106 /*AllyPassiveSkillId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 108 /*AllyPassiveSkillLevel*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 110 /*EnemyPassiveSkillId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 112 /*EnemyPassiveSkillLevel*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
