// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConquestUnitExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ConquestUnitExcel GetRootAsConquestUnitExcel(ByteBuffer _bb) { return GetRootAsConquestUnitExcel(_bb, new ConquestUnitExcel()); }
  public static ConquestUnitExcel GetRootAsConquestUnitExcel(ByteBuffer _bb, ConquestUnitExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestUnitExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint Key { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string PrefabName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(10); }
  public string StrategyPrefabName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrategyPrefabNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStrategyPrefabNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStrategyPrefabNameArray() { return __p.__vector_as_array<byte>(12); }
  public float Scale { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ShieldEffectScale { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string UnitFxPrefabName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnitFxPrefabNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetUnitFxPrefabNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetUnitFxPrefabNameArray() { return __p.__vector_as_array<byte>(18); }
  public string PointAnimation { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPointAnimationBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetPointAnimationBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetPointAnimationArray() { return __p.__vector_as_array<byte>(20); }
  public FlatData.ConquestEnemyType EnemyType { get { int o = __p.__offset(22); return o != 0 ? (FlatData.ConquestEnemyType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ConquestEnemyType.None; } }
  public FlatData.ConquestTeamType Team { get { int o = __p.__offset(24); return o != 0 ? (FlatData.ConquestTeamType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ConquestTeamType.None; } }
  public long UnitGroup { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PrevUnitGroup { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BattleDuration { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroundId { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.StarGoalType StarGoal(int j) { int o = __p.__offset(34); return o != 0 ? (FlatData.StarGoalType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatData.StarGoalType)0; }
  public int StarGoalLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatData.StarGoalType> GetStarGoalBytes() { return __p.__vector_as_span<FlatData.StarGoalType>(34, 4); }
#else
  public ArraySegment<byte>? GetStarGoalBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public FlatData.StarGoalType[] GetStarGoalArray() { int o = __p.__offset(34); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatData.StarGoalType[] a = new FlatData.StarGoalType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatData.StarGoalType)__p.bb.GetInt(p + i * 4); } return a; }
  public int StarGoalAmount(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StarGoalAmountLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStarGoalAmountBytes() { return __p.__vector_as_span<int>(36, 4); }
#else
  public ArraySegment<byte>? GetStarGoalAmountBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public int[] GetStarGoalAmountArray() { return __p.__vector_as_array<int>(36); }
  public long GroupBuffId { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.ParcelType StageEnterCostType { get { int o = __p.__offset(40); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ParcelType.None; } }
  public long StageEnterCostId { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StageEnterCostAmount { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatData.ParcelType ManageEchelonStageEnterCostType { get { int o = __p.__offset(46); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ParcelType.None; } }
  public long ManageEchelonStageEnterCostId { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ManageEchelonStageEnterCostAmount { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long EnterScenarioGroupId { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearScenarioGroupId { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ConquestRewardId { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.StageTopography StageTopography { get { int o = __p.__offset(58); return o != 0 ? (FlatData.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : FlatData.StageTopography.Street; } }
  public int RecommandLevel { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long TacticRewardExp { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FixedEchelonId { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.EchelonExtensionType EchelonExtensionType { get { int o = __p.__offset(66); return o != 0 ? (FlatData.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.EchelonExtensionType.Base; } }

  public static Offset<FlatData.ConquestUnitExcel> CreateConquestUnitExcel(FlatBufferBuilder builder,
      long Id = 0,
      uint Key = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset PrefabNameOffset = default(StringOffset),
      StringOffset StrategyPrefabNameOffset = default(StringOffset),
      float Scale = 0.0f,
      float ShieldEffectScale = 0.0f,
      StringOffset UnitFxPrefabNameOffset = default(StringOffset),
      StringOffset PointAnimationOffset = default(StringOffset),
      FlatData.ConquestEnemyType EnemyType = FlatData.ConquestEnemyType.None,
      FlatData.ConquestTeamType Team = FlatData.ConquestTeamType.None,
      long UnitGroup = 0,
      long PrevUnitGroup = 0,
      long BattleDuration = 0,
      long GroundId = 0,
      VectorOffset StarGoalOffset = default(VectorOffset),
      VectorOffset StarGoalAmountOffset = default(VectorOffset),
      long GroupBuffId = 0,
      FlatData.ParcelType StageEnterCostType = FlatData.ParcelType.None,
      long StageEnterCostId = 0,
      int StageEnterCostAmount = 0,
      FlatData.ParcelType ManageEchelonStageEnterCostType = FlatData.ParcelType.None,
      long ManageEchelonStageEnterCostId = 0,
      int ManageEchelonStageEnterCostAmount = 0,
      long EnterScenarioGroupId = 0,
      long ClearScenarioGroupId = 0,
      long ConquestRewardId = 0,
      FlatData.StageTopography StageTopography = FlatData.StageTopography.Street,
      int RecommandLevel = 0,
      long TacticRewardExp = 0,
      long FixedEchelonId = 0,
      FlatData.EchelonExtensionType EchelonExtensionType = FlatData.EchelonExtensionType.Base) {
    builder.StartTable(32);
    ConquestUnitExcel.AddFixedEchelonId(builder, FixedEchelonId);
    ConquestUnitExcel.AddTacticRewardExp(builder, TacticRewardExp);
    ConquestUnitExcel.AddConquestRewardId(builder, ConquestRewardId);
    ConquestUnitExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupId);
    ConquestUnitExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId);
    ConquestUnitExcel.AddManageEchelonStageEnterCostId(builder, ManageEchelonStageEnterCostId);
    ConquestUnitExcel.AddStageEnterCostId(builder, StageEnterCostId);
    ConquestUnitExcel.AddGroupBuffId(builder, GroupBuffId);
    ConquestUnitExcel.AddGroundId(builder, GroundId);
    ConquestUnitExcel.AddBattleDuration(builder, BattleDuration);
    ConquestUnitExcel.AddPrevUnitGroup(builder, PrevUnitGroup);
    ConquestUnitExcel.AddUnitGroup(builder, UnitGroup);
    ConquestUnitExcel.AddId(builder, Id);
    ConquestUnitExcel.AddEchelonExtensionType(builder, EchelonExtensionType);
    ConquestUnitExcel.AddRecommandLevel(builder, RecommandLevel);
    ConquestUnitExcel.AddStageTopography(builder, StageTopography);
    ConquestUnitExcel.AddManageEchelonStageEnterCostAmount(builder, ManageEchelonStageEnterCostAmount);
    ConquestUnitExcel.AddManageEchelonStageEnterCostType(builder, ManageEchelonStageEnterCostType);
    ConquestUnitExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount);
    ConquestUnitExcel.AddStageEnterCostType(builder, StageEnterCostType);
    ConquestUnitExcel.AddStarGoalAmount(builder, StarGoalAmountOffset);
    ConquestUnitExcel.AddStarGoal(builder, StarGoalOffset);
    ConquestUnitExcel.AddTeam(builder, Team);
    ConquestUnitExcel.AddEnemyType(builder, EnemyType);
    ConquestUnitExcel.AddPointAnimation(builder, PointAnimationOffset);
    ConquestUnitExcel.AddUnitFxPrefabName(builder, UnitFxPrefabNameOffset);
    ConquestUnitExcel.AddShieldEffectScale(builder, ShieldEffectScale);
    ConquestUnitExcel.AddScale(builder, Scale);
    ConquestUnitExcel.AddStrategyPrefabName(builder, StrategyPrefabNameOffset);
    ConquestUnitExcel.AddPrefabName(builder, PrefabNameOffset);
    ConquestUnitExcel.AddName(builder, NameOffset);
    ConquestUnitExcel.AddKey(builder, Key);
    return ConquestUnitExcel.EndConquestUnitExcel(builder);
  }

  public static void StartConquestUnitExcel(FlatBufferBuilder builder) { builder.StartTable(32); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddKey(FlatBufferBuilder builder, uint key) { builder.AddUint(1, key, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset prefabNameOffset) { builder.AddOffset(3, prefabNameOffset.Value, 0); }
  public static void AddStrategyPrefabName(FlatBufferBuilder builder, StringOffset strategyPrefabNameOffset) { builder.AddOffset(4, strategyPrefabNameOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, float scale) { builder.AddFloat(5, scale, 0.0f); }
  public static void AddShieldEffectScale(FlatBufferBuilder builder, float shieldEffectScale) { builder.AddFloat(6, shieldEffectScale, 0.0f); }
  public static void AddUnitFxPrefabName(FlatBufferBuilder builder, StringOffset unitFxPrefabNameOffset) { builder.AddOffset(7, unitFxPrefabNameOffset.Value, 0); }
  public static void AddPointAnimation(FlatBufferBuilder builder, StringOffset pointAnimationOffset) { builder.AddOffset(8, pointAnimationOffset.Value, 0); }
  public static void AddEnemyType(FlatBufferBuilder builder, FlatData.ConquestEnemyType enemyType) { builder.AddInt(9, (int)enemyType, 0); }
  public static void AddTeam(FlatBufferBuilder builder, FlatData.ConquestTeamType team) { builder.AddInt(10, (int)team, 0); }
  public static void AddUnitGroup(FlatBufferBuilder builder, long unitGroup) { builder.AddLong(11, unitGroup, 0); }
  public static void AddPrevUnitGroup(FlatBufferBuilder builder, long prevUnitGroup) { builder.AddLong(12, prevUnitGroup, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(13, battleDuration, 0); }
  public static void AddGroundId(FlatBufferBuilder builder, long groundId) { builder.AddLong(14, groundId, 0); }
  public static void AddStarGoal(FlatBufferBuilder builder, VectorOffset starGoalOffset) { builder.AddOffset(15, starGoalOffset.Value, 0); }
  public static VectorOffset CreateStarGoalVector(FlatBufferBuilder builder, FlatData.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, FlatData.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatData.StarGoalType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatData.StarGoalType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStarGoalAmount(FlatBufferBuilder builder, VectorOffset starGoalAmountOffset) { builder.AddOffset(16, starGoalAmountOffset.Value, 0); }
  public static VectorOffset CreateStarGoalAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGroupBuffId(FlatBufferBuilder builder, long groupBuffId) { builder.AddLong(17, groupBuffId, 0); }
  public static void AddStageEnterCostType(FlatBufferBuilder builder, FlatData.ParcelType stageEnterCostType) { builder.AddInt(18, (int)stageEnterCostType, 0); }
  public static void AddStageEnterCostId(FlatBufferBuilder builder, long stageEnterCostId) { builder.AddLong(19, stageEnterCostId, 0); }
  public static void AddStageEnterCostAmount(FlatBufferBuilder builder, int stageEnterCostAmount) { builder.AddInt(20, stageEnterCostAmount, 0); }
  public static void AddManageEchelonStageEnterCostType(FlatBufferBuilder builder, FlatData.ParcelType manageEchelonStageEnterCostType) { builder.AddInt(21, (int)manageEchelonStageEnterCostType, 0); }
  public static void AddManageEchelonStageEnterCostId(FlatBufferBuilder builder, long manageEchelonStageEnterCostId) { builder.AddLong(22, manageEchelonStageEnterCostId, 0); }
  public static void AddManageEchelonStageEnterCostAmount(FlatBufferBuilder builder, int manageEchelonStageEnterCostAmount) { builder.AddInt(23, manageEchelonStageEnterCostAmount, 0); }
  public static void AddEnterScenarioGroupId(FlatBufferBuilder builder, long enterScenarioGroupId) { builder.AddLong(24, enterScenarioGroupId, 0); }
  public static void AddClearScenarioGroupId(FlatBufferBuilder builder, long clearScenarioGroupId) { builder.AddLong(25, clearScenarioGroupId, 0); }
  public static void AddConquestRewardId(FlatBufferBuilder builder, long conquestRewardId) { builder.AddLong(26, conquestRewardId, 0); }
  public static void AddStageTopography(FlatBufferBuilder builder, FlatData.StageTopography stageTopography) { builder.AddInt(27, (int)stageTopography, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int recommandLevel) { builder.AddInt(28, recommandLevel, 0); }
  public static void AddTacticRewardExp(FlatBufferBuilder builder, long tacticRewardExp) { builder.AddLong(29, tacticRewardExp, 0); }
  public static void AddFixedEchelonId(FlatBufferBuilder builder, long fixedEchelonId) { builder.AddLong(30, fixedEchelonId, 0); }
  public static void AddEchelonExtensionType(FlatBufferBuilder builder, FlatData.EchelonExtensionType echelonExtensionType) { builder.AddInt(31, (int)echelonExtensionType, 0); }
  public static Offset<FlatData.ConquestUnitExcel> EndConquestUnitExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.ConquestUnitExcel>(o);
  }
  public ConquestUnitExcelT UnPack() {
    var _o = new ConquestUnitExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConquestUnitExcelT _o) {
    _o.Id = this.Id;
    _o.Key = this.Key;
    _o.Name = this.Name;
    _o.PrefabName = this.PrefabName;
    _o.StrategyPrefabName = this.StrategyPrefabName;
    _o.Scale = this.Scale;
    _o.ShieldEffectScale = this.ShieldEffectScale;
    _o.UnitFxPrefabName = this.UnitFxPrefabName;
    _o.PointAnimation = this.PointAnimation;
    _o.EnemyType = this.EnemyType;
    _o.Team = this.Team;
    _o.UnitGroup = this.UnitGroup;
    _o.PrevUnitGroup = this.PrevUnitGroup;
    _o.BattleDuration = this.BattleDuration;
    _o.GroundId = this.GroundId;
    _o.StarGoal = new List<FlatData.StarGoalType>();
    for (var _j = 0; _j < this.StarGoalLength; ++_j) {_o.StarGoal.Add(this.StarGoal(_j));}
    _o.StarGoalAmount = new List<int>();
    for (var _j = 0; _j < this.StarGoalAmountLength; ++_j) {_o.StarGoalAmount.Add(this.StarGoalAmount(_j));}
    _o.GroupBuffId = this.GroupBuffId;
    _o.StageEnterCostType = this.StageEnterCostType;
    _o.StageEnterCostId = this.StageEnterCostId;
    _o.StageEnterCostAmount = this.StageEnterCostAmount;
    _o.ManageEchelonStageEnterCostType = this.ManageEchelonStageEnterCostType;
    _o.ManageEchelonStageEnterCostId = this.ManageEchelonStageEnterCostId;
    _o.ManageEchelonStageEnterCostAmount = this.ManageEchelonStageEnterCostAmount;
    _o.EnterScenarioGroupId = this.EnterScenarioGroupId;
    _o.ClearScenarioGroupId = this.ClearScenarioGroupId;
    _o.ConquestRewardId = this.ConquestRewardId;
    _o.StageTopography = this.StageTopography;
    _o.RecommandLevel = this.RecommandLevel;
    _o.TacticRewardExp = this.TacticRewardExp;
    _o.FixedEchelonId = this.FixedEchelonId;
    _o.EchelonExtensionType = this.EchelonExtensionType;
  }
  public static Offset<FlatData.ConquestUnitExcel> Pack(FlatBufferBuilder builder, ConquestUnitExcelT _o) {
    if (_o == null) return default(Offset<FlatData.ConquestUnitExcel>);
    var _Name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _PrefabName = _o.PrefabName == null ? default(StringOffset) : builder.CreateString(_o.PrefabName);
    var _StrategyPrefabName = _o.StrategyPrefabName == null ? default(StringOffset) : builder.CreateString(_o.StrategyPrefabName);
    var _UnitFxPrefabName = _o.UnitFxPrefabName == null ? default(StringOffset) : builder.CreateString(_o.UnitFxPrefabName);
    var _PointAnimation = _o.PointAnimation == null ? default(StringOffset) : builder.CreateString(_o.PointAnimation);
    var _StarGoal = default(VectorOffset);
    if (_o.StarGoal != null) {
      var __StarGoal = _o.StarGoal.ToArray();
      _StarGoal = CreateStarGoalVector(builder, __StarGoal);
    }
    var _StarGoalAmount = default(VectorOffset);
    if (_o.StarGoalAmount != null) {
      var __StarGoalAmount = _o.StarGoalAmount.ToArray();
      _StarGoalAmount = CreateStarGoalAmountVector(builder, __StarGoalAmount);
    }
    return CreateConquestUnitExcel(
      builder,
      _o.Id,
      _o.Key,
      _Name,
      _PrefabName,
      _StrategyPrefabName,
      _o.Scale,
      _o.ShieldEffectScale,
      _UnitFxPrefabName,
      _PointAnimation,
      _o.EnemyType,
      _o.Team,
      _o.UnitGroup,
      _o.PrevUnitGroup,
      _o.BattleDuration,
      _o.GroundId,
      _StarGoal,
      _StarGoalAmount,
      _o.GroupBuffId,
      _o.StageEnterCostType,
      _o.StageEnterCostId,
      _o.StageEnterCostAmount,
      _o.ManageEchelonStageEnterCostType,
      _o.ManageEchelonStageEnterCostId,
      _o.ManageEchelonStageEnterCostAmount,
      _o.EnterScenarioGroupId,
      _o.ClearScenarioGroupId,
      _o.ConquestRewardId,
      _o.StageTopography,
      _o.RecommandLevel,
      _o.TacticRewardExp,
      _o.FixedEchelonId,
      _o.EchelonExtensionType);
  }
}

public class ConquestUnitExcelT
{
  [Newtonsoft.Json.JsonProperty("Id")]
  public long Id { get; set; }
  [Newtonsoft.Json.JsonProperty("Key")]
  public uint Key { get; set; }
  [Newtonsoft.Json.JsonProperty("Name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("PrefabName")]
  public string PrefabName { get; set; }
  [Newtonsoft.Json.JsonProperty("StrategyPrefabName")]
  public string StrategyPrefabName { get; set; }
  [Newtonsoft.Json.JsonProperty("Scale")]
  public float Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("ShieldEffectScale")]
  public float ShieldEffectScale { get; set; }
  [Newtonsoft.Json.JsonProperty("UnitFxPrefabName")]
  public string UnitFxPrefabName { get; set; }
  [Newtonsoft.Json.JsonProperty("PointAnimation")]
  public string PointAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("EnemyType")]
  public FlatData.ConquestEnemyType EnemyType { get; set; }
  [Newtonsoft.Json.JsonProperty("Team")]
  public FlatData.ConquestTeamType Team { get; set; }
  [Newtonsoft.Json.JsonProperty("UnitGroup")]
  public long UnitGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("PrevUnitGroup")]
  public long PrevUnitGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("BattleDuration")]
  public long BattleDuration { get; set; }
  [Newtonsoft.Json.JsonProperty("GroundId")]
  public long GroundId { get; set; }
  [Newtonsoft.Json.JsonProperty("StarGoal")]
  public List<FlatData.StarGoalType> StarGoal { get; set; }
  [Newtonsoft.Json.JsonProperty("StarGoalAmount")]
  public List<int> StarGoalAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("GroupBuffId")]
  public long GroupBuffId { get; set; }
  [Newtonsoft.Json.JsonProperty("StageEnterCostType")]
  public FlatData.ParcelType StageEnterCostType { get; set; }
  [Newtonsoft.Json.JsonProperty("StageEnterCostId")]
  public long StageEnterCostId { get; set; }
  [Newtonsoft.Json.JsonProperty("StageEnterCostAmount")]
  public int StageEnterCostAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("ManageEchelonStageEnterCostType")]
  public FlatData.ParcelType ManageEchelonStageEnterCostType { get; set; }
  [Newtonsoft.Json.JsonProperty("ManageEchelonStageEnterCostId")]
  public long ManageEchelonStageEnterCostId { get; set; }
  [Newtonsoft.Json.JsonProperty("ManageEchelonStageEnterCostAmount")]
  public int ManageEchelonStageEnterCostAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("EnterScenarioGroupId")]
  public long EnterScenarioGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("ClearScenarioGroupId")]
  public long ClearScenarioGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("ConquestRewardId")]
  public long ConquestRewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("StageTopography")]
  public FlatData.StageTopography StageTopography { get; set; }
  [Newtonsoft.Json.JsonProperty("RecommandLevel")]
  public int RecommandLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("TacticRewardExp")]
  public long TacticRewardExp { get; set; }
  [Newtonsoft.Json.JsonProperty("FixedEchelonId")]
  public long FixedEchelonId { get; set; }
  [Newtonsoft.Json.JsonProperty("EchelonExtensionType")]
  public FlatData.EchelonExtensionType EchelonExtensionType { get; set; }

  public ConquestUnitExcelT() {
    this.Id = 0;
    this.Key = 0;
    this.Name = null;
    this.PrefabName = null;
    this.StrategyPrefabName = null;
    this.Scale = 0.0f;
    this.ShieldEffectScale = 0.0f;
    this.UnitFxPrefabName = null;
    this.PointAnimation = null;
    this.EnemyType = FlatData.ConquestEnemyType.None;
    this.Team = FlatData.ConquestTeamType.None;
    this.UnitGroup = 0;
    this.PrevUnitGroup = 0;
    this.BattleDuration = 0;
    this.GroundId = 0;
    this.StarGoal = null;
    this.StarGoalAmount = null;
    this.GroupBuffId = 0;
    this.StageEnterCostType = FlatData.ParcelType.None;
    this.StageEnterCostId = 0;
    this.StageEnterCostAmount = 0;
    this.ManageEchelonStageEnterCostType = FlatData.ParcelType.None;
    this.ManageEchelonStageEnterCostId = 0;
    this.ManageEchelonStageEnterCostAmount = 0;
    this.EnterScenarioGroupId = 0;
    this.ClearScenarioGroupId = 0;
    this.ConquestRewardId = 0;
    this.StageTopography = FlatData.StageTopography.Street;
    this.RecommandLevel = 0;
    this.TacticRewardExp = 0;
    this.FixedEchelonId = 0;
    this.EchelonExtensionType = FlatData.EchelonExtensionType.Base;
  }
}


static public class ConquestUnitExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Key*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*PrefabName*/, false)
      && verifier.VerifyString(tablePos, 12 /*StrategyPrefabName*/, false)
      && verifier.VerifyField(tablePos, 14 /*Scale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ShieldEffectScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*UnitFxPrefabName*/, false)
      && verifier.VerifyString(tablePos, 20 /*PointAnimation*/, false)
      && verifier.VerifyField(tablePos, 22 /*EnemyType*/, 4 /*FlatData.ConquestEnemyType*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Team*/, 4 /*FlatData.ConquestTeamType*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*UnitGroup*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*PrevUnitGroup*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*GroundId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*StarGoal*/, 4 /*FlatData.StarGoalType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*StarGoalAmount*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 38 /*GroupBuffId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*StageEnterCostType*/, 4 /*FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*StageEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*StageEnterCostAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*ManageEchelonStageEnterCostType*/, 4 /*FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*ManageEchelonStageEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*ManageEchelonStageEnterCostAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*EnterScenarioGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*ClearScenarioGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*ConquestRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*StageTopography*/, 4 /*FlatData.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*RecommandLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*TacticRewardExp*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*FixedEchelonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*EchelonExtensionType*/, 4 /*FlatData.EchelonExtensionType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
