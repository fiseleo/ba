// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MinigameTBGDiceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MinigameTBGDiceExcel GetRootAsMinigameTBGDiceExcel(ByteBuffer _bb) { return GetRootAsMinigameTBGDiceExcel(_bb, new MinigameTBGDiceExcel()); }
  public static MinigameTBGDiceExcel GetRootAsMinigameTBGDiceExcel(ByteBuffer _bb, MinigameTBGDiceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameTBGDiceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int DiceGroup { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DiceResult { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Prob { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatData.TBGProbModifyCondition ProbModifyCondition(int j) { int o = __p.__offset(14); return o != 0 ? (FlatData.TBGProbModifyCondition)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatData.TBGProbModifyCondition)0; }
  public int ProbModifyConditionLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatData.TBGProbModifyCondition> GetProbModifyConditionBytes() { return __p.__vector_as_span<FlatData.TBGProbModifyCondition>(14, 4); }
#else
  public ArraySegment<byte>? GetProbModifyConditionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public FlatData.TBGProbModifyCondition[] GetProbModifyConditionArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatData.TBGProbModifyCondition[] a = new FlatData.TBGProbModifyCondition[l]; for (int i = 0; i < l; i++) { a[i] = (FlatData.TBGProbModifyCondition)__p.bb.GetInt(p + i * 4); } return a; }
  public int ProbModifyValue(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ProbModifyValueLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetProbModifyValueBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetProbModifyValueBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetProbModifyValueArray() { return __p.__vector_as_array<int>(16); }
  public int ProbModifyLimit(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ProbModifyLimitLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetProbModifyLimitBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetProbModifyLimitBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetProbModifyLimitArray() { return __p.__vector_as_array<int>(18); }

  public static Offset<FlatData.MinigameTBGDiceExcel> CreateMinigameTBGDiceExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      int DiceGroup = 0,
      int DiceResult = 0,
      int Prob = 0,
      VectorOffset ProbModifyConditionOffset = default(VectorOffset),
      VectorOffset ProbModifyValueOffset = default(VectorOffset),
      VectorOffset ProbModifyLimitOffset = default(VectorOffset)) {
    builder.StartTable(8);
    MinigameTBGDiceExcel.AddUniqueId(builder, UniqueId);
    MinigameTBGDiceExcel.AddEventContentId(builder, EventContentId);
    MinigameTBGDiceExcel.AddProbModifyLimit(builder, ProbModifyLimitOffset);
    MinigameTBGDiceExcel.AddProbModifyValue(builder, ProbModifyValueOffset);
    MinigameTBGDiceExcel.AddProbModifyCondition(builder, ProbModifyConditionOffset);
    MinigameTBGDiceExcel.AddProb(builder, Prob);
    MinigameTBGDiceExcel.AddDiceResult(builder, DiceResult);
    MinigameTBGDiceExcel.AddDiceGroup(builder, DiceGroup);
    return MinigameTBGDiceExcel.EndMinigameTBGDiceExcel(builder);
  }

  public static void StartMinigameTBGDiceExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddDiceGroup(FlatBufferBuilder builder, int diceGroup) { builder.AddInt(2, diceGroup, 0); }
  public static void AddDiceResult(FlatBufferBuilder builder, int diceResult) { builder.AddInt(3, diceResult, 0); }
  public static void AddProb(FlatBufferBuilder builder, int prob) { builder.AddInt(4, prob, 0); }
  public static void AddProbModifyCondition(FlatBufferBuilder builder, VectorOffset probModifyConditionOffset) { builder.AddOffset(5, probModifyConditionOffset.Value, 0); }
  public static VectorOffset CreateProbModifyConditionVector(FlatBufferBuilder builder, FlatData.TBGProbModifyCondition[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateProbModifyConditionVectorBlock(FlatBufferBuilder builder, FlatData.TBGProbModifyCondition[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProbModifyConditionVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatData.TBGProbModifyCondition> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProbModifyConditionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatData.TBGProbModifyCondition>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartProbModifyConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProbModifyValue(FlatBufferBuilder builder, VectorOffset probModifyValueOffset) { builder.AddOffset(6, probModifyValueOffset.Value, 0); }
  public static VectorOffset CreateProbModifyValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateProbModifyValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProbModifyValueVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProbModifyValueVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartProbModifyValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProbModifyLimit(FlatBufferBuilder builder, VectorOffset probModifyLimitOffset) { builder.AddOffset(7, probModifyLimitOffset.Value, 0); }
  public static VectorOffset CreateProbModifyLimitVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateProbModifyLimitVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProbModifyLimitVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProbModifyLimitVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartProbModifyLimitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatData.MinigameTBGDiceExcel> EndMinigameTBGDiceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.MinigameTBGDiceExcel>(o);
  }
  public MinigameTBGDiceExcelT UnPack() {
    var _o = new MinigameTBGDiceExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameTBGDiceExcelT _o) {
    _o.EventContentId = this.EventContentId;
    _o.UniqueId = this.UniqueId;
    _o.DiceGroup = this.DiceGroup;
    _o.DiceResult = this.DiceResult;
    _o.Prob = this.Prob;
    _o.ProbModifyCondition = new List<FlatData.TBGProbModifyCondition>();
    for (var _j = 0; _j < this.ProbModifyConditionLength; ++_j) {_o.ProbModifyCondition.Add(this.ProbModifyCondition(_j));}
    _o.ProbModifyValue = new List<int>();
    for (var _j = 0; _j < this.ProbModifyValueLength; ++_j) {_o.ProbModifyValue.Add(this.ProbModifyValue(_j));}
    _o.ProbModifyLimit = new List<int>();
    for (var _j = 0; _j < this.ProbModifyLimitLength; ++_j) {_o.ProbModifyLimit.Add(this.ProbModifyLimit(_j));}
  }
  public static Offset<FlatData.MinigameTBGDiceExcel> Pack(FlatBufferBuilder builder, MinigameTBGDiceExcelT _o) {
    if (_o == null) return default(Offset<FlatData.MinigameTBGDiceExcel>);
    var _ProbModifyCondition = default(VectorOffset);
    if (_o.ProbModifyCondition != null) {
      var __ProbModifyCondition = _o.ProbModifyCondition.ToArray();
      _ProbModifyCondition = CreateProbModifyConditionVector(builder, __ProbModifyCondition);
    }
    var _ProbModifyValue = default(VectorOffset);
    if (_o.ProbModifyValue != null) {
      var __ProbModifyValue = _o.ProbModifyValue.ToArray();
      _ProbModifyValue = CreateProbModifyValueVector(builder, __ProbModifyValue);
    }
    var _ProbModifyLimit = default(VectorOffset);
    if (_o.ProbModifyLimit != null) {
      var __ProbModifyLimit = _o.ProbModifyLimit.ToArray();
      _ProbModifyLimit = CreateProbModifyLimitVector(builder, __ProbModifyLimit);
    }
    return CreateMinigameTBGDiceExcel(
      builder,
      _o.EventContentId,
      _o.UniqueId,
      _o.DiceGroup,
      _o.DiceResult,
      _o.Prob,
      _ProbModifyCondition,
      _ProbModifyValue,
      _ProbModifyLimit);
  }
}

public class MinigameTBGDiceExcelT
{
  [Newtonsoft.Json.JsonProperty("EventContentId")]
  public long EventContentId { get; set; }
  [Newtonsoft.Json.JsonProperty("UniqueId")]
  public long UniqueId { get; set; }
  [Newtonsoft.Json.JsonProperty("DiceGroup")]
  public int DiceGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("DiceResult")]
  public int DiceResult { get; set; }
  [Newtonsoft.Json.JsonProperty("Prob")]
  public int Prob { get; set; }
  [Newtonsoft.Json.JsonProperty("ProbModifyCondition")]
  public List<FlatData.TBGProbModifyCondition> ProbModifyCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("ProbModifyValue")]
  public List<int> ProbModifyValue { get; set; }
  [Newtonsoft.Json.JsonProperty("ProbModifyLimit")]
  public List<int> ProbModifyLimit { get; set; }

  public MinigameTBGDiceExcelT() {
    this.EventContentId = 0;
    this.UniqueId = 0;
    this.DiceGroup = 0;
    this.DiceResult = 0;
    this.Prob = 0;
    this.ProbModifyCondition = null;
    this.ProbModifyValue = null;
    this.ProbModifyLimit = null;
  }
}


static public class MinigameTBGDiceExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*DiceGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DiceResult*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Prob*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*ProbModifyCondition*/, 4 /*FlatData.TBGProbModifyCondition*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*ProbModifyValue*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*ProbModifyLimit*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
