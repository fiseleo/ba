// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConquestGroupBonusExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ConquestGroupBonusExcel GetRootAsConquestGroupBonusExcel(ByteBuffer _bb) { return GetRootAsConquestGroupBonusExcel(_bb, new ConquestGroupBonusExcel()); }
  public static ConquestGroupBonusExcel GetRootAsConquestGroupBonusExcel(ByteBuffer _bb, ConquestGroupBonusExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestGroupBonusExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ConquestBonusId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.School School(int j) { int o = __p.__offset(6); return o != 0 ? (FlatData.School)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatData.School)0; }
  public int SchoolLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatData.School> GetSchoolBytes() { return __p.__vector_as_span<FlatData.School>(6, 4); }
#else
  public ArraySegment<byte>? GetSchoolBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public FlatData.School[] GetSchoolArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatData.School[] a = new FlatData.School[l]; for (int i = 0; i < l; i++) { a[i] = (FlatData.School)__p.bb.GetInt(p + i * 4); } return a; }
  public uint RecommandLocalizeEtcId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public FlatData.ParcelType BonusParcelType(int j) { int o = __p.__offset(10); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatData.ParcelType)0; }
  public int BonusParcelTypeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatData.ParcelType> GetBonusParcelTypeBytes() { return __p.__vector_as_span<FlatData.ParcelType>(10, 4); }
#else
  public ArraySegment<byte>? GetBonusParcelTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public FlatData.ParcelType[] GetBonusParcelTypeArray() { int o = __p.__offset(10); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatData.ParcelType[] a = new FlatData.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatData.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long BonusId(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BonusIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBonusIdBytes() { return __p.__vector_as_span<long>(12, 8); }
#else
  public ArraySegment<byte>? GetBonusIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public long[] GetBonusIdArray() { return __p.__vector_as_array<long>(12); }
  public int BonusCharacterCount1(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BonusCharacterCount1Length { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBonusCharacterCount1Bytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetBonusCharacterCount1Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetBonusCharacterCount1Array() { return __p.__vector_as_array<int>(14); }
  public long BonusPercentage1(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BonusPercentage1Length { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBonusPercentage1Bytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetBonusPercentage1Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetBonusPercentage1Array() { return __p.__vector_as_array<long>(16); }
  public int BonusCharacterCount2(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BonusCharacterCount2Length { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBonusCharacterCount2Bytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetBonusCharacterCount2Bytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetBonusCharacterCount2Array() { return __p.__vector_as_array<int>(18); }
  public long BonusPercentage2(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BonusPercentage2Length { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBonusPercentage2Bytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetBonusPercentage2Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetBonusPercentage2Array() { return __p.__vector_as_array<long>(20); }
  public int BonusCharacterCount3(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BonusCharacterCount3Length { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBonusCharacterCount3Bytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetBonusCharacterCount3Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetBonusCharacterCount3Array() { return __p.__vector_as_array<int>(22); }
  public long BonusPercentage3(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BonusPercentage3Length { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBonusPercentage3Bytes() { return __p.__vector_as_span<long>(24, 8); }
#else
  public ArraySegment<byte>? GetBonusPercentage3Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public long[] GetBonusPercentage3Array() { return __p.__vector_as_array<long>(24); }

  public static Offset<FlatData.ConquestGroupBonusExcel> CreateConquestGroupBonusExcel(FlatBufferBuilder builder,
      long ConquestBonusId = 0,
      VectorOffset SchoolOffset = default(VectorOffset),
      uint RecommandLocalizeEtcId = 0,
      VectorOffset BonusParcelTypeOffset = default(VectorOffset),
      VectorOffset BonusIdOffset = default(VectorOffset),
      VectorOffset BonusCharacterCount1Offset = default(VectorOffset),
      VectorOffset BonusPercentage1Offset = default(VectorOffset),
      VectorOffset BonusCharacterCount2Offset = default(VectorOffset),
      VectorOffset BonusPercentage2Offset = default(VectorOffset),
      VectorOffset BonusCharacterCount3Offset = default(VectorOffset),
      VectorOffset BonusPercentage3Offset = default(VectorOffset)) {
    builder.StartTable(11);
    ConquestGroupBonusExcel.AddConquestBonusId(builder, ConquestBonusId);
    ConquestGroupBonusExcel.AddBonusPercentage3(builder, BonusPercentage3Offset);
    ConquestGroupBonusExcel.AddBonusCharacterCount3(builder, BonusCharacterCount3Offset);
    ConquestGroupBonusExcel.AddBonusPercentage2(builder, BonusPercentage2Offset);
    ConquestGroupBonusExcel.AddBonusCharacterCount2(builder, BonusCharacterCount2Offset);
    ConquestGroupBonusExcel.AddBonusPercentage1(builder, BonusPercentage1Offset);
    ConquestGroupBonusExcel.AddBonusCharacterCount1(builder, BonusCharacterCount1Offset);
    ConquestGroupBonusExcel.AddBonusId(builder, BonusIdOffset);
    ConquestGroupBonusExcel.AddBonusParcelType(builder, BonusParcelTypeOffset);
    ConquestGroupBonusExcel.AddRecommandLocalizeEtcId(builder, RecommandLocalizeEtcId);
    ConquestGroupBonusExcel.AddSchool(builder, SchoolOffset);
    return ConquestGroupBonusExcel.EndConquestGroupBonusExcel(builder);
  }

  public static void StartConquestGroupBonusExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddConquestBonusId(FlatBufferBuilder builder, long conquestBonusId) { builder.AddLong(0, conquestBonusId, 0); }
  public static void AddSchool(FlatBufferBuilder builder, VectorOffset schoolOffset) { builder.AddOffset(1, schoolOffset.Value, 0); }
  public static VectorOffset CreateSchoolVector(FlatBufferBuilder builder, FlatData.School[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSchoolVectorBlock(FlatBufferBuilder builder, FlatData.School[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSchoolVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatData.School> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSchoolVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatData.School>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSchoolVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRecommandLocalizeEtcId(FlatBufferBuilder builder, uint recommandLocalizeEtcId) { builder.AddUint(2, recommandLocalizeEtcId, 0); }
  public static void AddBonusParcelType(FlatBufferBuilder builder, VectorOffset bonusParcelTypeOffset) { builder.AddOffset(3, bonusParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateBonusParcelTypeVector(FlatBufferBuilder builder, FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBonusParcelTypeVectorBlock(FlatBufferBuilder builder, FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatData.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatData.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonusParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBonusId(FlatBufferBuilder builder, VectorOffset bonusIdOffset) { builder.AddOffset(4, bonusIdOffset.Value, 0); }
  public static VectorOffset CreateBonusIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBonusIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonusIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBonusCharacterCount1(FlatBufferBuilder builder, VectorOffset bonusCharacterCount1Offset) { builder.AddOffset(5, bonusCharacterCount1Offset.Value, 0); }
  public static VectorOffset CreateBonusCharacterCount1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBonusCharacterCount1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusCharacterCount1VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusCharacterCount1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonusCharacterCount1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBonusPercentage1(FlatBufferBuilder builder, VectorOffset bonusPercentage1Offset) { builder.AddOffset(6, bonusPercentage1Offset.Value, 0); }
  public static VectorOffset CreateBonusPercentage1Vector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentage1VectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentage1VectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentage1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonusPercentage1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBonusCharacterCount2(FlatBufferBuilder builder, VectorOffset bonusCharacterCount2Offset) { builder.AddOffset(7, bonusCharacterCount2Offset.Value, 0); }
  public static VectorOffset CreateBonusCharacterCount2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBonusCharacterCount2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusCharacterCount2VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusCharacterCount2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonusCharacterCount2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBonusPercentage2(FlatBufferBuilder builder, VectorOffset bonusPercentage2Offset) { builder.AddOffset(8, bonusPercentage2Offset.Value, 0); }
  public static VectorOffset CreateBonusPercentage2Vector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentage2VectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentage2VectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentage2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonusPercentage2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBonusCharacterCount3(FlatBufferBuilder builder, VectorOffset bonusCharacterCount3Offset) { builder.AddOffset(9, bonusCharacterCount3Offset.Value, 0); }
  public static VectorOffset CreateBonusCharacterCount3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBonusCharacterCount3VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusCharacterCount3VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusCharacterCount3VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonusCharacterCount3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBonusPercentage3(FlatBufferBuilder builder, VectorOffset bonusPercentage3Offset) { builder.AddOffset(10, bonusPercentage3Offset.Value, 0); }
  public static VectorOffset CreateBonusPercentage3Vector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentage3VectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentage3VectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentage3VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonusPercentage3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<FlatData.ConquestGroupBonusExcel> EndConquestGroupBonusExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.ConquestGroupBonusExcel>(o);
  }
  public ConquestGroupBonusExcelT UnPack() {
    var _o = new ConquestGroupBonusExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConquestGroupBonusExcelT _o) {
    _o.ConquestBonusId = this.ConquestBonusId;
    _o.School = new List<FlatData.School>();
    for (var _j = 0; _j < this.SchoolLength; ++_j) {_o.School.Add(this.School(_j));}
    _o.RecommandLocalizeEtcId = this.RecommandLocalizeEtcId;
    _o.BonusParcelType = new List<FlatData.ParcelType>();
    for (var _j = 0; _j < this.BonusParcelTypeLength; ++_j) {_o.BonusParcelType.Add(this.BonusParcelType(_j));}
    _o.BonusId = new List<long>();
    for (var _j = 0; _j < this.BonusIdLength; ++_j) {_o.BonusId.Add(this.BonusId(_j));}
    _o.BonusCharacterCount1 = new List<int>();
    for (var _j = 0; _j < this.BonusCharacterCount1Length; ++_j) {_o.BonusCharacterCount1.Add(this.BonusCharacterCount1(_j));}
    _o.BonusPercentage1 = new List<long>();
    for (var _j = 0; _j < this.BonusPercentage1Length; ++_j) {_o.BonusPercentage1.Add(this.BonusPercentage1(_j));}
    _o.BonusCharacterCount2 = new List<int>();
    for (var _j = 0; _j < this.BonusCharacterCount2Length; ++_j) {_o.BonusCharacterCount2.Add(this.BonusCharacterCount2(_j));}
    _o.BonusPercentage2 = new List<long>();
    for (var _j = 0; _j < this.BonusPercentage2Length; ++_j) {_o.BonusPercentage2.Add(this.BonusPercentage2(_j));}
    _o.BonusCharacterCount3 = new List<int>();
    for (var _j = 0; _j < this.BonusCharacterCount3Length; ++_j) {_o.BonusCharacterCount3.Add(this.BonusCharacterCount3(_j));}
    _o.BonusPercentage3 = new List<long>();
    for (var _j = 0; _j < this.BonusPercentage3Length; ++_j) {_o.BonusPercentage3.Add(this.BonusPercentage3(_j));}
  }
  public static Offset<FlatData.ConquestGroupBonusExcel> Pack(FlatBufferBuilder builder, ConquestGroupBonusExcelT _o) {
    if (_o == null) return default(Offset<FlatData.ConquestGroupBonusExcel>);
    var _School = default(VectorOffset);
    if (_o.School != null) {
      var __School = _o.School.ToArray();
      _School = CreateSchoolVector(builder, __School);
    }
    var _BonusParcelType = default(VectorOffset);
    if (_o.BonusParcelType != null) {
      var __BonusParcelType = _o.BonusParcelType.ToArray();
      _BonusParcelType = CreateBonusParcelTypeVector(builder, __BonusParcelType);
    }
    var _BonusId = default(VectorOffset);
    if (_o.BonusId != null) {
      var __BonusId = _o.BonusId.ToArray();
      _BonusId = CreateBonusIdVector(builder, __BonusId);
    }
    var _BonusCharacterCount1 = default(VectorOffset);
    if (_o.BonusCharacterCount1 != null) {
      var __BonusCharacterCount1 = _o.BonusCharacterCount1.ToArray();
      _BonusCharacterCount1 = CreateBonusCharacterCount1Vector(builder, __BonusCharacterCount1);
    }
    var _BonusPercentage1 = default(VectorOffset);
    if (_o.BonusPercentage1 != null) {
      var __BonusPercentage1 = _o.BonusPercentage1.ToArray();
      _BonusPercentage1 = CreateBonusPercentage1Vector(builder, __BonusPercentage1);
    }
    var _BonusCharacterCount2 = default(VectorOffset);
    if (_o.BonusCharacterCount2 != null) {
      var __BonusCharacterCount2 = _o.BonusCharacterCount2.ToArray();
      _BonusCharacterCount2 = CreateBonusCharacterCount2Vector(builder, __BonusCharacterCount2);
    }
    var _BonusPercentage2 = default(VectorOffset);
    if (_o.BonusPercentage2 != null) {
      var __BonusPercentage2 = _o.BonusPercentage2.ToArray();
      _BonusPercentage2 = CreateBonusPercentage2Vector(builder, __BonusPercentage2);
    }
    var _BonusCharacterCount3 = default(VectorOffset);
    if (_o.BonusCharacterCount3 != null) {
      var __BonusCharacterCount3 = _o.BonusCharacterCount3.ToArray();
      _BonusCharacterCount3 = CreateBonusCharacterCount3Vector(builder, __BonusCharacterCount3);
    }
    var _BonusPercentage3 = default(VectorOffset);
    if (_o.BonusPercentage3 != null) {
      var __BonusPercentage3 = _o.BonusPercentage3.ToArray();
      _BonusPercentage3 = CreateBonusPercentage3Vector(builder, __BonusPercentage3);
    }
    return CreateConquestGroupBonusExcel(
      builder,
      _o.ConquestBonusId,
      _School,
      _o.RecommandLocalizeEtcId,
      _BonusParcelType,
      _BonusId,
      _BonusCharacterCount1,
      _BonusPercentage1,
      _BonusCharacterCount2,
      _BonusPercentage2,
      _BonusCharacterCount3,
      _BonusPercentage3);
  }
}

public class ConquestGroupBonusExcelT
{
  [Newtonsoft.Json.JsonProperty("ConquestBonusId")]
  public long ConquestBonusId { get; set; }
  [Newtonsoft.Json.JsonProperty("School")]
  public List<FlatData.School> School { get; set; }
  [Newtonsoft.Json.JsonProperty("RecommandLocalizeEtcId")]
  public uint RecommandLocalizeEtcId { get; set; }
  [Newtonsoft.Json.JsonProperty("BonusParcelType")]
  public List<FlatData.ParcelType> BonusParcelType { get; set; }
  [Newtonsoft.Json.JsonProperty("BonusId")]
  public List<long> BonusId { get; set; }
  [Newtonsoft.Json.JsonProperty("BonusCharacterCount1")]
  public List<int> BonusCharacterCount1 { get; set; }
  [Newtonsoft.Json.JsonProperty("BonusPercentage1")]
  public List<long> BonusPercentage1 { get; set; }
  [Newtonsoft.Json.JsonProperty("BonusCharacterCount2")]
  public List<int> BonusCharacterCount2 { get; set; }
  [Newtonsoft.Json.JsonProperty("BonusPercentage2")]
  public List<long> BonusPercentage2 { get; set; }
  [Newtonsoft.Json.JsonProperty("BonusCharacterCount3")]
  public List<int> BonusCharacterCount3 { get; set; }
  [Newtonsoft.Json.JsonProperty("BonusPercentage3")]
  public List<long> BonusPercentage3 { get; set; }

  public ConquestGroupBonusExcelT() {
    this.ConquestBonusId = 0;
    this.School = null;
    this.RecommandLocalizeEtcId = 0;
    this.BonusParcelType = null;
    this.BonusId = null;
    this.BonusCharacterCount1 = null;
    this.BonusPercentage1 = null;
    this.BonusCharacterCount2 = null;
    this.BonusPercentage2 = null;
    this.BonusCharacterCount3 = null;
    this.BonusPercentage3 = null;
  }
}


static public class ConquestGroupBonusExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ConquestBonusId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*School*/, 4 /*FlatData.School*/, false)
      && verifier.VerifyField(tablePos, 8 /*RecommandLocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*BonusParcelType*/, 4 /*FlatData.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*BonusId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*BonusCharacterCount1*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*BonusPercentage1*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*BonusCharacterCount2*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*BonusPercentage2*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*BonusCharacterCount3*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*BonusPercentage3*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
