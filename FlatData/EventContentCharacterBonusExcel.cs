// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EventContentCharacterBonusExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EventContentCharacterBonusExcel GetRootAsEventContentCharacterBonusExcel(ByteBuffer _bb) { return GetRootAsEventContentCharacterBonusExcel(_bb, new EventContentCharacterBonusExcel()); }
  public static EventContentCharacterBonusExcel GetRootAsEventContentCharacterBonusExcel(ByteBuffer _bb, EventContentCharacterBonusExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentCharacterBonusExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.EventContentItemType EventContentItemType(int j) { int o = __p.__offset(8); return o != 0 ? (FlatData.EventContentItemType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatData.EventContentItemType)0; }
  public int EventContentItemTypeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatData.EventContentItemType> GetEventContentItemTypeBytes() { return __p.__vector_as_span<FlatData.EventContentItemType>(8, 4); }
#else
  public ArraySegment<byte>? GetEventContentItemTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public FlatData.EventContentItemType[] GetEventContentItemTypeArray() { int o = __p.__offset(8); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatData.EventContentItemType[] a = new FlatData.EventContentItemType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatData.EventContentItemType)__p.bb.GetInt(p + i * 4); } return a; }
  public long BonusPercentage(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BonusPercentageLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBonusPercentageBytes() { return __p.__vector_as_span<long>(10, 8); }
#else
  public ArraySegment<byte>? GetBonusPercentageBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public long[] GetBonusPercentageArray() { return __p.__vector_as_array<long>(10); }

  public static Offset<FlatData.EventContentCharacterBonusExcel> CreateEventContentCharacterBonusExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long CharacterId = 0,
      VectorOffset EventContentItemTypeOffset = default(VectorOffset),
      VectorOffset BonusPercentageOffset = default(VectorOffset)) {
    builder.StartTable(4);
    EventContentCharacterBonusExcel.AddCharacterId(builder, CharacterId);
    EventContentCharacterBonusExcel.AddEventContentId(builder, EventContentId);
    EventContentCharacterBonusExcel.AddBonusPercentage(builder, BonusPercentageOffset);
    EventContentCharacterBonusExcel.AddEventContentItemType(builder, EventContentItemTypeOffset);
    return EventContentCharacterBonusExcel.EndEventContentCharacterBonusExcel(builder);
  }

  public static void StartEventContentCharacterBonusExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(1, characterId, 0); }
  public static void AddEventContentItemType(FlatBufferBuilder builder, VectorOffset eventContentItemTypeOffset) { builder.AddOffset(2, eventContentItemTypeOffset.Value, 0); }
  public static VectorOffset CreateEventContentItemTypeVector(FlatBufferBuilder builder, FlatData.EventContentItemType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEventContentItemTypeVectorBlock(FlatBufferBuilder builder, FlatData.EventContentItemType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEventContentItemTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatData.EventContentItemType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEventContentItemTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatData.EventContentItemType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEventContentItemTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBonusPercentage(FlatBufferBuilder builder, VectorOffset bonusPercentageOffset) { builder.AddOffset(3, bonusPercentageOffset.Value, 0); }
  public static VectorOffset CreateBonusPercentageVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentageVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentageVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusPercentageVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonusPercentageVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<FlatData.EventContentCharacterBonusExcel> EndEventContentCharacterBonusExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.EventContentCharacterBonusExcel>(o);
  }
  public EventContentCharacterBonusExcelT UnPack() {
    var _o = new EventContentCharacterBonusExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentCharacterBonusExcelT _o) {
    _o.EventContentId = this.EventContentId;
    _o.CharacterId = this.CharacterId;
    _o.EventContentItemType = new List<FlatData.EventContentItemType>();
    for (var _j = 0; _j < this.EventContentItemTypeLength; ++_j) {_o.EventContentItemType.Add(this.EventContentItemType(_j));}
    _o.BonusPercentage = new List<long>();
    for (var _j = 0; _j < this.BonusPercentageLength; ++_j) {_o.BonusPercentage.Add(this.BonusPercentage(_j));}
  }
  public static Offset<FlatData.EventContentCharacterBonusExcel> Pack(FlatBufferBuilder builder, EventContentCharacterBonusExcelT _o) {
    if (_o == null) return default(Offset<FlatData.EventContentCharacterBonusExcel>);
    var _EventContentItemType = default(VectorOffset);
    if (_o.EventContentItemType != null) {
      var __EventContentItemType = _o.EventContentItemType.ToArray();
      _EventContentItemType = CreateEventContentItemTypeVector(builder, __EventContentItemType);
    }
    var _BonusPercentage = default(VectorOffset);
    if (_o.BonusPercentage != null) {
      var __BonusPercentage = _o.BonusPercentage.ToArray();
      _BonusPercentage = CreateBonusPercentageVector(builder, __BonusPercentage);
    }
    return CreateEventContentCharacterBonusExcel(
      builder,
      _o.EventContentId,
      _o.CharacterId,
      _EventContentItemType,
      _BonusPercentage);
  }
}

public class EventContentCharacterBonusExcelT
{
  [Newtonsoft.Json.JsonProperty("EventContentId")]
  public long EventContentId { get; set; }
  [Newtonsoft.Json.JsonProperty("CharacterId")]
  public long CharacterId { get; set; }
  [Newtonsoft.Json.JsonProperty("EventContentItemType")]
  public List<FlatData.EventContentItemType> EventContentItemType { get; set; }
  [Newtonsoft.Json.JsonProperty("BonusPercentage")]
  public List<long> BonusPercentage { get; set; }

  public EventContentCharacterBonusExcelT() {
    this.EventContentId = 0;
    this.CharacterId = 0;
    this.EventContentItemType = null;
    this.BonusPercentage = null;
  }
}


static public class EventContentCharacterBonusExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*EventContentItemType*/, 4 /*FlatData.EventContentItemType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*BonusPercentage*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
