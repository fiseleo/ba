// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConquestCalculateExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ConquestCalculateExcel GetRootAsConquestCalculateExcel(ByteBuffer _bb) { return GetRootAsConquestCalculateExcel(_bb, new ConquestCalculateExcel()); }
  public static ConquestCalculateExcel GetRootAsConquestCalculateExcel(ByteBuffer _bb, ConquestCalculateExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestCalculateExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.ParcelType CalculateConditionParcelType { get { int o = __p.__offset(6); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ParcelType.None; } }
  public long CalculateConditionParcelUniqueId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CalculateConditionParcelAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatData.ConquestCalculateExcel> CreateConquestCalculateExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      FlatData.ParcelType CalculateConditionParcelType = FlatData.ParcelType.None,
      long CalculateConditionParcelUniqueId = 0,
      long CalculateConditionParcelAmount = 0) {
    builder.StartTable(4);
    ConquestCalculateExcel.AddCalculateConditionParcelAmount(builder, CalculateConditionParcelAmount);
    ConquestCalculateExcel.AddCalculateConditionParcelUniqueId(builder, CalculateConditionParcelUniqueId);
    ConquestCalculateExcel.AddEventContentId(builder, EventContentId);
    ConquestCalculateExcel.AddCalculateConditionParcelType(builder, CalculateConditionParcelType);
    return ConquestCalculateExcel.EndConquestCalculateExcel(builder);
  }

  public static void StartConquestCalculateExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddCalculateConditionParcelType(FlatBufferBuilder builder, FlatData.ParcelType calculateConditionParcelType) { builder.AddInt(1, (int)calculateConditionParcelType, 0); }
  public static void AddCalculateConditionParcelUniqueId(FlatBufferBuilder builder, long calculateConditionParcelUniqueId) { builder.AddLong(2, calculateConditionParcelUniqueId, 0); }
  public static void AddCalculateConditionParcelAmount(FlatBufferBuilder builder, long calculateConditionParcelAmount) { builder.AddLong(3, calculateConditionParcelAmount, 0); }
  public static Offset<FlatData.ConquestCalculateExcel> EndConquestCalculateExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.ConquestCalculateExcel>(o);
  }
  public ConquestCalculateExcelT UnPack() {
    var _o = new ConquestCalculateExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConquestCalculateExcelT _o) {
    _o.EventContentId = this.EventContentId;
    _o.CalculateConditionParcelType = this.CalculateConditionParcelType;
    _o.CalculateConditionParcelUniqueId = this.CalculateConditionParcelUniqueId;
    _o.CalculateConditionParcelAmount = this.CalculateConditionParcelAmount;
  }
  public static Offset<FlatData.ConquestCalculateExcel> Pack(FlatBufferBuilder builder, ConquestCalculateExcelT _o) {
    if (_o == null) return default(Offset<FlatData.ConquestCalculateExcel>);
    return CreateConquestCalculateExcel(
      builder,
      _o.EventContentId,
      _o.CalculateConditionParcelType,
      _o.CalculateConditionParcelUniqueId,
      _o.CalculateConditionParcelAmount);
  }
}

public class ConquestCalculateExcelT
{
  [Newtonsoft.Json.JsonProperty("EventContentId")]
  public long EventContentId { get; set; }
  [Newtonsoft.Json.JsonProperty("CalculateConditionParcelType")]
  public FlatData.ParcelType CalculateConditionParcelType { get; set; }
  [Newtonsoft.Json.JsonProperty("CalculateConditionParcelUniqueId")]
  public long CalculateConditionParcelUniqueId { get; set; }
  [Newtonsoft.Json.JsonProperty("CalculateConditionParcelAmount")]
  public long CalculateConditionParcelAmount { get; set; }

  public ConquestCalculateExcelT() {
    this.EventContentId = 0;
    this.CalculateConditionParcelType = FlatData.ParcelType.None;
    this.CalculateConditionParcelUniqueId = 0;
    this.CalculateConditionParcelAmount = 0;
  }
}


static public class ConquestCalculateExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CalculateConditionParcelType*/, 4 /*FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CalculateConditionParcelUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*CalculateConditionParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
