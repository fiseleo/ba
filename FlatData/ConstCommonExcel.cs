// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConstCommonExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ConstCommonExcel GetRootAsConstCommonExcel(ByteBuffer _bb) { return GetRootAsConstCommonExcel(_bb, new ConstCommonExcel()); }
  public static ConstCommonExcel GetRootAsConstCommonExcel(ByteBuffer _bb, ConstCommonExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstCommonExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CampaignMainStageMaxRank { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CampaignMainStageBestRecord { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HardAdventurePlayCountRecoverDailyNumber { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HardStageCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TacticRankClearTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long BaseTimeScale { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int GachaPercentage { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long AcademyFavorZoneId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CafePresetSlotCount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long CafeMonologueIntervalMillisec { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CafeMonologueDefaultDuration { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CafeBubbleIdleDurationMilliSec { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int FindGiftTimeLimit { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CafeAutoChargePeriodInMsc { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CafeProductionDecimalPosition { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CafeSetGroupApplyCount { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeekDungeonFindGiftRewardLimitCount { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageFailedCurrencyRefundRate { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnterDeposit { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AccountMaxLevel { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MainSquadExpBonus { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SupportSquadExpBonus { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AccountExpRatio { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MissionToastLifeTime { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExpItemInsertLimit { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExpItemInsertAccelTime { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterLvUpCoefficient { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipmentLvUpCoefficient { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExpEquipInsertLimit { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipLvUpCoefficient { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NicknameLength { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CraftDuration(int j) { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CraftDurationLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCraftDurationBytes() { return __p.__vector_as_span<int>(66, 4); }
#else
  public ArraySegment<byte>? GetCraftDurationBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public int[] GetCraftDurationArray() { return __p.__vector_as_array<int>(66); }
  public int CraftLimitTime { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShiftingCraftDuration(int j) { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShiftingCraftDurationLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShiftingCraftDurationBytes() { return __p.__vector_as_span<int>(70, 4); }
#else
  public ArraySegment<byte>? GetShiftingCraftDurationBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public int[] GetShiftingCraftDurationArray() { return __p.__vector_as_array<int>(70); }
  public int ShiftingCraftTicketConsumeAmount { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShiftingCraftSlotMaxCapacity { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CraftTicketItemUniqueId { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CraftTicketConsumeAmount { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatData.ParcelType AcademyEnterCostType { get { int o = __p.__offset(80); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ParcelType.None; } }
  public long AcademyEnterCostId { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int AcademyTicketCost { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MassangerMessageExpireDay { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CraftLeafNodeGenerateLv1Count { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CraftLeafNodeGenerateLv2Count { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TutorialGachaShopId { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BeforehandGachaShopId { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TutorialGachaGoodsId { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipmentSlotOpenLevel(int j) { int o = __p.__offset(98); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EquipmentSlotOpenLevelLength { get { int o = __p.__offset(98); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEquipmentSlotOpenLevelBytes() { return __p.__vector_as_span<int>(98, 4); }
#else
  public ArraySegment<byte>? GetEquipmentSlotOpenLevelBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public int[] GetEquipmentSlotOpenLevelArray() { return __p.__vector_as_array<int>(98); }
  public float ScenarioAutoDelayMillisec { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long JoinOrCreateClanCoolTimeFromHour { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClanMaxMember { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClanSearchResultCount { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClanMaxApplicant { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClanRejoinCoolTimeFromSecond { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ClanWordBalloonMaxCharacter { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long CallNameRenameCoolTimeFromHour { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CallNameMinimumLength { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CallNameMaximumLength { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LobbyToScreenModeWaitTime { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScreenshotToLobbyButtonHideDelay { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PrologueScenarioID01 { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PrologueScenarioID02 { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TutorialHardStage11 { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TutorialSpeedButtonStage { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TutorialCharacterDefaultCount { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.ShopCategoryType TutorialShopCategoryType { get { int o = __p.__offset(134); return o != 0 ? (FlatData.ShopCategoryType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ShopCategoryType.General; } }
  public long AdventureStrategyPlayTimeLimitInSeconds { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WeekDungoenTacticPlayTimeLimitInSeconds { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RaidTacticPlayTimeLimitInSeconds { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RaidOpponentListAmount { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CraftBaseGoldRequired(int j) { int o = __p.__offset(144); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int CraftBaseGoldRequiredLength { get { int o = __p.__offset(144); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetCraftBaseGoldRequiredBytes() { return __p.__vector_as_span<long>(144, 8); }
#else
  public ArraySegment<byte>? GetCraftBaseGoldRequiredBytes() { return __p.__vector_as_arraysegment(144); }
#endif
  public long[] GetCraftBaseGoldRequiredArray() { return __p.__vector_as_array<long>(144); }
  public int PostExpiredDayAttendance { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PostExpiredDayInventoryOverflow { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PostExpiredDayGameManager { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string UILabelCharacterWrap { get { int o = __p.__offset(152); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUILabelCharacterWrapBytes() { return __p.__vector_as_span<byte>(152, 1); }
#else
  public ArraySegment<byte>? GetUILabelCharacterWrapBytes() { return __p.__vector_as_arraysegment(152); }
#endif
  public byte[] GetUILabelCharacterWrapArray() { return __p.__vector_as_array<byte>(152); }
  public float RequestTimeOut { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int MailStorageSoftCap { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MailStorageHardCap { get { int o = __p.__offset(158); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ClearDeckStorageSize { get { int o = __p.__offset(160); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ClearDeckNoStarViewCount { get { int o = __p.__offset(162); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ClearDeck1StarViewCount { get { int o = __p.__offset(164); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ClearDeck2StarViewCount { get { int o = __p.__offset(166); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ClearDeck3StarViewCount { get { int o = __p.__offset(168); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExSkillLevelMax { get { int o = __p.__offset(170); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PublicSkillLevelMax { get { int o = __p.__offset(172); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassiveSkillLevelMax { get { int o = __p.__offset(174); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExtraPassiveSkillLevelMax { get { int o = __p.__offset(176); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AccountCommentMaxLength { get { int o = __p.__offset(178); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CafeSummonCoolTimeFromHour { get { int o = __p.__offset(180); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long LimitedStageDailyClearCount { get { int o = __p.__offset(182); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedStageEntryTimeLimit { get { int o = __p.__offset(184); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedStageEntryTimeBuffer { get { int o = __p.__offset(186); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedStagePointAmount { get { int o = __p.__offset(188); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedStagePointPerApMin { get { int o = __p.__offset(190); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedStagePointPerApMax { get { int o = __p.__offset(192); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int AccountLinkReward { get { int o = __p.__offset(194); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MonthlyProductCheckDays { get { int o = __p.__offset(196); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeaponLvUpCoefficient { get { int o = __p.__offset(198); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowRaidMyListCount { get { int o = __p.__offset(200); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxLevelExpMasterCoinRatio { get { int o = __p.__offset(202); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatData.ParcelType RaidEnterCostType { get { int o = __p.__offset(204); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ParcelType.None; } }
  public long RaidEnterCostId { get { int o = __p.__offset(206); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RaidTicketCost { get { int o = __p.__offset(208); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string TimeAttackDungeonScenarioId { get { int o = __p.__offset(210); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeAttackDungeonScenarioIdBytes() { return __p.__vector_as_span<byte>(210, 1); }
#else
  public ArraySegment<byte>? GetTimeAttackDungeonScenarioIdBytes() { return __p.__vector_as_arraysegment(210); }
#endif
  public byte[] GetTimeAttackDungeonScenarioIdArray() { return __p.__vector_as_array<byte>(210); }
  public int TimeAttackDungoenPlayCountPerTicket { get { int o = __p.__offset(212); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatData.ParcelType TimeAttackDungeonEnterCostType { get { int o = __p.__offset(214); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ParcelType.None; } }
  public long TimeAttackDungeonEnterCostId { get { int o = __p.__offset(216); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TimeAttackDungeonEnterCost { get { int o = __p.__offset(218); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClanLeaderTransferLastLoginLimit { get { int o = __p.__offset(220); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MonthlyProductRepurchasePopupLimit { get { int o = __p.__offset(222); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatData.Tag CommonFavorItemTags(int j) { int o = __p.__offset(224); return o != 0 ? (FlatData.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatData.Tag)0; }
  public int CommonFavorItemTagsLength { get { int o = __p.__offset(224); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatData.Tag> GetCommonFavorItemTagsBytes() { return __p.__vector_as_span<FlatData.Tag>(224, 4); }
#else
  public ArraySegment<byte>? GetCommonFavorItemTagsBytes() { return __p.__vector_as_arraysegment(224); }
#endif
  public FlatData.Tag[] GetCommonFavorItemTagsArray() { int o = __p.__offset(224); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatData.Tag[] a = new FlatData.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (FlatData.Tag)__p.bb.GetInt(p + i * 4); } return a; }
  public long MaxApMasterCoinPerWeek { get { int o = __p.__offset(226); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CraftOpenExpTier1 { get { int o = __p.__offset(228); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CraftOpenExpTier2 { get { int o = __p.__offset(230); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CraftOpenExpTier3 { get { int o = __p.__offset(232); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterEquipmentGearSlot { get { int o = __p.__offset(234); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int BirthDayDDay { get { int o = __p.__offset(236); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RecommendedFriendsLvDifferenceLimit { get { int o = __p.__offset(238); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DDosDetectCount { get { int o = __p.__offset(240); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DDosCheckIntervalInSeconds { get { int o = __p.__offset(242); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxFriendsCount { get { int o = __p.__offset(244); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxFriendsRequest { get { int o = __p.__offset(246); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FriendsSearchRequestCount { get { int o = __p.__offset(248); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FriendsMaxApplicant { get { int o = __p.__offset(250); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long IdCardDefaultCharacterId { get { int o = __p.__offset(252); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long IdCardDefaultBgId { get { int o = __p.__offset(254); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidGemEnterCost { get { int o = __p.__offset(256); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidGemEnterAmout { get { int o = __p.__offset(258); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FriendIdCardCommentMaxLength { get { int o = __p.__offset(260); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int FormationPresetNumberOfEchelonTab { get { int o = __p.__offset(262); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FormationPresetNumberOfEchelon { get { int o = __p.__offset(264); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FormationPresetRecentNumberOfEchelon { get { int o = __p.__offset(266); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FormationPresetEchelonTabTextLength { get { int o = __p.__offset(268); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FormationPresetEchelonSlotTextLength { get { int o = __p.__offset(270); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharProfileRowIntervalKr { get { int o = __p.__offset(272); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharProfileRowIntervalJp { get { int o = __p.__offset(274); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharProfilePopupRowIntervalKr { get { int o = __p.__offset(276); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharProfilePopupRowIntervalJp { get { int o = __p.__offset(278); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BeforehandGachaCount { get { int o = __p.__offset(280); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BeforehandGachaGroupId { get { int o = __p.__offset(282); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RenewalDisplayOrderDay { get { int o = __p.__offset(284); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long EmblemDefaultId { get { int o = __p.__offset(286); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string BirthdayMailStartDate { get { int o = __p.__offset(288); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBirthdayMailStartDateBytes() { return __p.__vector_as_span<byte>(288, 1); }
#else
  public ArraySegment<byte>? GetBirthdayMailStartDateBytes() { return __p.__vector_as_arraysegment(288); }
#endif
  public byte[] GetBirthdayMailStartDateArray() { return __p.__vector_as_array<byte>(288); }
  public int BirthdayMailRemainDate { get { int o = __p.__offset(290); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatData.ParcelType BirthdayMailParcelType { get { int o = __p.__offset(292); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ParcelType.None; } }
  public long BirthdayMailParcelId { get { int o = __p.__offset(294); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int BirthdayMailParcelAmount { get { int o = __p.__offset(296); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ClearDeckAverageDeckCount { get { int o = __p.__offset(298); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ClearDeckWorldRaidSaveConditionCoefficient { get { int o = __p.__offset(300); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ClearDeckShowCount { get { int o = __p.__offset(302); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterMaxLevel { get { int o = __p.__offset(304); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PotentialBonusStatMaxLevelMaxHP { get { int o = __p.__offset(306); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PotentialBonusStatMaxLevelAttackPower { get { int o = __p.__offset(308); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PotentialBonusStatMaxLevelHealPower { get { int o = __p.__offset(310); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PotentialOpenConditionCharacterLevel { get { int o = __p.__offset(312); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AssistStrangerMinLevel { get { int o = __p.__offset(314); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AssistStrangerMaxLevel { get { int o = __p.__offset(316); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxBlockedUserCount { get { int o = __p.__offset(318); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartConstCommonExcel(FlatBufferBuilder builder) { builder.StartTable(158); }
  public static void AddCampaignMainStageMaxRank(FlatBufferBuilder builder, int campaignMainStageMaxRank) { builder.AddInt(0, campaignMainStageMaxRank, 0); }
  public static void AddCampaignMainStageBestRecord(FlatBufferBuilder builder, int campaignMainStageBestRecord) { builder.AddInt(1, campaignMainStageBestRecord, 0); }
  public static void AddHardAdventurePlayCountRecoverDailyNumber(FlatBufferBuilder builder, int hardAdventurePlayCountRecoverDailyNumber) { builder.AddInt(2, hardAdventurePlayCountRecoverDailyNumber, 0); }
  public static void AddHardStageCount(FlatBufferBuilder builder, int hardStageCount) { builder.AddInt(3, hardStageCount, 0); }
  public static void AddTacticRankClearTime(FlatBufferBuilder builder, int tacticRankClearTime) { builder.AddInt(4, tacticRankClearTime, 0); }
  public static void AddBaseTimeScale(FlatBufferBuilder builder, long baseTimeScale) { builder.AddLong(5, baseTimeScale, 0); }
  public static void AddGachaPercentage(FlatBufferBuilder builder, int gachaPercentage) { builder.AddInt(6, gachaPercentage, 0); }
  public static void AddAcademyFavorZoneId(FlatBufferBuilder builder, long academyFavorZoneId) { builder.AddLong(7, academyFavorZoneId, 0); }
  public static void AddCafePresetSlotCount(FlatBufferBuilder builder, int cafePresetSlotCount) { builder.AddInt(8, cafePresetSlotCount, 0); }
  public static void AddCafeMonologueIntervalMillisec(FlatBufferBuilder builder, long cafeMonologueIntervalMillisec) { builder.AddLong(9, cafeMonologueIntervalMillisec, 0); }
  public static void AddCafeMonologueDefaultDuration(FlatBufferBuilder builder, long cafeMonologueDefaultDuration) { builder.AddLong(10, cafeMonologueDefaultDuration, 0); }
  public static void AddCafeBubbleIdleDurationMilliSec(FlatBufferBuilder builder, long cafeBubbleIdleDurationMilliSec) { builder.AddLong(11, cafeBubbleIdleDurationMilliSec, 0); }
  public static void AddFindGiftTimeLimit(FlatBufferBuilder builder, int findGiftTimeLimit) { builder.AddInt(12, findGiftTimeLimit, 0); }
  public static void AddCafeAutoChargePeriodInMsc(FlatBufferBuilder builder, int cafeAutoChargePeriodInMsc) { builder.AddInt(13, cafeAutoChargePeriodInMsc, 0); }
  public static void AddCafeProductionDecimalPosition(FlatBufferBuilder builder, int cafeProductionDecimalPosition) { builder.AddInt(14, cafeProductionDecimalPosition, 0); }
  public static void AddCafeSetGroupApplyCount(FlatBufferBuilder builder, int cafeSetGroupApplyCount) { builder.AddInt(15, cafeSetGroupApplyCount, 0); }
  public static void AddWeekDungeonFindGiftRewardLimitCount(FlatBufferBuilder builder, int weekDungeonFindGiftRewardLimitCount) { builder.AddInt(16, weekDungeonFindGiftRewardLimitCount, 0); }
  public static void AddStageFailedCurrencyRefundRate(FlatBufferBuilder builder, int stageFailedCurrencyRefundRate) { builder.AddInt(17, stageFailedCurrencyRefundRate, 0); }
  public static void AddEnterDeposit(FlatBufferBuilder builder, int enterDeposit) { builder.AddInt(18, enterDeposit, 0); }
  public static void AddAccountMaxLevel(FlatBufferBuilder builder, int accountMaxLevel) { builder.AddInt(19, accountMaxLevel, 0); }
  public static void AddMainSquadExpBonus(FlatBufferBuilder builder, int mainSquadExpBonus) { builder.AddInt(20, mainSquadExpBonus, 0); }
  public static void AddSupportSquadExpBonus(FlatBufferBuilder builder, int supportSquadExpBonus) { builder.AddInt(21, supportSquadExpBonus, 0); }
  public static void AddAccountExpRatio(FlatBufferBuilder builder, int accountExpRatio) { builder.AddInt(22, accountExpRatio, 0); }
  public static void AddMissionToastLifeTime(FlatBufferBuilder builder, int missionToastLifeTime) { builder.AddInt(23, missionToastLifeTime, 0); }
  public static void AddExpItemInsertLimit(FlatBufferBuilder builder, int expItemInsertLimit) { builder.AddInt(24, expItemInsertLimit, 0); }
  public static void AddExpItemInsertAccelTime(FlatBufferBuilder builder, int expItemInsertAccelTime) { builder.AddInt(25, expItemInsertAccelTime, 0); }
  public static void AddCharacterLvUpCoefficient(FlatBufferBuilder builder, int characterLvUpCoefficient) { builder.AddInt(26, characterLvUpCoefficient, 0); }
  public static void AddEquipmentLvUpCoefficient(FlatBufferBuilder builder, int equipmentLvUpCoefficient) { builder.AddInt(27, equipmentLvUpCoefficient, 0); }
  public static void AddExpEquipInsertLimit(FlatBufferBuilder builder, int expEquipInsertLimit) { builder.AddInt(28, expEquipInsertLimit, 0); }
  public static void AddEquipLvUpCoefficient(FlatBufferBuilder builder, int equipLvUpCoefficient) { builder.AddInt(29, equipLvUpCoefficient, 0); }
  public static void AddNicknameLength(FlatBufferBuilder builder, int nicknameLength) { builder.AddInt(30, nicknameLength, 0); }
  public static void AddCraftDuration(FlatBufferBuilder builder, VectorOffset craftDurationOffset) { builder.AddOffset(31, craftDurationOffset.Value, 0); }
  public static VectorOffset CreateCraftDurationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCraftDurationVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCraftDurationVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCraftDurationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCraftDurationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCraftLimitTime(FlatBufferBuilder builder, int craftLimitTime) { builder.AddInt(32, craftLimitTime, 0); }
  public static void AddShiftingCraftDuration(FlatBufferBuilder builder, VectorOffset shiftingCraftDurationOffset) { builder.AddOffset(33, shiftingCraftDurationOffset.Value, 0); }
  public static VectorOffset CreateShiftingCraftDurationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShiftingCraftDurationVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShiftingCraftDurationVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShiftingCraftDurationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShiftingCraftDurationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShiftingCraftTicketConsumeAmount(FlatBufferBuilder builder, int shiftingCraftTicketConsumeAmount) { builder.AddInt(34, shiftingCraftTicketConsumeAmount, 0); }
  public static void AddShiftingCraftSlotMaxCapacity(FlatBufferBuilder builder, int shiftingCraftSlotMaxCapacity) { builder.AddInt(35, shiftingCraftSlotMaxCapacity, 0); }
  public static void AddCraftTicketItemUniqueId(FlatBufferBuilder builder, int craftTicketItemUniqueId) { builder.AddInt(36, craftTicketItemUniqueId, 0); }
  public static void AddCraftTicketConsumeAmount(FlatBufferBuilder builder, int craftTicketConsumeAmount) { builder.AddInt(37, craftTicketConsumeAmount, 0); }
  public static void AddAcademyEnterCostType(FlatBufferBuilder builder, FlatData.ParcelType academyEnterCostType) { builder.AddInt(38, (int)academyEnterCostType, 0); }
  public static void AddAcademyEnterCostId(FlatBufferBuilder builder, long academyEnterCostId) { builder.AddLong(39, academyEnterCostId, 0); }
  public static void AddAcademyTicketCost(FlatBufferBuilder builder, int academyTicketCost) { builder.AddInt(40, academyTicketCost, 0); }
  public static void AddMassangerMessageExpireDay(FlatBufferBuilder builder, int massangerMessageExpireDay) { builder.AddInt(41, massangerMessageExpireDay, 0); }
  public static void AddCraftLeafNodeGenerateLv1Count(FlatBufferBuilder builder, int craftLeafNodeGenerateLv1Count) { builder.AddInt(42, craftLeafNodeGenerateLv1Count, 0); }
  public static void AddCraftLeafNodeGenerateLv2Count(FlatBufferBuilder builder, int craftLeafNodeGenerateLv2Count) { builder.AddInt(43, craftLeafNodeGenerateLv2Count, 0); }
  public static void AddTutorialGachaShopId(FlatBufferBuilder builder, int tutorialGachaShopId) { builder.AddInt(44, tutorialGachaShopId, 0); }
  public static void AddBeforehandGachaShopId(FlatBufferBuilder builder, int beforehandGachaShopId) { builder.AddInt(45, beforehandGachaShopId, 0); }
  public static void AddTutorialGachaGoodsId(FlatBufferBuilder builder, int tutorialGachaGoodsId) { builder.AddInt(46, tutorialGachaGoodsId, 0); }
  public static void AddEquipmentSlotOpenLevel(FlatBufferBuilder builder, VectorOffset equipmentSlotOpenLevelOffset) { builder.AddOffset(47, equipmentSlotOpenLevelOffset.Value, 0); }
  public static VectorOffset CreateEquipmentSlotOpenLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEquipmentSlotOpenLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEquipmentSlotOpenLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEquipmentSlotOpenLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEquipmentSlotOpenLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScenarioAutoDelayMillisec(FlatBufferBuilder builder, float scenarioAutoDelayMillisec) { builder.AddFloat(48, scenarioAutoDelayMillisec, 0.0f); }
  public static void AddJoinOrCreateClanCoolTimeFromHour(FlatBufferBuilder builder, long joinOrCreateClanCoolTimeFromHour) { builder.AddLong(49, joinOrCreateClanCoolTimeFromHour, 0); }
  public static void AddClanMaxMember(FlatBufferBuilder builder, long clanMaxMember) { builder.AddLong(50, clanMaxMember, 0); }
  public static void AddClanSearchResultCount(FlatBufferBuilder builder, long clanSearchResultCount) { builder.AddLong(51, clanSearchResultCount, 0); }
  public static void AddClanMaxApplicant(FlatBufferBuilder builder, long clanMaxApplicant) { builder.AddLong(52, clanMaxApplicant, 0); }
  public static void AddClanRejoinCoolTimeFromSecond(FlatBufferBuilder builder, long clanRejoinCoolTimeFromSecond) { builder.AddLong(53, clanRejoinCoolTimeFromSecond, 0); }
  public static void AddClanWordBalloonMaxCharacter(FlatBufferBuilder builder, int clanWordBalloonMaxCharacter) { builder.AddInt(54, clanWordBalloonMaxCharacter, 0); }
  public static void AddCallNameRenameCoolTimeFromHour(FlatBufferBuilder builder, long callNameRenameCoolTimeFromHour) { builder.AddLong(55, callNameRenameCoolTimeFromHour, 0); }
  public static void AddCallNameMinimumLength(FlatBufferBuilder builder, long callNameMinimumLength) { builder.AddLong(56, callNameMinimumLength, 0); }
  public static void AddCallNameMaximumLength(FlatBufferBuilder builder, long callNameMaximumLength) { builder.AddLong(57, callNameMaximumLength, 0); }
  public static void AddLobbyToScreenModeWaitTime(FlatBufferBuilder builder, long lobbyToScreenModeWaitTime) { builder.AddLong(58, lobbyToScreenModeWaitTime, 0); }
  public static void AddScreenshotToLobbyButtonHideDelay(FlatBufferBuilder builder, long screenshotToLobbyButtonHideDelay) { builder.AddLong(59, screenshotToLobbyButtonHideDelay, 0); }
  public static void AddPrologueScenarioID01(FlatBufferBuilder builder, long prologueScenarioID01) { builder.AddLong(60, prologueScenarioID01, 0); }
  public static void AddPrologueScenarioID02(FlatBufferBuilder builder, long prologueScenarioID02) { builder.AddLong(61, prologueScenarioID02, 0); }
  public static void AddTutorialHardStage11(FlatBufferBuilder builder, long tutorialHardStage11) { builder.AddLong(62, tutorialHardStage11, 0); }
  public static void AddTutorialSpeedButtonStage(FlatBufferBuilder builder, long tutorialSpeedButtonStage) { builder.AddLong(63, tutorialSpeedButtonStage, 0); }
  public static void AddTutorialCharacterDefaultCount(FlatBufferBuilder builder, long tutorialCharacterDefaultCount) { builder.AddLong(64, tutorialCharacterDefaultCount, 0); }
  public static void AddTutorialShopCategoryType(FlatBufferBuilder builder, FlatData.ShopCategoryType tutorialShopCategoryType) { builder.AddInt(65, (int)tutorialShopCategoryType, 0); }
  public static void AddAdventureStrategyPlayTimeLimitInSeconds(FlatBufferBuilder builder, long adventureStrategyPlayTimeLimitInSeconds) { builder.AddLong(66, adventureStrategyPlayTimeLimitInSeconds, 0); }
  public static void AddWeekDungoenTacticPlayTimeLimitInSeconds(FlatBufferBuilder builder, long weekDungoenTacticPlayTimeLimitInSeconds) { builder.AddLong(67, weekDungoenTacticPlayTimeLimitInSeconds, 0); }
  public static void AddRaidTacticPlayTimeLimitInSeconds(FlatBufferBuilder builder, long raidTacticPlayTimeLimitInSeconds) { builder.AddLong(68, raidTacticPlayTimeLimitInSeconds, 0); }
  public static void AddRaidOpponentListAmount(FlatBufferBuilder builder, long raidOpponentListAmount) { builder.AddLong(69, raidOpponentListAmount, 0); }
  public static void AddCraftBaseGoldRequired(FlatBufferBuilder builder, VectorOffset craftBaseGoldRequiredOffset) { builder.AddOffset(70, craftBaseGoldRequiredOffset.Value, 0); }
  public static VectorOffset CreateCraftBaseGoldRequiredVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCraftBaseGoldRequiredVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCraftBaseGoldRequiredVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCraftBaseGoldRequiredVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCraftBaseGoldRequiredVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddPostExpiredDayAttendance(FlatBufferBuilder builder, int postExpiredDayAttendance) { builder.AddInt(71, postExpiredDayAttendance, 0); }
  public static void AddPostExpiredDayInventoryOverflow(FlatBufferBuilder builder, int postExpiredDayInventoryOverflow) { builder.AddInt(72, postExpiredDayInventoryOverflow, 0); }
  public static void AddPostExpiredDayGameManager(FlatBufferBuilder builder, int postExpiredDayGameManager) { builder.AddInt(73, postExpiredDayGameManager, 0); }
  public static void AddUILabelCharacterWrap(FlatBufferBuilder builder, StringOffset uILabelCharacterWrapOffset) { builder.AddOffset(74, uILabelCharacterWrapOffset.Value, 0); }
  public static void AddRequestTimeOut(FlatBufferBuilder builder, float requestTimeOut) { builder.AddFloat(75, requestTimeOut, 0.0f); }
  public static void AddMailStorageSoftCap(FlatBufferBuilder builder, int mailStorageSoftCap) { builder.AddInt(76, mailStorageSoftCap, 0); }
  public static void AddMailStorageHardCap(FlatBufferBuilder builder, int mailStorageHardCap) { builder.AddInt(77, mailStorageHardCap, 0); }
  public static void AddClearDeckStorageSize(FlatBufferBuilder builder, int clearDeckStorageSize) { builder.AddInt(78, clearDeckStorageSize, 0); }
  public static void AddClearDeckNoStarViewCount(FlatBufferBuilder builder, int clearDeckNoStarViewCount) { builder.AddInt(79, clearDeckNoStarViewCount, 0); }
  public static void AddClearDeck1StarViewCount(FlatBufferBuilder builder, int clearDeck1StarViewCount) { builder.AddInt(80, clearDeck1StarViewCount, 0); }
  public static void AddClearDeck2StarViewCount(FlatBufferBuilder builder, int clearDeck2StarViewCount) { builder.AddInt(81, clearDeck2StarViewCount, 0); }
  public static void AddClearDeck3StarViewCount(FlatBufferBuilder builder, int clearDeck3StarViewCount) { builder.AddInt(82, clearDeck3StarViewCount, 0); }
  public static void AddExSkillLevelMax(FlatBufferBuilder builder, int exSkillLevelMax) { builder.AddInt(83, exSkillLevelMax, 0); }
  public static void AddPublicSkillLevelMax(FlatBufferBuilder builder, int publicSkillLevelMax) { builder.AddInt(84, publicSkillLevelMax, 0); }
  public static void AddPassiveSkillLevelMax(FlatBufferBuilder builder, int passiveSkillLevelMax) { builder.AddInt(85, passiveSkillLevelMax, 0); }
  public static void AddExtraPassiveSkillLevelMax(FlatBufferBuilder builder, int extraPassiveSkillLevelMax) { builder.AddInt(86, extraPassiveSkillLevelMax, 0); }
  public static void AddAccountCommentMaxLength(FlatBufferBuilder builder, int accountCommentMaxLength) { builder.AddInt(87, accountCommentMaxLength, 0); }
  public static void AddCafeSummonCoolTimeFromHour(FlatBufferBuilder builder, int cafeSummonCoolTimeFromHour) { builder.AddInt(88, cafeSummonCoolTimeFromHour, 0); }
  public static void AddLimitedStageDailyClearCount(FlatBufferBuilder builder, long limitedStageDailyClearCount) { builder.AddLong(89, limitedStageDailyClearCount, 0); }
  public static void AddLimitedStageEntryTimeLimit(FlatBufferBuilder builder, long limitedStageEntryTimeLimit) { builder.AddLong(90, limitedStageEntryTimeLimit, 0); }
  public static void AddLimitedStageEntryTimeBuffer(FlatBufferBuilder builder, long limitedStageEntryTimeBuffer) { builder.AddLong(91, limitedStageEntryTimeBuffer, 0); }
  public static void AddLimitedStagePointAmount(FlatBufferBuilder builder, long limitedStagePointAmount) { builder.AddLong(92, limitedStagePointAmount, 0); }
  public static void AddLimitedStagePointPerApMin(FlatBufferBuilder builder, long limitedStagePointPerApMin) { builder.AddLong(93, limitedStagePointPerApMin, 0); }
  public static void AddLimitedStagePointPerApMax(FlatBufferBuilder builder, long limitedStagePointPerApMax) { builder.AddLong(94, limitedStagePointPerApMax, 0); }
  public static void AddAccountLinkReward(FlatBufferBuilder builder, int accountLinkReward) { builder.AddInt(95, accountLinkReward, 0); }
  public static void AddMonthlyProductCheckDays(FlatBufferBuilder builder, int monthlyProductCheckDays) { builder.AddInt(96, monthlyProductCheckDays, 0); }
  public static void AddWeaponLvUpCoefficient(FlatBufferBuilder builder, int weaponLvUpCoefficient) { builder.AddInt(97, weaponLvUpCoefficient, 0); }
  public static void AddShowRaidMyListCount(FlatBufferBuilder builder, int showRaidMyListCount) { builder.AddInt(98, showRaidMyListCount, 0); }
  public static void AddMaxLevelExpMasterCoinRatio(FlatBufferBuilder builder, int maxLevelExpMasterCoinRatio) { builder.AddInt(99, maxLevelExpMasterCoinRatio, 0); }
  public static void AddRaidEnterCostType(FlatBufferBuilder builder, FlatData.ParcelType raidEnterCostType) { builder.AddInt(100, (int)raidEnterCostType, 0); }
  public static void AddRaidEnterCostId(FlatBufferBuilder builder, long raidEnterCostId) { builder.AddLong(101, raidEnterCostId, 0); }
  public static void AddRaidTicketCost(FlatBufferBuilder builder, long raidTicketCost) { builder.AddLong(102, raidTicketCost, 0); }
  public static void AddTimeAttackDungeonScenarioId(FlatBufferBuilder builder, StringOffset timeAttackDungeonScenarioIdOffset) { builder.AddOffset(103, timeAttackDungeonScenarioIdOffset.Value, 0); }
  public static void AddTimeAttackDungoenPlayCountPerTicket(FlatBufferBuilder builder, int timeAttackDungoenPlayCountPerTicket) { builder.AddInt(104, timeAttackDungoenPlayCountPerTicket, 0); }
  public static void AddTimeAttackDungeonEnterCostType(FlatBufferBuilder builder, FlatData.ParcelType timeAttackDungeonEnterCostType) { builder.AddInt(105, (int)timeAttackDungeonEnterCostType, 0); }
  public static void AddTimeAttackDungeonEnterCostId(FlatBufferBuilder builder, long timeAttackDungeonEnterCostId) { builder.AddLong(106, timeAttackDungeonEnterCostId, 0); }
  public static void AddTimeAttackDungeonEnterCost(FlatBufferBuilder builder, long timeAttackDungeonEnterCost) { builder.AddLong(107, timeAttackDungeonEnterCost, 0); }
  public static void AddClanLeaderTransferLastLoginLimit(FlatBufferBuilder builder, long clanLeaderTransferLastLoginLimit) { builder.AddLong(108, clanLeaderTransferLastLoginLimit, 0); }
  public static void AddMonthlyProductRepurchasePopupLimit(FlatBufferBuilder builder, int monthlyProductRepurchasePopupLimit) { builder.AddInt(109, monthlyProductRepurchasePopupLimit, 0); }
  public static void AddCommonFavorItemTags(FlatBufferBuilder builder, VectorOffset commonFavorItemTagsOffset) { builder.AddOffset(110, commonFavorItemTagsOffset.Value, 0); }
  public static VectorOffset CreateCommonFavorItemTagsVector(FlatBufferBuilder builder, FlatData.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCommonFavorItemTagsVectorBlock(FlatBufferBuilder builder, FlatData.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCommonFavorItemTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatData.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCommonFavorItemTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatData.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCommonFavorItemTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaxApMasterCoinPerWeek(FlatBufferBuilder builder, long maxApMasterCoinPerWeek) { builder.AddLong(111, maxApMasterCoinPerWeek, 0); }
  public static void AddCraftOpenExpTier1(FlatBufferBuilder builder, long craftOpenExpTier1) { builder.AddLong(112, craftOpenExpTier1, 0); }
  public static void AddCraftOpenExpTier2(FlatBufferBuilder builder, long craftOpenExpTier2) { builder.AddLong(113, craftOpenExpTier2, 0); }
  public static void AddCraftOpenExpTier3(FlatBufferBuilder builder, long craftOpenExpTier3) { builder.AddLong(114, craftOpenExpTier3, 0); }
  public static void AddCharacterEquipmentGearSlot(FlatBufferBuilder builder, long characterEquipmentGearSlot) { builder.AddLong(115, characterEquipmentGearSlot, 0); }
  public static void AddBirthDayDDay(FlatBufferBuilder builder, int birthDayDDay) { builder.AddInt(116, birthDayDDay, 0); }
  public static void AddRecommendedFriendsLvDifferenceLimit(FlatBufferBuilder builder, int recommendedFriendsLvDifferenceLimit) { builder.AddInt(117, recommendedFriendsLvDifferenceLimit, 0); }
  public static void AddDDosDetectCount(FlatBufferBuilder builder, int dDosDetectCount) { builder.AddInt(118, dDosDetectCount, 0); }
  public static void AddDDosCheckIntervalInSeconds(FlatBufferBuilder builder, int dDosCheckIntervalInSeconds) { builder.AddInt(119, dDosCheckIntervalInSeconds, 0); }
  public static void AddMaxFriendsCount(FlatBufferBuilder builder, int maxFriendsCount) { builder.AddInt(120, maxFriendsCount, 0); }
  public static void AddMaxFriendsRequest(FlatBufferBuilder builder, int maxFriendsRequest) { builder.AddInt(121, maxFriendsRequest, 0); }
  public static void AddFriendsSearchRequestCount(FlatBufferBuilder builder, int friendsSearchRequestCount) { builder.AddInt(122, friendsSearchRequestCount, 0); }
  public static void AddFriendsMaxApplicant(FlatBufferBuilder builder, int friendsMaxApplicant) { builder.AddInt(123, friendsMaxApplicant, 0); }
  public static void AddIdCardDefaultCharacterId(FlatBufferBuilder builder, long idCardDefaultCharacterId) { builder.AddLong(124, idCardDefaultCharacterId, 0); }
  public static void AddIdCardDefaultBgId(FlatBufferBuilder builder, long idCardDefaultBgId) { builder.AddLong(125, idCardDefaultBgId, 0); }
  public static void AddWorldRaidGemEnterCost(FlatBufferBuilder builder, long worldRaidGemEnterCost) { builder.AddLong(126, worldRaidGemEnterCost, 0); }
  public static void AddWorldRaidGemEnterAmout(FlatBufferBuilder builder, long worldRaidGemEnterAmout) { builder.AddLong(127, worldRaidGemEnterAmout, 0); }
  public static void AddFriendIdCardCommentMaxLength(FlatBufferBuilder builder, long friendIdCardCommentMaxLength) { builder.AddLong(128, friendIdCardCommentMaxLength, 0); }
  public static void AddFormationPresetNumberOfEchelonTab(FlatBufferBuilder builder, int formationPresetNumberOfEchelonTab) { builder.AddInt(129, formationPresetNumberOfEchelonTab, 0); }
  public static void AddFormationPresetNumberOfEchelon(FlatBufferBuilder builder, int formationPresetNumberOfEchelon) { builder.AddInt(130, formationPresetNumberOfEchelon, 0); }
  public static void AddFormationPresetRecentNumberOfEchelon(FlatBufferBuilder builder, int formationPresetRecentNumberOfEchelon) { builder.AddInt(131, formationPresetRecentNumberOfEchelon, 0); }
  public static void AddFormationPresetEchelonTabTextLength(FlatBufferBuilder builder, int formationPresetEchelonTabTextLength) { builder.AddInt(132, formationPresetEchelonTabTextLength, 0); }
  public static void AddFormationPresetEchelonSlotTextLength(FlatBufferBuilder builder, int formationPresetEchelonSlotTextLength) { builder.AddInt(133, formationPresetEchelonSlotTextLength, 0); }
  public static void AddCharProfileRowIntervalKr(FlatBufferBuilder builder, int charProfileRowIntervalKr) { builder.AddInt(134, charProfileRowIntervalKr, 0); }
  public static void AddCharProfileRowIntervalJp(FlatBufferBuilder builder, int charProfileRowIntervalJp) { builder.AddInt(135, charProfileRowIntervalJp, 0); }
  public static void AddCharProfilePopupRowIntervalKr(FlatBufferBuilder builder, int charProfilePopupRowIntervalKr) { builder.AddInt(136, charProfilePopupRowIntervalKr, 0); }
  public static void AddCharProfilePopupRowIntervalJp(FlatBufferBuilder builder, int charProfilePopupRowIntervalJp) { builder.AddInt(137, charProfilePopupRowIntervalJp, 0); }
  public static void AddBeforehandGachaCount(FlatBufferBuilder builder, int beforehandGachaCount) { builder.AddInt(138, beforehandGachaCount, 0); }
  public static void AddBeforehandGachaGroupId(FlatBufferBuilder builder, int beforehandGachaGroupId) { builder.AddInt(139, beforehandGachaGroupId, 0); }
  public static void AddRenewalDisplayOrderDay(FlatBufferBuilder builder, int renewalDisplayOrderDay) { builder.AddInt(140, renewalDisplayOrderDay, 0); }
  public static void AddEmblemDefaultId(FlatBufferBuilder builder, long emblemDefaultId) { builder.AddLong(141, emblemDefaultId, 0); }
  public static void AddBirthdayMailStartDate(FlatBufferBuilder builder, StringOffset birthdayMailStartDateOffset) { builder.AddOffset(142, birthdayMailStartDateOffset.Value, 0); }
  public static void AddBirthdayMailRemainDate(FlatBufferBuilder builder, int birthdayMailRemainDate) { builder.AddInt(143, birthdayMailRemainDate, 0); }
  public static void AddBirthdayMailParcelType(FlatBufferBuilder builder, FlatData.ParcelType birthdayMailParcelType) { builder.AddInt(144, (int)birthdayMailParcelType, 0); }
  public static void AddBirthdayMailParcelId(FlatBufferBuilder builder, long birthdayMailParcelId) { builder.AddLong(145, birthdayMailParcelId, 0); }
  public static void AddBirthdayMailParcelAmount(FlatBufferBuilder builder, int birthdayMailParcelAmount) { builder.AddInt(146, birthdayMailParcelAmount, 0); }
  public static void AddClearDeckAverageDeckCount(FlatBufferBuilder builder, int clearDeckAverageDeckCount) { builder.AddInt(147, clearDeckAverageDeckCount, 0); }
  public static void AddClearDeckWorldRaidSaveConditionCoefficient(FlatBufferBuilder builder, int clearDeckWorldRaidSaveConditionCoefficient) { builder.AddInt(148, clearDeckWorldRaidSaveConditionCoefficient, 0); }
  public static void AddClearDeckShowCount(FlatBufferBuilder builder, int clearDeckShowCount) { builder.AddInt(149, clearDeckShowCount, 0); }
  public static void AddCharacterMaxLevel(FlatBufferBuilder builder, int characterMaxLevel) { builder.AddInt(150, characterMaxLevel, 0); }
  public static void AddPotentialBonusStatMaxLevelMaxHP(FlatBufferBuilder builder, int potentialBonusStatMaxLevelMaxHP) { builder.AddInt(151, potentialBonusStatMaxLevelMaxHP, 0); }
  public static void AddPotentialBonusStatMaxLevelAttackPower(FlatBufferBuilder builder, int potentialBonusStatMaxLevelAttackPower) { builder.AddInt(152, potentialBonusStatMaxLevelAttackPower, 0); }
  public static void AddPotentialBonusStatMaxLevelHealPower(FlatBufferBuilder builder, int potentialBonusStatMaxLevelHealPower) { builder.AddInt(153, potentialBonusStatMaxLevelHealPower, 0); }
  public static void AddPotentialOpenConditionCharacterLevel(FlatBufferBuilder builder, int potentialOpenConditionCharacterLevel) { builder.AddInt(154, potentialOpenConditionCharacterLevel, 0); }
  public static void AddAssistStrangerMinLevel(FlatBufferBuilder builder, int assistStrangerMinLevel) { builder.AddInt(155, assistStrangerMinLevel, 0); }
  public static void AddAssistStrangerMaxLevel(FlatBufferBuilder builder, int assistStrangerMaxLevel) { builder.AddInt(156, assistStrangerMaxLevel, 0); }
  public static void AddMaxBlockedUserCount(FlatBufferBuilder builder, int maxBlockedUserCount) { builder.AddInt(157, maxBlockedUserCount, 0); }
  public static Offset<FlatData.ConstCommonExcel> EndConstCommonExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.ConstCommonExcel>(o);
  }
  public ConstCommonExcelT UnPack() {
    var _o = new ConstCommonExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstCommonExcelT _o) {
    _o.CampaignMainStageMaxRank = this.CampaignMainStageMaxRank;
    _o.CampaignMainStageBestRecord = this.CampaignMainStageBestRecord;
    _o.HardAdventurePlayCountRecoverDailyNumber = this.HardAdventurePlayCountRecoverDailyNumber;
    _o.HardStageCount = this.HardStageCount;
    _o.TacticRankClearTime = this.TacticRankClearTime;
    _o.BaseTimeScale = this.BaseTimeScale;
    _o.GachaPercentage = this.GachaPercentage;
    _o.AcademyFavorZoneId = this.AcademyFavorZoneId;
    _o.CafePresetSlotCount = this.CafePresetSlotCount;
    _o.CafeMonologueIntervalMillisec = this.CafeMonologueIntervalMillisec;
    _o.CafeMonologueDefaultDuration = this.CafeMonologueDefaultDuration;
    _o.CafeBubbleIdleDurationMilliSec = this.CafeBubbleIdleDurationMilliSec;
    _o.FindGiftTimeLimit = this.FindGiftTimeLimit;
    _o.CafeAutoChargePeriodInMsc = this.CafeAutoChargePeriodInMsc;
    _o.CafeProductionDecimalPosition = this.CafeProductionDecimalPosition;
    _o.CafeSetGroupApplyCount = this.CafeSetGroupApplyCount;
    _o.WeekDungeonFindGiftRewardLimitCount = this.WeekDungeonFindGiftRewardLimitCount;
    _o.StageFailedCurrencyRefundRate = this.StageFailedCurrencyRefundRate;
    _o.EnterDeposit = this.EnterDeposit;
    _o.AccountMaxLevel = this.AccountMaxLevel;
    _o.MainSquadExpBonus = this.MainSquadExpBonus;
    _o.SupportSquadExpBonus = this.SupportSquadExpBonus;
    _o.AccountExpRatio = this.AccountExpRatio;
    _o.MissionToastLifeTime = this.MissionToastLifeTime;
    _o.ExpItemInsertLimit = this.ExpItemInsertLimit;
    _o.ExpItemInsertAccelTime = this.ExpItemInsertAccelTime;
    _o.CharacterLvUpCoefficient = this.CharacterLvUpCoefficient;
    _o.EquipmentLvUpCoefficient = this.EquipmentLvUpCoefficient;
    _o.ExpEquipInsertLimit = this.ExpEquipInsertLimit;
    _o.EquipLvUpCoefficient = this.EquipLvUpCoefficient;
    _o.NicknameLength = this.NicknameLength;
    _o.CraftDuration = new List<int>();
    for (var _j = 0; _j < this.CraftDurationLength; ++_j) {_o.CraftDuration.Add(this.CraftDuration(_j));}
    _o.CraftLimitTime = this.CraftLimitTime;
    _o.ShiftingCraftDuration = new List<int>();
    for (var _j = 0; _j < this.ShiftingCraftDurationLength; ++_j) {_o.ShiftingCraftDuration.Add(this.ShiftingCraftDuration(_j));}
    _o.ShiftingCraftTicketConsumeAmount = this.ShiftingCraftTicketConsumeAmount;
    _o.ShiftingCraftSlotMaxCapacity = this.ShiftingCraftSlotMaxCapacity;
    _o.CraftTicketItemUniqueId = this.CraftTicketItemUniqueId;
    _o.CraftTicketConsumeAmount = this.CraftTicketConsumeAmount;
    _o.AcademyEnterCostType = this.AcademyEnterCostType;
    _o.AcademyEnterCostId = this.AcademyEnterCostId;
    _o.AcademyTicketCost = this.AcademyTicketCost;
    _o.MassangerMessageExpireDay = this.MassangerMessageExpireDay;
    _o.CraftLeafNodeGenerateLv1Count = this.CraftLeafNodeGenerateLv1Count;
    _o.CraftLeafNodeGenerateLv2Count = this.CraftLeafNodeGenerateLv2Count;
    _o.TutorialGachaShopId = this.TutorialGachaShopId;
    _o.BeforehandGachaShopId = this.BeforehandGachaShopId;
    _o.TutorialGachaGoodsId = this.TutorialGachaGoodsId;
    _o.EquipmentSlotOpenLevel = new List<int>();
    for (var _j = 0; _j < this.EquipmentSlotOpenLevelLength; ++_j) {_o.EquipmentSlotOpenLevel.Add(this.EquipmentSlotOpenLevel(_j));}
    _o.ScenarioAutoDelayMillisec = this.ScenarioAutoDelayMillisec;
    _o.JoinOrCreateClanCoolTimeFromHour = this.JoinOrCreateClanCoolTimeFromHour;
    _o.ClanMaxMember = this.ClanMaxMember;
    _o.ClanSearchResultCount = this.ClanSearchResultCount;
    _o.ClanMaxApplicant = this.ClanMaxApplicant;
    _o.ClanRejoinCoolTimeFromSecond = this.ClanRejoinCoolTimeFromSecond;
    _o.ClanWordBalloonMaxCharacter = this.ClanWordBalloonMaxCharacter;
    _o.CallNameRenameCoolTimeFromHour = this.CallNameRenameCoolTimeFromHour;
    _o.CallNameMinimumLength = this.CallNameMinimumLength;
    _o.CallNameMaximumLength = this.CallNameMaximumLength;
    _o.LobbyToScreenModeWaitTime = this.LobbyToScreenModeWaitTime;
    _o.ScreenshotToLobbyButtonHideDelay = this.ScreenshotToLobbyButtonHideDelay;
    _o.PrologueScenarioID01 = this.PrologueScenarioID01;
    _o.PrologueScenarioID02 = this.PrologueScenarioID02;
    _o.TutorialHardStage11 = this.TutorialHardStage11;
    _o.TutorialSpeedButtonStage = this.TutorialSpeedButtonStage;
    _o.TutorialCharacterDefaultCount = this.TutorialCharacterDefaultCount;
    _o.TutorialShopCategoryType = this.TutorialShopCategoryType;
    _o.AdventureStrategyPlayTimeLimitInSeconds = this.AdventureStrategyPlayTimeLimitInSeconds;
    _o.WeekDungoenTacticPlayTimeLimitInSeconds = this.WeekDungoenTacticPlayTimeLimitInSeconds;
    _o.RaidTacticPlayTimeLimitInSeconds = this.RaidTacticPlayTimeLimitInSeconds;
    _o.RaidOpponentListAmount = this.RaidOpponentListAmount;
    _o.CraftBaseGoldRequired = new List<long>();
    for (var _j = 0; _j < this.CraftBaseGoldRequiredLength; ++_j) {_o.CraftBaseGoldRequired.Add(this.CraftBaseGoldRequired(_j));}
    _o.PostExpiredDayAttendance = this.PostExpiredDayAttendance;
    _o.PostExpiredDayInventoryOverflow = this.PostExpiredDayInventoryOverflow;
    _o.PostExpiredDayGameManager = this.PostExpiredDayGameManager;
    _o.UILabelCharacterWrap = this.UILabelCharacterWrap;
    _o.RequestTimeOut = this.RequestTimeOut;
    _o.MailStorageSoftCap = this.MailStorageSoftCap;
    _o.MailStorageHardCap = this.MailStorageHardCap;
    _o.ClearDeckStorageSize = this.ClearDeckStorageSize;
    _o.ClearDeckNoStarViewCount = this.ClearDeckNoStarViewCount;
    _o.ClearDeck1StarViewCount = this.ClearDeck1StarViewCount;
    _o.ClearDeck2StarViewCount = this.ClearDeck2StarViewCount;
    _o.ClearDeck3StarViewCount = this.ClearDeck3StarViewCount;
    _o.ExSkillLevelMax = this.ExSkillLevelMax;
    _o.PublicSkillLevelMax = this.PublicSkillLevelMax;
    _o.PassiveSkillLevelMax = this.PassiveSkillLevelMax;
    _o.ExtraPassiveSkillLevelMax = this.ExtraPassiveSkillLevelMax;
    _o.AccountCommentMaxLength = this.AccountCommentMaxLength;
    _o.CafeSummonCoolTimeFromHour = this.CafeSummonCoolTimeFromHour;
    _o.LimitedStageDailyClearCount = this.LimitedStageDailyClearCount;
    _o.LimitedStageEntryTimeLimit = this.LimitedStageEntryTimeLimit;
    _o.LimitedStageEntryTimeBuffer = this.LimitedStageEntryTimeBuffer;
    _o.LimitedStagePointAmount = this.LimitedStagePointAmount;
    _o.LimitedStagePointPerApMin = this.LimitedStagePointPerApMin;
    _o.LimitedStagePointPerApMax = this.LimitedStagePointPerApMax;
    _o.AccountLinkReward = this.AccountLinkReward;
    _o.MonthlyProductCheckDays = this.MonthlyProductCheckDays;
    _o.WeaponLvUpCoefficient = this.WeaponLvUpCoefficient;
    _o.ShowRaidMyListCount = this.ShowRaidMyListCount;
    _o.MaxLevelExpMasterCoinRatio = this.MaxLevelExpMasterCoinRatio;
    _o.RaidEnterCostType = this.RaidEnterCostType;
    _o.RaidEnterCostId = this.RaidEnterCostId;
    _o.RaidTicketCost = this.RaidTicketCost;
    _o.TimeAttackDungeonScenarioId = this.TimeAttackDungeonScenarioId;
    _o.TimeAttackDungoenPlayCountPerTicket = this.TimeAttackDungoenPlayCountPerTicket;
    _o.TimeAttackDungeonEnterCostType = this.TimeAttackDungeonEnterCostType;
    _o.TimeAttackDungeonEnterCostId = this.TimeAttackDungeonEnterCostId;
    _o.TimeAttackDungeonEnterCost = this.TimeAttackDungeonEnterCost;
    _o.ClanLeaderTransferLastLoginLimit = this.ClanLeaderTransferLastLoginLimit;
    _o.MonthlyProductRepurchasePopupLimit = this.MonthlyProductRepurchasePopupLimit;
    _o.CommonFavorItemTags = new List<FlatData.Tag>();
    for (var _j = 0; _j < this.CommonFavorItemTagsLength; ++_j) {_o.CommonFavorItemTags.Add(this.CommonFavorItemTags(_j));}
    _o.MaxApMasterCoinPerWeek = this.MaxApMasterCoinPerWeek;
    _o.CraftOpenExpTier1 = this.CraftOpenExpTier1;
    _o.CraftOpenExpTier2 = this.CraftOpenExpTier2;
    _o.CraftOpenExpTier3 = this.CraftOpenExpTier3;
    _o.CharacterEquipmentGearSlot = this.CharacterEquipmentGearSlot;
    _o.BirthDayDDay = this.BirthDayDDay;
    _o.RecommendedFriendsLvDifferenceLimit = this.RecommendedFriendsLvDifferenceLimit;
    _o.DDosDetectCount = this.DDosDetectCount;
    _o.DDosCheckIntervalInSeconds = this.DDosCheckIntervalInSeconds;
    _o.MaxFriendsCount = this.MaxFriendsCount;
    _o.MaxFriendsRequest = this.MaxFriendsRequest;
    _o.FriendsSearchRequestCount = this.FriendsSearchRequestCount;
    _o.FriendsMaxApplicant = this.FriendsMaxApplicant;
    _o.IdCardDefaultCharacterId = this.IdCardDefaultCharacterId;
    _o.IdCardDefaultBgId = this.IdCardDefaultBgId;
    _o.WorldRaidGemEnterCost = this.WorldRaidGemEnterCost;
    _o.WorldRaidGemEnterAmout = this.WorldRaidGemEnterAmout;
    _o.FriendIdCardCommentMaxLength = this.FriendIdCardCommentMaxLength;
    _o.FormationPresetNumberOfEchelonTab = this.FormationPresetNumberOfEchelonTab;
    _o.FormationPresetNumberOfEchelon = this.FormationPresetNumberOfEchelon;
    _o.FormationPresetRecentNumberOfEchelon = this.FormationPresetRecentNumberOfEchelon;
    _o.FormationPresetEchelonTabTextLength = this.FormationPresetEchelonTabTextLength;
    _o.FormationPresetEchelonSlotTextLength = this.FormationPresetEchelonSlotTextLength;
    _o.CharProfileRowIntervalKr = this.CharProfileRowIntervalKr;
    _o.CharProfileRowIntervalJp = this.CharProfileRowIntervalJp;
    _o.CharProfilePopupRowIntervalKr = this.CharProfilePopupRowIntervalKr;
    _o.CharProfilePopupRowIntervalJp = this.CharProfilePopupRowIntervalJp;
    _o.BeforehandGachaCount = this.BeforehandGachaCount;
    _o.BeforehandGachaGroupId = this.BeforehandGachaGroupId;
    _o.RenewalDisplayOrderDay = this.RenewalDisplayOrderDay;
    _o.EmblemDefaultId = this.EmblemDefaultId;
    _o.BirthdayMailStartDate = this.BirthdayMailStartDate;
    _o.BirthdayMailRemainDate = this.BirthdayMailRemainDate;
    _o.BirthdayMailParcelType = this.BirthdayMailParcelType;
    _o.BirthdayMailParcelId = this.BirthdayMailParcelId;
    _o.BirthdayMailParcelAmount = this.BirthdayMailParcelAmount;
    _o.ClearDeckAverageDeckCount = this.ClearDeckAverageDeckCount;
    _o.ClearDeckWorldRaidSaveConditionCoefficient = this.ClearDeckWorldRaidSaveConditionCoefficient;
    _o.ClearDeckShowCount = this.ClearDeckShowCount;
    _o.CharacterMaxLevel = this.CharacterMaxLevel;
    _o.PotentialBonusStatMaxLevelMaxHP = this.PotentialBonusStatMaxLevelMaxHP;
    _o.PotentialBonusStatMaxLevelAttackPower = this.PotentialBonusStatMaxLevelAttackPower;
    _o.PotentialBonusStatMaxLevelHealPower = this.PotentialBonusStatMaxLevelHealPower;
    _o.PotentialOpenConditionCharacterLevel = this.PotentialOpenConditionCharacterLevel;
    _o.AssistStrangerMinLevel = this.AssistStrangerMinLevel;
    _o.AssistStrangerMaxLevel = this.AssistStrangerMaxLevel;
    _o.MaxBlockedUserCount = this.MaxBlockedUserCount;
  }
  public static Offset<FlatData.ConstCommonExcel> Pack(FlatBufferBuilder builder, ConstCommonExcelT _o) {
    if (_o == null) return default(Offset<FlatData.ConstCommonExcel>);
    var _CraftDuration = default(VectorOffset);
    if (_o.CraftDuration != null) {
      var __CraftDuration = _o.CraftDuration.ToArray();
      _CraftDuration = CreateCraftDurationVector(builder, __CraftDuration);
    }
    var _ShiftingCraftDuration = default(VectorOffset);
    if (_o.ShiftingCraftDuration != null) {
      var __ShiftingCraftDuration = _o.ShiftingCraftDuration.ToArray();
      _ShiftingCraftDuration = CreateShiftingCraftDurationVector(builder, __ShiftingCraftDuration);
    }
    var _EquipmentSlotOpenLevel = default(VectorOffset);
    if (_o.EquipmentSlotOpenLevel != null) {
      var __EquipmentSlotOpenLevel = _o.EquipmentSlotOpenLevel.ToArray();
      _EquipmentSlotOpenLevel = CreateEquipmentSlotOpenLevelVector(builder, __EquipmentSlotOpenLevel);
    }
    var _CraftBaseGoldRequired = default(VectorOffset);
    if (_o.CraftBaseGoldRequired != null) {
      var __CraftBaseGoldRequired = _o.CraftBaseGoldRequired.ToArray();
      _CraftBaseGoldRequired = CreateCraftBaseGoldRequiredVector(builder, __CraftBaseGoldRequired);
    }
    var _UILabelCharacterWrap = _o.UILabelCharacterWrap == null ? default(StringOffset) : builder.CreateString(_o.UILabelCharacterWrap);
    var _TimeAttackDungeonScenarioId = _o.TimeAttackDungeonScenarioId == null ? default(StringOffset) : builder.CreateString(_o.TimeAttackDungeonScenarioId);
    var _CommonFavorItemTags = default(VectorOffset);
    if (_o.CommonFavorItemTags != null) {
      var __CommonFavorItemTags = _o.CommonFavorItemTags.ToArray();
      _CommonFavorItemTags = CreateCommonFavorItemTagsVector(builder, __CommonFavorItemTags);
    }
    var _BirthdayMailStartDate = _o.BirthdayMailStartDate == null ? default(StringOffset) : builder.CreateString(_o.BirthdayMailStartDate);
    StartConstCommonExcel(builder);
    AddCampaignMainStageMaxRank(builder, _o.CampaignMainStageMaxRank);
    AddCampaignMainStageBestRecord(builder, _o.CampaignMainStageBestRecord);
    AddHardAdventurePlayCountRecoverDailyNumber(builder, _o.HardAdventurePlayCountRecoverDailyNumber);
    AddHardStageCount(builder, _o.HardStageCount);
    AddTacticRankClearTime(builder, _o.TacticRankClearTime);
    AddBaseTimeScale(builder, _o.BaseTimeScale);
    AddGachaPercentage(builder, _o.GachaPercentage);
    AddAcademyFavorZoneId(builder, _o.AcademyFavorZoneId);
    AddCafePresetSlotCount(builder, _o.CafePresetSlotCount);
    AddCafeMonologueIntervalMillisec(builder, _o.CafeMonologueIntervalMillisec);
    AddCafeMonologueDefaultDuration(builder, _o.CafeMonologueDefaultDuration);
    AddCafeBubbleIdleDurationMilliSec(builder, _o.CafeBubbleIdleDurationMilliSec);
    AddFindGiftTimeLimit(builder, _o.FindGiftTimeLimit);
    AddCafeAutoChargePeriodInMsc(builder, _o.CafeAutoChargePeriodInMsc);
    AddCafeProductionDecimalPosition(builder, _o.CafeProductionDecimalPosition);
    AddCafeSetGroupApplyCount(builder, _o.CafeSetGroupApplyCount);
    AddWeekDungeonFindGiftRewardLimitCount(builder, _o.WeekDungeonFindGiftRewardLimitCount);
    AddStageFailedCurrencyRefundRate(builder, _o.StageFailedCurrencyRefundRate);
    AddEnterDeposit(builder, _o.EnterDeposit);
    AddAccountMaxLevel(builder, _o.AccountMaxLevel);
    AddMainSquadExpBonus(builder, _o.MainSquadExpBonus);
    AddSupportSquadExpBonus(builder, _o.SupportSquadExpBonus);
    AddAccountExpRatio(builder, _o.AccountExpRatio);
    AddMissionToastLifeTime(builder, _o.MissionToastLifeTime);
    AddExpItemInsertLimit(builder, _o.ExpItemInsertLimit);
    AddExpItemInsertAccelTime(builder, _o.ExpItemInsertAccelTime);
    AddCharacterLvUpCoefficient(builder, _o.CharacterLvUpCoefficient);
    AddEquipmentLvUpCoefficient(builder, _o.EquipmentLvUpCoefficient);
    AddExpEquipInsertLimit(builder, _o.ExpEquipInsertLimit);
    AddEquipLvUpCoefficient(builder, _o.EquipLvUpCoefficient);
    AddNicknameLength(builder, _o.NicknameLength);
    AddCraftDuration(builder, _CraftDuration);
    AddCraftLimitTime(builder, _o.CraftLimitTime);
    AddShiftingCraftDuration(builder, _ShiftingCraftDuration);
    AddShiftingCraftTicketConsumeAmount(builder, _o.ShiftingCraftTicketConsumeAmount);
    AddShiftingCraftSlotMaxCapacity(builder, _o.ShiftingCraftSlotMaxCapacity);
    AddCraftTicketItemUniqueId(builder, _o.CraftTicketItemUniqueId);
    AddCraftTicketConsumeAmount(builder, _o.CraftTicketConsumeAmount);
    AddAcademyEnterCostType(builder, _o.AcademyEnterCostType);
    AddAcademyEnterCostId(builder, _o.AcademyEnterCostId);
    AddAcademyTicketCost(builder, _o.AcademyTicketCost);
    AddMassangerMessageExpireDay(builder, _o.MassangerMessageExpireDay);
    AddCraftLeafNodeGenerateLv1Count(builder, _o.CraftLeafNodeGenerateLv1Count);
    AddCraftLeafNodeGenerateLv2Count(builder, _o.CraftLeafNodeGenerateLv2Count);
    AddTutorialGachaShopId(builder, _o.TutorialGachaShopId);
    AddBeforehandGachaShopId(builder, _o.BeforehandGachaShopId);
    AddTutorialGachaGoodsId(builder, _o.TutorialGachaGoodsId);
    AddEquipmentSlotOpenLevel(builder, _EquipmentSlotOpenLevel);
    AddScenarioAutoDelayMillisec(builder, _o.ScenarioAutoDelayMillisec);
    AddJoinOrCreateClanCoolTimeFromHour(builder, _o.JoinOrCreateClanCoolTimeFromHour);
    AddClanMaxMember(builder, _o.ClanMaxMember);
    AddClanSearchResultCount(builder, _o.ClanSearchResultCount);
    AddClanMaxApplicant(builder, _o.ClanMaxApplicant);
    AddClanRejoinCoolTimeFromSecond(builder, _o.ClanRejoinCoolTimeFromSecond);
    AddClanWordBalloonMaxCharacter(builder, _o.ClanWordBalloonMaxCharacter);
    AddCallNameRenameCoolTimeFromHour(builder, _o.CallNameRenameCoolTimeFromHour);
    AddCallNameMinimumLength(builder, _o.CallNameMinimumLength);
    AddCallNameMaximumLength(builder, _o.CallNameMaximumLength);
    AddLobbyToScreenModeWaitTime(builder, _o.LobbyToScreenModeWaitTime);
    AddScreenshotToLobbyButtonHideDelay(builder, _o.ScreenshotToLobbyButtonHideDelay);
    AddPrologueScenarioID01(builder, _o.PrologueScenarioID01);
    AddPrologueScenarioID02(builder, _o.PrologueScenarioID02);
    AddTutorialHardStage11(builder, _o.TutorialHardStage11);
    AddTutorialSpeedButtonStage(builder, _o.TutorialSpeedButtonStage);
    AddTutorialCharacterDefaultCount(builder, _o.TutorialCharacterDefaultCount);
    AddTutorialShopCategoryType(builder, _o.TutorialShopCategoryType);
    AddAdventureStrategyPlayTimeLimitInSeconds(builder, _o.AdventureStrategyPlayTimeLimitInSeconds);
    AddWeekDungoenTacticPlayTimeLimitInSeconds(builder, _o.WeekDungoenTacticPlayTimeLimitInSeconds);
    AddRaidTacticPlayTimeLimitInSeconds(builder, _o.RaidTacticPlayTimeLimitInSeconds);
    AddRaidOpponentListAmount(builder, _o.RaidOpponentListAmount);
    AddCraftBaseGoldRequired(builder, _CraftBaseGoldRequired);
    AddPostExpiredDayAttendance(builder, _o.PostExpiredDayAttendance);
    AddPostExpiredDayInventoryOverflow(builder, _o.PostExpiredDayInventoryOverflow);
    AddPostExpiredDayGameManager(builder, _o.PostExpiredDayGameManager);
    AddUILabelCharacterWrap(builder, _UILabelCharacterWrap);
    AddRequestTimeOut(builder, _o.RequestTimeOut);
    AddMailStorageSoftCap(builder, _o.MailStorageSoftCap);
    AddMailStorageHardCap(builder, _o.MailStorageHardCap);
    AddClearDeckStorageSize(builder, _o.ClearDeckStorageSize);
    AddClearDeckNoStarViewCount(builder, _o.ClearDeckNoStarViewCount);
    AddClearDeck1StarViewCount(builder, _o.ClearDeck1StarViewCount);
    AddClearDeck2StarViewCount(builder, _o.ClearDeck2StarViewCount);
    AddClearDeck3StarViewCount(builder, _o.ClearDeck3StarViewCount);
    AddExSkillLevelMax(builder, _o.ExSkillLevelMax);
    AddPublicSkillLevelMax(builder, _o.PublicSkillLevelMax);
    AddPassiveSkillLevelMax(builder, _o.PassiveSkillLevelMax);
    AddExtraPassiveSkillLevelMax(builder, _o.ExtraPassiveSkillLevelMax);
    AddAccountCommentMaxLength(builder, _o.AccountCommentMaxLength);
    AddCafeSummonCoolTimeFromHour(builder, _o.CafeSummonCoolTimeFromHour);
    AddLimitedStageDailyClearCount(builder, _o.LimitedStageDailyClearCount);
    AddLimitedStageEntryTimeLimit(builder, _o.LimitedStageEntryTimeLimit);
    AddLimitedStageEntryTimeBuffer(builder, _o.LimitedStageEntryTimeBuffer);
    AddLimitedStagePointAmount(builder, _o.LimitedStagePointAmount);
    AddLimitedStagePointPerApMin(builder, _o.LimitedStagePointPerApMin);
    AddLimitedStagePointPerApMax(builder, _o.LimitedStagePointPerApMax);
    AddAccountLinkReward(builder, _o.AccountLinkReward);
    AddMonthlyProductCheckDays(builder, _o.MonthlyProductCheckDays);
    AddWeaponLvUpCoefficient(builder, _o.WeaponLvUpCoefficient);
    AddShowRaidMyListCount(builder, _o.ShowRaidMyListCount);
    AddMaxLevelExpMasterCoinRatio(builder, _o.MaxLevelExpMasterCoinRatio);
    AddRaidEnterCostType(builder, _o.RaidEnterCostType);
    AddRaidEnterCostId(builder, _o.RaidEnterCostId);
    AddRaidTicketCost(builder, _o.RaidTicketCost);
    AddTimeAttackDungeonScenarioId(builder, _TimeAttackDungeonScenarioId);
    AddTimeAttackDungoenPlayCountPerTicket(builder, _o.TimeAttackDungoenPlayCountPerTicket);
    AddTimeAttackDungeonEnterCostType(builder, _o.TimeAttackDungeonEnterCostType);
    AddTimeAttackDungeonEnterCostId(builder, _o.TimeAttackDungeonEnterCostId);
    AddTimeAttackDungeonEnterCost(builder, _o.TimeAttackDungeonEnterCost);
    AddClanLeaderTransferLastLoginLimit(builder, _o.ClanLeaderTransferLastLoginLimit);
    AddMonthlyProductRepurchasePopupLimit(builder, _o.MonthlyProductRepurchasePopupLimit);
    AddCommonFavorItemTags(builder, _CommonFavorItemTags);
    AddMaxApMasterCoinPerWeek(builder, _o.MaxApMasterCoinPerWeek);
    AddCraftOpenExpTier1(builder, _o.CraftOpenExpTier1);
    AddCraftOpenExpTier2(builder, _o.CraftOpenExpTier2);
    AddCraftOpenExpTier3(builder, _o.CraftOpenExpTier3);
    AddCharacterEquipmentGearSlot(builder, _o.CharacterEquipmentGearSlot);
    AddBirthDayDDay(builder, _o.BirthDayDDay);
    AddRecommendedFriendsLvDifferenceLimit(builder, _o.RecommendedFriendsLvDifferenceLimit);
    AddDDosDetectCount(builder, _o.DDosDetectCount);
    AddDDosCheckIntervalInSeconds(builder, _o.DDosCheckIntervalInSeconds);
    AddMaxFriendsCount(builder, _o.MaxFriendsCount);
    AddMaxFriendsRequest(builder, _o.MaxFriendsRequest);
    AddFriendsSearchRequestCount(builder, _o.FriendsSearchRequestCount);
    AddFriendsMaxApplicant(builder, _o.FriendsMaxApplicant);
    AddIdCardDefaultCharacterId(builder, _o.IdCardDefaultCharacterId);
    AddIdCardDefaultBgId(builder, _o.IdCardDefaultBgId);
    AddWorldRaidGemEnterCost(builder, _o.WorldRaidGemEnterCost);
    AddWorldRaidGemEnterAmout(builder, _o.WorldRaidGemEnterAmout);
    AddFriendIdCardCommentMaxLength(builder, _o.FriendIdCardCommentMaxLength);
    AddFormationPresetNumberOfEchelonTab(builder, _o.FormationPresetNumberOfEchelonTab);
    AddFormationPresetNumberOfEchelon(builder, _o.FormationPresetNumberOfEchelon);
    AddFormationPresetRecentNumberOfEchelon(builder, _o.FormationPresetRecentNumberOfEchelon);
    AddFormationPresetEchelonTabTextLength(builder, _o.FormationPresetEchelonTabTextLength);
    AddFormationPresetEchelonSlotTextLength(builder, _o.FormationPresetEchelonSlotTextLength);
    AddCharProfileRowIntervalKr(builder, _o.CharProfileRowIntervalKr);
    AddCharProfileRowIntervalJp(builder, _o.CharProfileRowIntervalJp);
    AddCharProfilePopupRowIntervalKr(builder, _o.CharProfilePopupRowIntervalKr);
    AddCharProfilePopupRowIntervalJp(builder, _o.CharProfilePopupRowIntervalJp);
    AddBeforehandGachaCount(builder, _o.BeforehandGachaCount);
    AddBeforehandGachaGroupId(builder, _o.BeforehandGachaGroupId);
    AddRenewalDisplayOrderDay(builder, _o.RenewalDisplayOrderDay);
    AddEmblemDefaultId(builder, _o.EmblemDefaultId);
    AddBirthdayMailStartDate(builder, _BirthdayMailStartDate);
    AddBirthdayMailRemainDate(builder, _o.BirthdayMailRemainDate);
    AddBirthdayMailParcelType(builder, _o.BirthdayMailParcelType);
    AddBirthdayMailParcelId(builder, _o.BirthdayMailParcelId);
    AddBirthdayMailParcelAmount(builder, _o.BirthdayMailParcelAmount);
    AddClearDeckAverageDeckCount(builder, _o.ClearDeckAverageDeckCount);
    AddClearDeckWorldRaidSaveConditionCoefficient(builder, _o.ClearDeckWorldRaidSaveConditionCoefficient);
    AddClearDeckShowCount(builder, _o.ClearDeckShowCount);
    AddCharacterMaxLevel(builder, _o.CharacterMaxLevel);
    AddPotentialBonusStatMaxLevelMaxHP(builder, _o.PotentialBonusStatMaxLevelMaxHP);
    AddPotentialBonusStatMaxLevelAttackPower(builder, _o.PotentialBonusStatMaxLevelAttackPower);
    AddPotentialBonusStatMaxLevelHealPower(builder, _o.PotentialBonusStatMaxLevelHealPower);
    AddPotentialOpenConditionCharacterLevel(builder, _o.PotentialOpenConditionCharacterLevel);
    AddAssistStrangerMinLevel(builder, _o.AssistStrangerMinLevel);
    AddAssistStrangerMaxLevel(builder, _o.AssistStrangerMaxLevel);
    AddMaxBlockedUserCount(builder, _o.MaxBlockedUserCount);
    return EndConstCommonExcel(builder);
  }
}

public class ConstCommonExcelT
{
  [Newtonsoft.Json.JsonProperty("CampaignMainStageMaxRank")]
  public int CampaignMainStageMaxRank { get; set; }
  [Newtonsoft.Json.JsonProperty("CampaignMainStageBestRecord")]
  public int CampaignMainStageBestRecord { get; set; }
  [Newtonsoft.Json.JsonProperty("HardAdventurePlayCountRecoverDailyNumber")]
  public int HardAdventurePlayCountRecoverDailyNumber { get; set; }
  [Newtonsoft.Json.JsonProperty("HardStageCount")]
  public int HardStageCount { get; set; }
  [Newtonsoft.Json.JsonProperty("TacticRankClearTime")]
  public int TacticRankClearTime { get; set; }
  [Newtonsoft.Json.JsonProperty("BaseTimeScale")]
  public long BaseTimeScale { get; set; }
  [Newtonsoft.Json.JsonProperty("GachaPercentage")]
  public int GachaPercentage { get; set; }
  [Newtonsoft.Json.JsonProperty("AcademyFavorZoneId")]
  public long AcademyFavorZoneId { get; set; }
  [Newtonsoft.Json.JsonProperty("CafePresetSlotCount")]
  public int CafePresetSlotCount { get; set; }
  [Newtonsoft.Json.JsonProperty("CafeMonologueIntervalMillisec")]
  public long CafeMonologueIntervalMillisec { get; set; }
  [Newtonsoft.Json.JsonProperty("CafeMonologueDefaultDuration")]
  public long CafeMonologueDefaultDuration { get; set; }
  [Newtonsoft.Json.JsonProperty("CafeBubbleIdleDurationMilliSec")]
  public long CafeBubbleIdleDurationMilliSec { get; set; }
  [Newtonsoft.Json.JsonProperty("FindGiftTimeLimit")]
  public int FindGiftTimeLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("CafeAutoChargePeriodInMsc")]
  public int CafeAutoChargePeriodInMsc { get; set; }
  [Newtonsoft.Json.JsonProperty("CafeProductionDecimalPosition")]
  public int CafeProductionDecimalPosition { get; set; }
  [Newtonsoft.Json.JsonProperty("CafeSetGroupApplyCount")]
  public int CafeSetGroupApplyCount { get; set; }
  [Newtonsoft.Json.JsonProperty("WeekDungeonFindGiftRewardLimitCount")]
  public int WeekDungeonFindGiftRewardLimitCount { get; set; }
  [Newtonsoft.Json.JsonProperty("StageFailedCurrencyRefundRate")]
  public int StageFailedCurrencyRefundRate { get; set; }
  [Newtonsoft.Json.JsonProperty("EnterDeposit")]
  public int EnterDeposit { get; set; }
  [Newtonsoft.Json.JsonProperty("AccountMaxLevel")]
  public int AccountMaxLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("MainSquadExpBonus")]
  public int MainSquadExpBonus { get; set; }
  [Newtonsoft.Json.JsonProperty("SupportSquadExpBonus")]
  public int SupportSquadExpBonus { get; set; }
  [Newtonsoft.Json.JsonProperty("AccountExpRatio")]
  public int AccountExpRatio { get; set; }
  [Newtonsoft.Json.JsonProperty("MissionToastLifeTime")]
  public int MissionToastLifeTime { get; set; }
  [Newtonsoft.Json.JsonProperty("ExpItemInsertLimit")]
  public int ExpItemInsertLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("ExpItemInsertAccelTime")]
  public int ExpItemInsertAccelTime { get; set; }
  [Newtonsoft.Json.JsonProperty("CharacterLvUpCoefficient")]
  public int CharacterLvUpCoefficient { get; set; }
  [Newtonsoft.Json.JsonProperty("EquipmentLvUpCoefficient")]
  public int EquipmentLvUpCoefficient { get; set; }
  [Newtonsoft.Json.JsonProperty("ExpEquipInsertLimit")]
  public int ExpEquipInsertLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("EquipLvUpCoefficient")]
  public int EquipLvUpCoefficient { get; set; }
  [Newtonsoft.Json.JsonProperty("NicknameLength")]
  public int NicknameLength { get; set; }
  [Newtonsoft.Json.JsonProperty("CraftDuration")]
  public List<int> CraftDuration { get; set; }
  [Newtonsoft.Json.JsonProperty("CraftLimitTime")]
  public int CraftLimitTime { get; set; }
  [Newtonsoft.Json.JsonProperty("ShiftingCraftDuration")]
  public List<int> ShiftingCraftDuration { get; set; }
  [Newtonsoft.Json.JsonProperty("ShiftingCraftTicketConsumeAmount")]
  public int ShiftingCraftTicketConsumeAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("ShiftingCraftSlotMaxCapacity")]
  public int ShiftingCraftSlotMaxCapacity { get; set; }
  [Newtonsoft.Json.JsonProperty("CraftTicketItemUniqueId")]
  public int CraftTicketItemUniqueId { get; set; }
  [Newtonsoft.Json.JsonProperty("CraftTicketConsumeAmount")]
  public int CraftTicketConsumeAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("AcademyEnterCostType")]
  public FlatData.ParcelType AcademyEnterCostType { get; set; }
  [Newtonsoft.Json.JsonProperty("AcademyEnterCostId")]
  public long AcademyEnterCostId { get; set; }
  [Newtonsoft.Json.JsonProperty("AcademyTicketCost")]
  public int AcademyTicketCost { get; set; }
  [Newtonsoft.Json.JsonProperty("MassangerMessageExpireDay")]
  public int MassangerMessageExpireDay { get; set; }
  [Newtonsoft.Json.JsonProperty("CraftLeafNodeGenerateLv1Count")]
  public int CraftLeafNodeGenerateLv1Count { get; set; }
  [Newtonsoft.Json.JsonProperty("CraftLeafNodeGenerateLv2Count")]
  public int CraftLeafNodeGenerateLv2Count { get; set; }
  [Newtonsoft.Json.JsonProperty("TutorialGachaShopId")]
  public int TutorialGachaShopId { get; set; }
  [Newtonsoft.Json.JsonProperty("BeforehandGachaShopId")]
  public int BeforehandGachaShopId { get; set; }
  [Newtonsoft.Json.JsonProperty("TutorialGachaGoodsId")]
  public int TutorialGachaGoodsId { get; set; }
  [Newtonsoft.Json.JsonProperty("EquipmentSlotOpenLevel")]
  public List<int> EquipmentSlotOpenLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("ScenarioAutoDelayMillisec")]
  public float ScenarioAutoDelayMillisec { get; set; }
  [Newtonsoft.Json.JsonProperty("JoinOrCreateClanCoolTimeFromHour")]
  public long JoinOrCreateClanCoolTimeFromHour { get; set; }
  [Newtonsoft.Json.JsonProperty("ClanMaxMember")]
  public long ClanMaxMember { get; set; }
  [Newtonsoft.Json.JsonProperty("ClanSearchResultCount")]
  public long ClanSearchResultCount { get; set; }
  [Newtonsoft.Json.JsonProperty("ClanMaxApplicant")]
  public long ClanMaxApplicant { get; set; }
  [Newtonsoft.Json.JsonProperty("ClanRejoinCoolTimeFromSecond")]
  public long ClanRejoinCoolTimeFromSecond { get; set; }
  [Newtonsoft.Json.JsonProperty("ClanWordBalloonMaxCharacter")]
  public int ClanWordBalloonMaxCharacter { get; set; }
  [Newtonsoft.Json.JsonProperty("CallNameRenameCoolTimeFromHour")]
  public long CallNameRenameCoolTimeFromHour { get; set; }
  [Newtonsoft.Json.JsonProperty("CallNameMinimumLength")]
  public long CallNameMinimumLength { get; set; }
  [Newtonsoft.Json.JsonProperty("CallNameMaximumLength")]
  public long CallNameMaximumLength { get; set; }
  [Newtonsoft.Json.JsonProperty("LobbyToScreenModeWaitTime")]
  public long LobbyToScreenModeWaitTime { get; set; }
  [Newtonsoft.Json.JsonProperty("ScreenshotToLobbyButtonHideDelay")]
  public long ScreenshotToLobbyButtonHideDelay { get; set; }
  [Newtonsoft.Json.JsonProperty("PrologueScenarioID01")]
  public long PrologueScenarioID01 { get; set; }
  [Newtonsoft.Json.JsonProperty("PrologueScenarioID02")]
  public long PrologueScenarioID02 { get; set; }
  [Newtonsoft.Json.JsonProperty("TutorialHardStage11")]
  public long TutorialHardStage11 { get; set; }
  [Newtonsoft.Json.JsonProperty("TutorialSpeedButtonStage")]
  public long TutorialSpeedButtonStage { get; set; }
  [Newtonsoft.Json.JsonProperty("TutorialCharacterDefaultCount")]
  public long TutorialCharacterDefaultCount { get; set; }
  [Newtonsoft.Json.JsonProperty("TutorialShopCategoryType")]
  public FlatData.ShopCategoryType TutorialShopCategoryType { get; set; }
  [Newtonsoft.Json.JsonProperty("AdventureStrategyPlayTimeLimitInSeconds")]
  public long AdventureStrategyPlayTimeLimitInSeconds { get; set; }
  [Newtonsoft.Json.JsonProperty("WeekDungoenTacticPlayTimeLimitInSeconds")]
  public long WeekDungoenTacticPlayTimeLimitInSeconds { get; set; }
  [Newtonsoft.Json.JsonProperty("RaidTacticPlayTimeLimitInSeconds")]
  public long RaidTacticPlayTimeLimitInSeconds { get; set; }
  [Newtonsoft.Json.JsonProperty("RaidOpponentListAmount")]
  public long RaidOpponentListAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("CraftBaseGoldRequired")]
  public List<long> CraftBaseGoldRequired { get; set; }
  [Newtonsoft.Json.JsonProperty("PostExpiredDayAttendance")]
  public int PostExpiredDayAttendance { get; set; }
  [Newtonsoft.Json.JsonProperty("PostExpiredDayInventoryOverflow")]
  public int PostExpiredDayInventoryOverflow { get; set; }
  [Newtonsoft.Json.JsonProperty("PostExpiredDayGameManager")]
  public int PostExpiredDayGameManager { get; set; }
  [Newtonsoft.Json.JsonProperty("UILabelCharacterWrap")]
  public string UILabelCharacterWrap { get; set; }
  [Newtonsoft.Json.JsonProperty("RequestTimeOut")]
  public float RequestTimeOut { get; set; }
  [Newtonsoft.Json.JsonProperty("MailStorageSoftCap")]
  public int MailStorageSoftCap { get; set; }
  [Newtonsoft.Json.JsonProperty("MailStorageHardCap")]
  public int MailStorageHardCap { get; set; }
  [Newtonsoft.Json.JsonProperty("ClearDeckStorageSize")]
  public int ClearDeckStorageSize { get; set; }
  [Newtonsoft.Json.JsonProperty("ClearDeckNoStarViewCount")]
  public int ClearDeckNoStarViewCount { get; set; }
  [Newtonsoft.Json.JsonProperty("ClearDeck1StarViewCount")]
  public int ClearDeck1StarViewCount { get; set; }
  [Newtonsoft.Json.JsonProperty("ClearDeck2StarViewCount")]
  public int ClearDeck2StarViewCount { get; set; }
  [Newtonsoft.Json.JsonProperty("ClearDeck3StarViewCount")]
  public int ClearDeck3StarViewCount { get; set; }
  [Newtonsoft.Json.JsonProperty("ExSkillLevelMax")]
  public int ExSkillLevelMax { get; set; }
  [Newtonsoft.Json.JsonProperty("PublicSkillLevelMax")]
  public int PublicSkillLevelMax { get; set; }
  [Newtonsoft.Json.JsonProperty("PassiveSkillLevelMax")]
  public int PassiveSkillLevelMax { get; set; }
  [Newtonsoft.Json.JsonProperty("ExtraPassiveSkillLevelMax")]
  public int ExtraPassiveSkillLevelMax { get; set; }
  [Newtonsoft.Json.JsonProperty("AccountCommentMaxLength")]
  public int AccountCommentMaxLength { get; set; }
  [Newtonsoft.Json.JsonProperty("CafeSummonCoolTimeFromHour")]
  public int CafeSummonCoolTimeFromHour { get; set; }
  [Newtonsoft.Json.JsonProperty("LimitedStageDailyClearCount")]
  public long LimitedStageDailyClearCount { get; set; }
  [Newtonsoft.Json.JsonProperty("LimitedStageEntryTimeLimit")]
  public long LimitedStageEntryTimeLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("LimitedStageEntryTimeBuffer")]
  public long LimitedStageEntryTimeBuffer { get; set; }
  [Newtonsoft.Json.JsonProperty("LimitedStagePointAmount")]
  public long LimitedStagePointAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("LimitedStagePointPerApMin")]
  public long LimitedStagePointPerApMin { get; set; }
  [Newtonsoft.Json.JsonProperty("LimitedStagePointPerApMax")]
  public long LimitedStagePointPerApMax { get; set; }
  [Newtonsoft.Json.JsonProperty("AccountLinkReward")]
  public int AccountLinkReward { get; set; }
  [Newtonsoft.Json.JsonProperty("MonthlyProductCheckDays")]
  public int MonthlyProductCheckDays { get; set; }
  [Newtonsoft.Json.JsonProperty("WeaponLvUpCoefficient")]
  public int WeaponLvUpCoefficient { get; set; }
  [Newtonsoft.Json.JsonProperty("ShowRaidMyListCount")]
  public int ShowRaidMyListCount { get; set; }
  [Newtonsoft.Json.JsonProperty("MaxLevelExpMasterCoinRatio")]
  public int MaxLevelExpMasterCoinRatio { get; set; }
  [Newtonsoft.Json.JsonProperty("RaidEnterCostType")]
  public FlatData.ParcelType RaidEnterCostType { get; set; }
  [Newtonsoft.Json.JsonProperty("RaidEnterCostId")]
  public long RaidEnterCostId { get; set; }
  [Newtonsoft.Json.JsonProperty("RaidTicketCost")]
  public long RaidTicketCost { get; set; }
  [Newtonsoft.Json.JsonProperty("TimeAttackDungeonScenarioId")]
  public string TimeAttackDungeonScenarioId { get; set; }
  [Newtonsoft.Json.JsonProperty("TimeAttackDungoenPlayCountPerTicket")]
  public int TimeAttackDungoenPlayCountPerTicket { get; set; }
  [Newtonsoft.Json.JsonProperty("TimeAttackDungeonEnterCostType")]
  public FlatData.ParcelType TimeAttackDungeonEnterCostType { get; set; }
  [Newtonsoft.Json.JsonProperty("TimeAttackDungeonEnterCostId")]
  public long TimeAttackDungeonEnterCostId { get; set; }
  [Newtonsoft.Json.JsonProperty("TimeAttackDungeonEnterCost")]
  public long TimeAttackDungeonEnterCost { get; set; }
  [Newtonsoft.Json.JsonProperty("ClanLeaderTransferLastLoginLimit")]
  public long ClanLeaderTransferLastLoginLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("MonthlyProductRepurchasePopupLimit")]
  public int MonthlyProductRepurchasePopupLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("CommonFavorItemTags")]
  public List<FlatData.Tag> CommonFavorItemTags { get; set; }
  [Newtonsoft.Json.JsonProperty("MaxApMasterCoinPerWeek")]
  public long MaxApMasterCoinPerWeek { get; set; }
  [Newtonsoft.Json.JsonProperty("CraftOpenExpTier1")]
  public long CraftOpenExpTier1 { get; set; }
  [Newtonsoft.Json.JsonProperty("CraftOpenExpTier2")]
  public long CraftOpenExpTier2 { get; set; }
  [Newtonsoft.Json.JsonProperty("CraftOpenExpTier3")]
  public long CraftOpenExpTier3 { get; set; }
  [Newtonsoft.Json.JsonProperty("CharacterEquipmentGearSlot")]
  public long CharacterEquipmentGearSlot { get; set; }
  [Newtonsoft.Json.JsonProperty("BirthDayDDay")]
  public int BirthDayDDay { get; set; }
  [Newtonsoft.Json.JsonProperty("RecommendedFriendsLvDifferenceLimit")]
  public int RecommendedFriendsLvDifferenceLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("DDosDetectCount")]
  public int DDosDetectCount { get; set; }
  [Newtonsoft.Json.JsonProperty("DDosCheckIntervalInSeconds")]
  public int DDosCheckIntervalInSeconds { get; set; }
  [Newtonsoft.Json.JsonProperty("MaxFriendsCount")]
  public int MaxFriendsCount { get; set; }
  [Newtonsoft.Json.JsonProperty("MaxFriendsRequest")]
  public int MaxFriendsRequest { get; set; }
  [Newtonsoft.Json.JsonProperty("FriendsSearchRequestCount")]
  public int FriendsSearchRequestCount { get; set; }
  [Newtonsoft.Json.JsonProperty("FriendsMaxApplicant")]
  public int FriendsMaxApplicant { get; set; }
  [Newtonsoft.Json.JsonProperty("IdCardDefaultCharacterId")]
  public long IdCardDefaultCharacterId { get; set; }
  [Newtonsoft.Json.JsonProperty("IdCardDefaultBgId")]
  public long IdCardDefaultBgId { get; set; }
  [Newtonsoft.Json.JsonProperty("WorldRaidGemEnterCost")]
  public long WorldRaidGemEnterCost { get; set; }
  [Newtonsoft.Json.JsonProperty("WorldRaidGemEnterAmout")]
  public long WorldRaidGemEnterAmout { get; set; }
  [Newtonsoft.Json.JsonProperty("FriendIdCardCommentMaxLength")]
  public long FriendIdCardCommentMaxLength { get; set; }
  [Newtonsoft.Json.JsonProperty("FormationPresetNumberOfEchelonTab")]
  public int FormationPresetNumberOfEchelonTab { get; set; }
  [Newtonsoft.Json.JsonProperty("FormationPresetNumberOfEchelon")]
  public int FormationPresetNumberOfEchelon { get; set; }
  [Newtonsoft.Json.JsonProperty("FormationPresetRecentNumberOfEchelon")]
  public int FormationPresetRecentNumberOfEchelon { get; set; }
  [Newtonsoft.Json.JsonProperty("FormationPresetEchelonTabTextLength")]
  public int FormationPresetEchelonTabTextLength { get; set; }
  [Newtonsoft.Json.JsonProperty("FormationPresetEchelonSlotTextLength")]
  public int FormationPresetEchelonSlotTextLength { get; set; }
  [Newtonsoft.Json.JsonProperty("CharProfileRowIntervalKr")]
  public int CharProfileRowIntervalKr { get; set; }
  [Newtonsoft.Json.JsonProperty("CharProfileRowIntervalJp")]
  public int CharProfileRowIntervalJp { get; set; }
  [Newtonsoft.Json.JsonProperty("CharProfilePopupRowIntervalKr")]
  public int CharProfilePopupRowIntervalKr { get; set; }
  [Newtonsoft.Json.JsonProperty("CharProfilePopupRowIntervalJp")]
  public int CharProfilePopupRowIntervalJp { get; set; }
  [Newtonsoft.Json.JsonProperty("BeforehandGachaCount")]
  public int BeforehandGachaCount { get; set; }
  [Newtonsoft.Json.JsonProperty("BeforehandGachaGroupId")]
  public int BeforehandGachaGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("RenewalDisplayOrderDay")]
  public int RenewalDisplayOrderDay { get; set; }
  [Newtonsoft.Json.JsonProperty("EmblemDefaultId")]
  public long EmblemDefaultId { get; set; }
  [Newtonsoft.Json.JsonProperty("BirthdayMailStartDate")]
  public string BirthdayMailStartDate { get; set; }
  [Newtonsoft.Json.JsonProperty("BirthdayMailRemainDate")]
  public int BirthdayMailRemainDate { get; set; }
  [Newtonsoft.Json.JsonProperty("BirthdayMailParcelType")]
  public FlatData.ParcelType BirthdayMailParcelType { get; set; }
  [Newtonsoft.Json.JsonProperty("BirthdayMailParcelId")]
  public long BirthdayMailParcelId { get; set; }
  [Newtonsoft.Json.JsonProperty("BirthdayMailParcelAmount")]
  public int BirthdayMailParcelAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("ClearDeckAverageDeckCount")]
  public int ClearDeckAverageDeckCount { get; set; }
  [Newtonsoft.Json.JsonProperty("ClearDeckWorldRaidSaveConditionCoefficient")]
  public int ClearDeckWorldRaidSaveConditionCoefficient { get; set; }
  [Newtonsoft.Json.JsonProperty("ClearDeckShowCount")]
  public int ClearDeckShowCount { get; set; }
  [Newtonsoft.Json.JsonProperty("CharacterMaxLevel")]
  public int CharacterMaxLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("PotentialBonusStatMaxLevelMaxHP")]
  public int PotentialBonusStatMaxLevelMaxHP { get; set; }
  [Newtonsoft.Json.JsonProperty("PotentialBonusStatMaxLevelAttackPower")]
  public int PotentialBonusStatMaxLevelAttackPower { get; set; }
  [Newtonsoft.Json.JsonProperty("PotentialBonusStatMaxLevelHealPower")]
  public int PotentialBonusStatMaxLevelHealPower { get; set; }
  [Newtonsoft.Json.JsonProperty("PotentialOpenConditionCharacterLevel")]
  public int PotentialOpenConditionCharacterLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("AssistStrangerMinLevel")]
  public int AssistStrangerMinLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("AssistStrangerMaxLevel")]
  public int AssistStrangerMaxLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("MaxBlockedUserCount")]
  public int MaxBlockedUserCount { get; set; }

  public ConstCommonExcelT() {
    this.CampaignMainStageMaxRank = 0;
    this.CampaignMainStageBestRecord = 0;
    this.HardAdventurePlayCountRecoverDailyNumber = 0;
    this.HardStageCount = 0;
    this.TacticRankClearTime = 0;
    this.BaseTimeScale = 0;
    this.GachaPercentage = 0;
    this.AcademyFavorZoneId = 0;
    this.CafePresetSlotCount = 0;
    this.CafeMonologueIntervalMillisec = 0;
    this.CafeMonologueDefaultDuration = 0;
    this.CafeBubbleIdleDurationMilliSec = 0;
    this.FindGiftTimeLimit = 0;
    this.CafeAutoChargePeriodInMsc = 0;
    this.CafeProductionDecimalPosition = 0;
    this.CafeSetGroupApplyCount = 0;
    this.WeekDungeonFindGiftRewardLimitCount = 0;
    this.StageFailedCurrencyRefundRate = 0;
    this.EnterDeposit = 0;
    this.AccountMaxLevel = 0;
    this.MainSquadExpBonus = 0;
    this.SupportSquadExpBonus = 0;
    this.AccountExpRatio = 0;
    this.MissionToastLifeTime = 0;
    this.ExpItemInsertLimit = 0;
    this.ExpItemInsertAccelTime = 0;
    this.CharacterLvUpCoefficient = 0;
    this.EquipmentLvUpCoefficient = 0;
    this.ExpEquipInsertLimit = 0;
    this.EquipLvUpCoefficient = 0;
    this.NicknameLength = 0;
    this.CraftDuration = null;
    this.CraftLimitTime = 0;
    this.ShiftingCraftDuration = null;
    this.ShiftingCraftTicketConsumeAmount = 0;
    this.ShiftingCraftSlotMaxCapacity = 0;
    this.CraftTicketItemUniqueId = 0;
    this.CraftTicketConsumeAmount = 0;
    this.AcademyEnterCostType = FlatData.ParcelType.None;
    this.AcademyEnterCostId = 0;
    this.AcademyTicketCost = 0;
    this.MassangerMessageExpireDay = 0;
    this.CraftLeafNodeGenerateLv1Count = 0;
    this.CraftLeafNodeGenerateLv2Count = 0;
    this.TutorialGachaShopId = 0;
    this.BeforehandGachaShopId = 0;
    this.TutorialGachaGoodsId = 0;
    this.EquipmentSlotOpenLevel = null;
    this.ScenarioAutoDelayMillisec = 0.0f;
    this.JoinOrCreateClanCoolTimeFromHour = 0;
    this.ClanMaxMember = 0;
    this.ClanSearchResultCount = 0;
    this.ClanMaxApplicant = 0;
    this.ClanRejoinCoolTimeFromSecond = 0;
    this.ClanWordBalloonMaxCharacter = 0;
    this.CallNameRenameCoolTimeFromHour = 0;
    this.CallNameMinimumLength = 0;
    this.CallNameMaximumLength = 0;
    this.LobbyToScreenModeWaitTime = 0;
    this.ScreenshotToLobbyButtonHideDelay = 0;
    this.PrologueScenarioID01 = 0;
    this.PrologueScenarioID02 = 0;
    this.TutorialHardStage11 = 0;
    this.TutorialSpeedButtonStage = 0;
    this.TutorialCharacterDefaultCount = 0;
    this.TutorialShopCategoryType = FlatData.ShopCategoryType.General;
    this.AdventureStrategyPlayTimeLimitInSeconds = 0;
    this.WeekDungoenTacticPlayTimeLimitInSeconds = 0;
    this.RaidTacticPlayTimeLimitInSeconds = 0;
    this.RaidOpponentListAmount = 0;
    this.CraftBaseGoldRequired = null;
    this.PostExpiredDayAttendance = 0;
    this.PostExpiredDayInventoryOverflow = 0;
    this.PostExpiredDayGameManager = 0;
    this.UILabelCharacterWrap = null;
    this.RequestTimeOut = 0.0f;
    this.MailStorageSoftCap = 0;
    this.MailStorageHardCap = 0;
    this.ClearDeckStorageSize = 0;
    this.ClearDeckNoStarViewCount = 0;
    this.ClearDeck1StarViewCount = 0;
    this.ClearDeck2StarViewCount = 0;
    this.ClearDeck3StarViewCount = 0;
    this.ExSkillLevelMax = 0;
    this.PublicSkillLevelMax = 0;
    this.PassiveSkillLevelMax = 0;
    this.ExtraPassiveSkillLevelMax = 0;
    this.AccountCommentMaxLength = 0;
    this.CafeSummonCoolTimeFromHour = 0;
    this.LimitedStageDailyClearCount = 0;
    this.LimitedStageEntryTimeLimit = 0;
    this.LimitedStageEntryTimeBuffer = 0;
    this.LimitedStagePointAmount = 0;
    this.LimitedStagePointPerApMin = 0;
    this.LimitedStagePointPerApMax = 0;
    this.AccountLinkReward = 0;
    this.MonthlyProductCheckDays = 0;
    this.WeaponLvUpCoefficient = 0;
    this.ShowRaidMyListCount = 0;
    this.MaxLevelExpMasterCoinRatio = 0;
    this.RaidEnterCostType = FlatData.ParcelType.None;
    this.RaidEnterCostId = 0;
    this.RaidTicketCost = 0;
    this.TimeAttackDungeonScenarioId = null;
    this.TimeAttackDungoenPlayCountPerTicket = 0;
    this.TimeAttackDungeonEnterCostType = FlatData.ParcelType.None;
    this.TimeAttackDungeonEnterCostId = 0;
    this.TimeAttackDungeonEnterCost = 0;
    this.ClanLeaderTransferLastLoginLimit = 0;
    this.MonthlyProductRepurchasePopupLimit = 0;
    this.CommonFavorItemTags = null;
    this.MaxApMasterCoinPerWeek = 0;
    this.CraftOpenExpTier1 = 0;
    this.CraftOpenExpTier2 = 0;
    this.CraftOpenExpTier3 = 0;
    this.CharacterEquipmentGearSlot = 0;
    this.BirthDayDDay = 0;
    this.RecommendedFriendsLvDifferenceLimit = 0;
    this.DDosDetectCount = 0;
    this.DDosCheckIntervalInSeconds = 0;
    this.MaxFriendsCount = 0;
    this.MaxFriendsRequest = 0;
    this.FriendsSearchRequestCount = 0;
    this.FriendsMaxApplicant = 0;
    this.IdCardDefaultCharacterId = 0;
    this.IdCardDefaultBgId = 0;
    this.WorldRaidGemEnterCost = 0;
    this.WorldRaidGemEnterAmout = 0;
    this.FriendIdCardCommentMaxLength = 0;
    this.FormationPresetNumberOfEchelonTab = 0;
    this.FormationPresetNumberOfEchelon = 0;
    this.FormationPresetRecentNumberOfEchelon = 0;
    this.FormationPresetEchelonTabTextLength = 0;
    this.FormationPresetEchelonSlotTextLength = 0;
    this.CharProfileRowIntervalKr = 0;
    this.CharProfileRowIntervalJp = 0;
    this.CharProfilePopupRowIntervalKr = 0;
    this.CharProfilePopupRowIntervalJp = 0;
    this.BeforehandGachaCount = 0;
    this.BeforehandGachaGroupId = 0;
    this.RenewalDisplayOrderDay = 0;
    this.EmblemDefaultId = 0;
    this.BirthdayMailStartDate = null;
    this.BirthdayMailRemainDate = 0;
    this.BirthdayMailParcelType = FlatData.ParcelType.None;
    this.BirthdayMailParcelId = 0;
    this.BirthdayMailParcelAmount = 0;
    this.ClearDeckAverageDeckCount = 0;
    this.ClearDeckWorldRaidSaveConditionCoefficient = 0;
    this.ClearDeckShowCount = 0;
    this.CharacterMaxLevel = 0;
    this.PotentialBonusStatMaxLevelMaxHP = 0;
    this.PotentialBonusStatMaxLevelAttackPower = 0;
    this.PotentialBonusStatMaxLevelHealPower = 0;
    this.PotentialOpenConditionCharacterLevel = 0;
    this.AssistStrangerMinLevel = 0;
    this.AssistStrangerMaxLevel = 0;
    this.MaxBlockedUserCount = 0;
  }
}


static public class ConstCommonExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CampaignMainStageMaxRank*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*CampaignMainStageBestRecord*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*HardAdventurePlayCountRecoverDailyNumber*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*HardStageCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*TacticRankClearTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*BaseTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*GachaPercentage*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*AcademyFavorZoneId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*CafePresetSlotCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*CafeMonologueIntervalMillisec*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*CafeMonologueDefaultDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*CafeBubbleIdleDurationMilliSec*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*FindGiftTimeLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*CafeAutoChargePeriodInMsc*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*CafeProductionDecimalPosition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*CafeSetGroupApplyCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*WeekDungeonFindGiftRewardLimitCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*StageFailedCurrencyRefundRate*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*EnterDeposit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*AccountMaxLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*MainSquadExpBonus*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*SupportSquadExpBonus*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*AccountExpRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*MissionToastLifeTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*ExpItemInsertLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*ExpItemInsertAccelTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*CharacterLvUpCoefficient*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*EquipmentLvUpCoefficient*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*ExpEquipInsertLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*EquipLvUpCoefficient*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*NicknameLength*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 66 /*CraftDuration*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 68 /*CraftLimitTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 70 /*ShiftingCraftDuration*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 72 /*ShiftingCraftTicketConsumeAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*ShiftingCraftSlotMaxCapacity*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*CraftTicketItemUniqueId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*CraftTicketConsumeAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*AcademyEnterCostType*/, 4 /*FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 82 /*AcademyEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*AcademyTicketCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*MassangerMessageExpireDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*CraftLeafNodeGenerateLv1Count*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 90 /*CraftLeafNodeGenerateLv2Count*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 92 /*TutorialGachaShopId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 94 /*BeforehandGachaShopId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 96 /*TutorialGachaGoodsId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 98 /*EquipmentSlotOpenLevel*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 100 /*ScenarioAutoDelayMillisec*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 102 /*JoinOrCreateClanCoolTimeFromHour*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 104 /*ClanMaxMember*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 106 /*ClanSearchResultCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*ClanMaxApplicant*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 110 /*ClanRejoinCoolTimeFromSecond*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*ClanWordBalloonMaxCharacter*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 114 /*CallNameRenameCoolTimeFromHour*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*CallNameMinimumLength*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*CallNameMaximumLength*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*LobbyToScreenModeWaitTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*ScreenshotToLobbyButtonHideDelay*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 124 /*PrologueScenarioID01*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*PrologueScenarioID02*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 128 /*TutorialHardStage11*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*TutorialSpeedButtonStage*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 132 /*TutorialCharacterDefaultCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 134 /*TutorialShopCategoryType*/, 4 /*FlatData.ShopCategoryType*/, 4, false)
      && verifier.VerifyField(tablePos, 136 /*AdventureStrategyPlayTimeLimitInSeconds*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 138 /*WeekDungoenTacticPlayTimeLimitInSeconds*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 140 /*RaidTacticPlayTimeLimitInSeconds*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 142 /*RaidOpponentListAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 144 /*CraftBaseGoldRequired*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 146 /*PostExpiredDayAttendance*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 148 /*PostExpiredDayInventoryOverflow*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 150 /*PostExpiredDayGameManager*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 152 /*UILabelCharacterWrap*/, false)
      && verifier.VerifyField(tablePos, 154 /*RequestTimeOut*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 156 /*MailStorageSoftCap*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 158 /*MailStorageHardCap*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 160 /*ClearDeckStorageSize*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 162 /*ClearDeckNoStarViewCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 164 /*ClearDeck1StarViewCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 166 /*ClearDeck2StarViewCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 168 /*ClearDeck3StarViewCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 170 /*ExSkillLevelMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 172 /*PublicSkillLevelMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 174 /*PassiveSkillLevelMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 176 /*ExtraPassiveSkillLevelMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 178 /*AccountCommentMaxLength*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 180 /*CafeSummonCoolTimeFromHour*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 182 /*LimitedStageDailyClearCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 184 /*LimitedStageEntryTimeLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 186 /*LimitedStageEntryTimeBuffer*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 188 /*LimitedStagePointAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 190 /*LimitedStagePointPerApMin*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 192 /*LimitedStagePointPerApMax*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 194 /*AccountLinkReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 196 /*MonthlyProductCheckDays*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 198 /*WeaponLvUpCoefficient*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 200 /*ShowRaidMyListCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 202 /*MaxLevelExpMasterCoinRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 204 /*RaidEnterCostType*/, 4 /*FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 206 /*RaidEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 208 /*RaidTicketCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 210 /*TimeAttackDungeonScenarioId*/, false)
      && verifier.VerifyField(tablePos, 212 /*TimeAttackDungoenPlayCountPerTicket*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 214 /*TimeAttackDungeonEnterCostType*/, 4 /*FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 216 /*TimeAttackDungeonEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 218 /*TimeAttackDungeonEnterCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 220 /*ClanLeaderTransferLastLoginLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 222 /*MonthlyProductRepurchasePopupLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 224 /*CommonFavorItemTags*/, 4 /*FlatData.Tag*/, false)
      && verifier.VerifyField(tablePos, 226 /*MaxApMasterCoinPerWeek*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 228 /*CraftOpenExpTier1*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 230 /*CraftOpenExpTier2*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 232 /*CraftOpenExpTier3*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 234 /*CharacterEquipmentGearSlot*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 236 /*BirthDayDDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 238 /*RecommendedFriendsLvDifferenceLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 240 /*DDosDetectCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 242 /*DDosCheckIntervalInSeconds*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 244 /*MaxFriendsCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 246 /*MaxFriendsRequest*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 248 /*FriendsSearchRequestCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 250 /*FriendsMaxApplicant*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 252 /*IdCardDefaultCharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 254 /*IdCardDefaultBgId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 256 /*WorldRaidGemEnterCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 258 /*WorldRaidGemEnterAmout*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 260 /*FriendIdCardCommentMaxLength*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 262 /*FormationPresetNumberOfEchelonTab*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 264 /*FormationPresetNumberOfEchelon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 266 /*FormationPresetRecentNumberOfEchelon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 268 /*FormationPresetEchelonTabTextLength*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 270 /*FormationPresetEchelonSlotTextLength*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 272 /*CharProfileRowIntervalKr*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 274 /*CharProfileRowIntervalJp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 276 /*CharProfilePopupRowIntervalKr*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 278 /*CharProfilePopupRowIntervalJp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 280 /*BeforehandGachaCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 282 /*BeforehandGachaGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 284 /*RenewalDisplayOrderDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 286 /*EmblemDefaultId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 288 /*BirthdayMailStartDate*/, false)
      && verifier.VerifyField(tablePos, 290 /*BirthdayMailRemainDate*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 292 /*BirthdayMailParcelType*/, 4 /*FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 294 /*BirthdayMailParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 296 /*BirthdayMailParcelAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 298 /*ClearDeckAverageDeckCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 300 /*ClearDeckWorldRaidSaveConditionCoefficient*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 302 /*ClearDeckShowCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 304 /*CharacterMaxLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 306 /*PotentialBonusStatMaxLevelMaxHP*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 308 /*PotentialBonusStatMaxLevelAttackPower*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 310 /*PotentialBonusStatMaxLevelHealPower*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 312 /*PotentialOpenConditionCharacterLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 314 /*AssistStrangerMinLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 316 /*AssistStrangerMaxLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 318 /*MaxBlockedUserCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
