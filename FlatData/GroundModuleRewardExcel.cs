// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GroundModuleRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GroundModuleRewardExcel GetRootAsGroundModuleRewardExcel(ByteBuffer _bb) { return GetRootAsGroundModuleRewardExcel(_bb, new GroundModuleRewardExcel()); }
  public static GroundModuleRewardExcel GetRootAsGroundModuleRewardExcel(ByteBuffer _bb, GroundModuleRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GroundModuleRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public FlatData.ParcelType RewardParcelType { get { int o = __p.__offset(6); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelProbability { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsDisplayed { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string DropItemModelPrefabPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDropItemModelPrefabPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDropItemModelPrefabPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDropItemModelPrefabPathArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<FlatData.GroundModuleRewardExcel> CreateGroundModuleRewardExcel(FlatBufferBuilder builder,
      uint GroupId = 0,
      FlatData.ParcelType RewardParcelType = FlatData.ParcelType.None,
      long RewardParcelId = 0,
      long RewardParcelAmount = 0,
      long RewardParcelProbability = 0,
      bool IsDisplayed = false,
      StringOffset DropItemModelPrefabPathOffset = default(StringOffset)) {
    builder.StartTable(7);
    GroundModuleRewardExcel.AddRewardParcelProbability(builder, RewardParcelProbability);
    GroundModuleRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    GroundModuleRewardExcel.AddRewardParcelId(builder, RewardParcelId);
    GroundModuleRewardExcel.AddDropItemModelPrefabPath(builder, DropItemModelPrefabPathOffset);
    GroundModuleRewardExcel.AddRewardParcelType(builder, RewardParcelType);
    GroundModuleRewardExcel.AddGroupId(builder, GroupId);
    GroundModuleRewardExcel.AddIsDisplayed(builder, IsDisplayed);
    return GroundModuleRewardExcel.EndGroundModuleRewardExcel(builder);
  }

  public static void StartGroundModuleRewardExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddGroupId(FlatBufferBuilder builder, uint groupId) { builder.AddUint(0, groupId, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, FlatData.ParcelType rewardParcelType) { builder.AddInt(1, (int)rewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long rewardParcelId) { builder.AddLong(2, rewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, long rewardParcelAmount) { builder.AddLong(3, rewardParcelAmount, 0); }
  public static void AddRewardParcelProbability(FlatBufferBuilder builder, long rewardParcelProbability) { builder.AddLong(4, rewardParcelProbability, 0); }
  public static void AddIsDisplayed(FlatBufferBuilder builder, bool isDisplayed) { builder.AddBool(5, isDisplayed, false); }
  public static void AddDropItemModelPrefabPath(FlatBufferBuilder builder, StringOffset dropItemModelPrefabPathOffset) { builder.AddOffset(6, dropItemModelPrefabPathOffset.Value, 0); }
  public static Offset<FlatData.GroundModuleRewardExcel> EndGroundModuleRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.GroundModuleRewardExcel>(o);
  }
  public GroundModuleRewardExcelT UnPack() {
    var _o = new GroundModuleRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GroundModuleRewardExcelT _o) {
    _o.GroupId = this.GroupId;
    _o.RewardParcelType = this.RewardParcelType;
    _o.RewardParcelId = this.RewardParcelId;
    _o.RewardParcelAmount = this.RewardParcelAmount;
    _o.RewardParcelProbability = this.RewardParcelProbability;
    _o.IsDisplayed = this.IsDisplayed;
    _o.DropItemModelPrefabPath = this.DropItemModelPrefabPath;
  }
  public static Offset<FlatData.GroundModuleRewardExcel> Pack(FlatBufferBuilder builder, GroundModuleRewardExcelT _o) {
    if (_o == null) return default(Offset<FlatData.GroundModuleRewardExcel>);
    var _DropItemModelPrefabPath = _o.DropItemModelPrefabPath == null ? default(StringOffset) : builder.CreateString(_o.DropItemModelPrefabPath);
    return CreateGroundModuleRewardExcel(
      builder,
      _o.GroupId,
      _o.RewardParcelType,
      _o.RewardParcelId,
      _o.RewardParcelAmount,
      _o.RewardParcelProbability,
      _o.IsDisplayed,
      _DropItemModelPrefabPath);
  }
}

public class GroundModuleRewardExcelT
{
  [Newtonsoft.Json.JsonProperty("GroupId")]
  public uint GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("RewardParcelType")]
  public FlatData.ParcelType RewardParcelType { get; set; }
  [Newtonsoft.Json.JsonProperty("RewardParcelId")]
  public long RewardParcelId { get; set; }
  [Newtonsoft.Json.JsonProperty("RewardParcelAmount")]
  public long RewardParcelAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("RewardParcelProbability")]
  public long RewardParcelProbability { get; set; }
  [Newtonsoft.Json.JsonProperty("IsDisplayed")]
  public bool IsDisplayed { get; set; }
  [Newtonsoft.Json.JsonProperty("DropItemModelPrefabPath")]
  public string DropItemModelPrefabPath { get; set; }

  public GroundModuleRewardExcelT() {
    this.GroupId = 0;
    this.RewardParcelType = FlatData.ParcelType.None;
    this.RewardParcelId = 0;
    this.RewardParcelAmount = 0;
    this.RewardParcelProbability = 0;
    this.IsDisplayed = false;
    this.DropItemModelPrefabPath = null;
  }
}


static public class GroundModuleRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RewardParcelType*/, 4 /*FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*RewardParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*RewardParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*RewardParcelProbability*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*IsDisplayed*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 16 /*DropItemModelPrefabPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
