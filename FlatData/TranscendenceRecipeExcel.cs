// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TranscendenceRecipeExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TranscendenceRecipeExcel GetRootAsTranscendenceRecipeExcel(ByteBuffer _bb) { return GetRootAsTranscendenceRecipeExcel(_bb, new TranscendenceRecipeExcel()); }
  public static TranscendenceRecipeExcel GetRootAsTranscendenceRecipeExcel(ByteBuffer _bb, TranscendenceRecipeExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TranscendenceRecipeExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DevName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDevNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDevNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDevNameArray() { return __p.__vector_as_array<byte>(6); }
  public FlatData.CurrencyTypes CostCurrencyType { get { int o = __p.__offset(8); return o != 0 ? (FlatData.CurrencyTypes)__p.bb.GetInt(o + __p.bb_pos) : FlatData.CurrencyTypes.Invalid; } }
  public long CostCurrencyAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.ParcelType ParcelType(int j) { int o = __p.__offset(12); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatData.ParcelType)0; }
  public int ParcelTypeLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatData.ParcelType> GetParcelTypeBytes() { return __p.__vector_as_span<FlatData.ParcelType>(12, 4); }
#else
  public ArraySegment<byte>? GetParcelTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public FlatData.ParcelType[] GetParcelTypeArray() { int o = __p.__offset(12); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatData.ParcelType[] a = new FlatData.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatData.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long ParcelId(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ParcelIdLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetParcelIdBytes() { return __p.__vector_as_span<long>(14, 8); }
#else
  public ArraySegment<byte>? GetParcelIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public long[] GetParcelIdArray() { return __p.__vector_as_array<long>(14); }
  public int ParcelAmount(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ParcelAmountLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetParcelAmountBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetParcelAmountBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetParcelAmountArray() { return __p.__vector_as_array<int>(16); }

  public static Offset<FlatData.TranscendenceRecipeExcel> CreateTranscendenceRecipeExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset DevNameOffset = default(StringOffset),
      FlatData.CurrencyTypes CostCurrencyType = FlatData.CurrencyTypes.Invalid,
      long CostCurrencyAmount = 0,
      VectorOffset ParcelTypeOffset = default(VectorOffset),
      VectorOffset ParcelIdOffset = default(VectorOffset),
      VectorOffset ParcelAmountOffset = default(VectorOffset)) {
    builder.StartTable(7);
    TranscendenceRecipeExcel.AddCostCurrencyAmount(builder, CostCurrencyAmount);
    TranscendenceRecipeExcel.AddId(builder, Id);
    TranscendenceRecipeExcel.AddParcelAmount(builder, ParcelAmountOffset);
    TranscendenceRecipeExcel.AddParcelId(builder, ParcelIdOffset);
    TranscendenceRecipeExcel.AddParcelType(builder, ParcelTypeOffset);
    TranscendenceRecipeExcel.AddCostCurrencyType(builder, CostCurrencyType);
    TranscendenceRecipeExcel.AddDevName(builder, DevNameOffset);
    return TranscendenceRecipeExcel.EndTranscendenceRecipeExcel(builder);
  }

  public static void StartTranscendenceRecipeExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddDevName(FlatBufferBuilder builder, StringOffset devNameOffset) { builder.AddOffset(1, devNameOffset.Value, 0); }
  public static void AddCostCurrencyType(FlatBufferBuilder builder, FlatData.CurrencyTypes costCurrencyType) { builder.AddInt(2, (int)costCurrencyType, 0); }
  public static void AddCostCurrencyAmount(FlatBufferBuilder builder, long costCurrencyAmount) { builder.AddLong(3, costCurrencyAmount, 0); }
  public static void AddParcelType(FlatBufferBuilder builder, VectorOffset parcelTypeOffset) { builder.AddOffset(4, parcelTypeOffset.Value, 0); }
  public static VectorOffset CreateParcelTypeVector(FlatBufferBuilder builder, FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelTypeVectorBlock(FlatBufferBuilder builder, FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatData.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatData.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParcelId(FlatBufferBuilder builder, VectorOffset parcelIdOffset) { builder.AddOffset(5, parcelIdOffset.Value, 0); }
  public static VectorOffset CreateParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddParcelAmount(FlatBufferBuilder builder, VectorOffset parcelAmountOffset) { builder.AddOffset(6, parcelAmountOffset.Value, 0); }
  public static VectorOffset CreateParcelAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatData.TranscendenceRecipeExcel> EndTranscendenceRecipeExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.TranscendenceRecipeExcel>(o);
  }
  public TranscendenceRecipeExcelT UnPack() {
    var _o = new TranscendenceRecipeExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TranscendenceRecipeExcelT _o) {
    _o.Id = this.Id;
    _o.DevName = this.DevName;
    _o.CostCurrencyType = this.CostCurrencyType;
    _o.CostCurrencyAmount = this.CostCurrencyAmount;
    _o.ParcelType = new List<FlatData.ParcelType>();
    for (var _j = 0; _j < this.ParcelTypeLength; ++_j) {_o.ParcelType.Add(this.ParcelType(_j));}
    _o.ParcelId = new List<long>();
    for (var _j = 0; _j < this.ParcelIdLength; ++_j) {_o.ParcelId.Add(this.ParcelId(_j));}
    _o.ParcelAmount = new List<int>();
    for (var _j = 0; _j < this.ParcelAmountLength; ++_j) {_o.ParcelAmount.Add(this.ParcelAmount(_j));}
  }
  public static Offset<FlatData.TranscendenceRecipeExcel> Pack(FlatBufferBuilder builder, TranscendenceRecipeExcelT _o) {
    if (_o == null) return default(Offset<FlatData.TranscendenceRecipeExcel>);
    var _DevName = _o.DevName == null ? default(StringOffset) : builder.CreateString(_o.DevName);
    var _ParcelType = default(VectorOffset);
    if (_o.ParcelType != null) {
      var __ParcelType = _o.ParcelType.ToArray();
      _ParcelType = CreateParcelTypeVector(builder, __ParcelType);
    }
    var _ParcelId = default(VectorOffset);
    if (_o.ParcelId != null) {
      var __ParcelId = _o.ParcelId.ToArray();
      _ParcelId = CreateParcelIdVector(builder, __ParcelId);
    }
    var _ParcelAmount = default(VectorOffset);
    if (_o.ParcelAmount != null) {
      var __ParcelAmount = _o.ParcelAmount.ToArray();
      _ParcelAmount = CreateParcelAmountVector(builder, __ParcelAmount);
    }
    return CreateTranscendenceRecipeExcel(
      builder,
      _o.Id,
      _DevName,
      _o.CostCurrencyType,
      _o.CostCurrencyAmount,
      _ParcelType,
      _ParcelId,
      _ParcelAmount);
  }
}

public class TranscendenceRecipeExcelT
{
  [Newtonsoft.Json.JsonProperty("Id")]
  public long Id { get; set; }
  [Newtonsoft.Json.JsonProperty("DevName")]
  public string DevName { get; set; }
  [Newtonsoft.Json.JsonProperty("CostCurrencyType")]
  public FlatData.CurrencyTypes CostCurrencyType { get; set; }
  [Newtonsoft.Json.JsonProperty("CostCurrencyAmount")]
  public long CostCurrencyAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("ParcelType")]
  public List<FlatData.ParcelType> ParcelType { get; set; }
  [Newtonsoft.Json.JsonProperty("ParcelId")]
  public List<long> ParcelId { get; set; }
  [Newtonsoft.Json.JsonProperty("ParcelAmount")]
  public List<int> ParcelAmount { get; set; }

  public TranscendenceRecipeExcelT() {
    this.Id = 0;
    this.DevName = null;
    this.CostCurrencyType = FlatData.CurrencyTypes.Invalid;
    this.CostCurrencyAmount = 0;
    this.ParcelType = null;
    this.ParcelId = null;
    this.ParcelAmount = null;
  }
}


static public class TranscendenceRecipeExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*DevName*/, false)
      && verifier.VerifyField(tablePos, 8 /*CostCurrencyType*/, 4 /*FlatData.CurrencyTypes*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*CostCurrencyAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*ParcelType*/, 4 /*FlatData.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*ParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*ParcelAmount*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
