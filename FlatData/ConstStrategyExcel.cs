// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConstStrategyExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ConstStrategyExcel GetRootAsConstStrategyExcel(ByteBuffer _bb) { return GetRootAsConstStrategyExcel(_bb, new ConstStrategyExcel()); }
  public static ConstStrategyExcel GetRootAsConstStrategyExcel(ByteBuffer _bb, ConstStrategyExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstStrategyExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float HexaMapBoundaryOffset { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float HexaMapStartCameraOffset { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMax { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMin { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomDefault { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public FlatData.CurrencyTypes HealCostType { get { int o = __p.__offset(14); return o != 0 ? (FlatData.CurrencyTypes)__p.bb.GetInt(o + __p.bb_pos) : FlatData.CurrencyTypes.Invalid; } }
  public long HealCostAmount(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int HealCostAmountLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetHealCostAmountBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetHealCostAmountBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetHealCostAmountArray() { return __p.__vector_as_array<long>(16); }
  public int CanHealHpRate { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long PlayTimeLimitInSeconds { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int AdventureEchelonCount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RaidEchelonCount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DefaultEchelonCount { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventContentEchelonCount { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TimeAttackDungeonEchelonCount { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WorldRaidEchelonCount { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TacticSkipClearTimeSeconds { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TacticSkipFramePerSecond { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConquestEchelonCount { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StoryEchelonCount { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiSweepPresetCount { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiSweepPresetNameMaxLength { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiSweepPresetSelectStageMaxCount { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiSweepPresetMaxSweepCount { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatData.ConstStrategyExcel> CreateConstStrategyExcel(FlatBufferBuilder builder,
      float HexaMapBoundaryOffset = 0.0f,
      float HexaMapStartCameraOffset = 0.0f,
      float CameraZoomMax = 0.0f,
      float CameraZoomMin = 0.0f,
      float CameraZoomDefault = 0.0f,
      FlatData.CurrencyTypes HealCostType = FlatData.CurrencyTypes.Invalid,
      VectorOffset HealCostAmountOffset = default(VectorOffset),
      int CanHealHpRate = 0,
      long PlayTimeLimitInSeconds = 0,
      int AdventureEchelonCount = 0,
      int RaidEchelonCount = 0,
      int DefaultEchelonCount = 0,
      int EventContentEchelonCount = 0,
      int TimeAttackDungeonEchelonCount = 0,
      int WorldRaidEchelonCount = 0,
      int TacticSkipClearTimeSeconds = 0,
      int TacticSkipFramePerSecond = 0,
      int ConquestEchelonCount = 0,
      int StoryEchelonCount = 0,
      int MultiSweepPresetCount = 0,
      int MultiSweepPresetNameMaxLength = 0,
      int MultiSweepPresetSelectStageMaxCount = 0,
      int MultiSweepPresetMaxSweepCount = 0) {
    builder.StartTable(23);
    ConstStrategyExcel.AddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds);
    ConstStrategyExcel.AddMultiSweepPresetMaxSweepCount(builder, MultiSweepPresetMaxSweepCount);
    ConstStrategyExcel.AddMultiSweepPresetSelectStageMaxCount(builder, MultiSweepPresetSelectStageMaxCount);
    ConstStrategyExcel.AddMultiSweepPresetNameMaxLength(builder, MultiSweepPresetNameMaxLength);
    ConstStrategyExcel.AddMultiSweepPresetCount(builder, MultiSweepPresetCount);
    ConstStrategyExcel.AddStoryEchelonCount(builder, StoryEchelonCount);
    ConstStrategyExcel.AddConquestEchelonCount(builder, ConquestEchelonCount);
    ConstStrategyExcel.AddTacticSkipFramePerSecond(builder, TacticSkipFramePerSecond);
    ConstStrategyExcel.AddTacticSkipClearTimeSeconds(builder, TacticSkipClearTimeSeconds);
    ConstStrategyExcel.AddWorldRaidEchelonCount(builder, WorldRaidEchelonCount);
    ConstStrategyExcel.AddTimeAttackDungeonEchelonCount(builder, TimeAttackDungeonEchelonCount);
    ConstStrategyExcel.AddEventContentEchelonCount(builder, EventContentEchelonCount);
    ConstStrategyExcel.AddDefaultEchelonCount(builder, DefaultEchelonCount);
    ConstStrategyExcel.AddRaidEchelonCount(builder, RaidEchelonCount);
    ConstStrategyExcel.AddAdventureEchelonCount(builder, AdventureEchelonCount);
    ConstStrategyExcel.AddCanHealHpRate(builder, CanHealHpRate);
    ConstStrategyExcel.AddHealCostAmount(builder, HealCostAmountOffset);
    ConstStrategyExcel.AddHealCostType(builder, HealCostType);
    ConstStrategyExcel.AddCameraZoomDefault(builder, CameraZoomDefault);
    ConstStrategyExcel.AddCameraZoomMin(builder, CameraZoomMin);
    ConstStrategyExcel.AddCameraZoomMax(builder, CameraZoomMax);
    ConstStrategyExcel.AddHexaMapStartCameraOffset(builder, HexaMapStartCameraOffset);
    ConstStrategyExcel.AddHexaMapBoundaryOffset(builder, HexaMapBoundaryOffset);
    return ConstStrategyExcel.EndConstStrategyExcel(builder);
  }

  public static void StartConstStrategyExcel(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddHexaMapBoundaryOffset(FlatBufferBuilder builder, float hexaMapBoundaryOffset) { builder.AddFloat(0, hexaMapBoundaryOffset, 0.0f); }
  public static void AddHexaMapStartCameraOffset(FlatBufferBuilder builder, float hexaMapStartCameraOffset) { builder.AddFloat(1, hexaMapStartCameraOffset, 0.0f); }
  public static void AddCameraZoomMax(FlatBufferBuilder builder, float cameraZoomMax) { builder.AddFloat(2, cameraZoomMax, 0.0f); }
  public static void AddCameraZoomMin(FlatBufferBuilder builder, float cameraZoomMin) { builder.AddFloat(3, cameraZoomMin, 0.0f); }
  public static void AddCameraZoomDefault(FlatBufferBuilder builder, float cameraZoomDefault) { builder.AddFloat(4, cameraZoomDefault, 0.0f); }
  public static void AddHealCostType(FlatBufferBuilder builder, FlatData.CurrencyTypes healCostType) { builder.AddInt(5, (int)healCostType, 0); }
  public static void AddHealCostAmount(FlatBufferBuilder builder, VectorOffset healCostAmountOffset) { builder.AddOffset(6, healCostAmountOffset.Value, 0); }
  public static VectorOffset CreateHealCostAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHealCostAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHealCostAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHealCostAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHealCostAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCanHealHpRate(FlatBufferBuilder builder, int canHealHpRate) { builder.AddInt(7, canHealHpRate, 0); }
  public static void AddPlayTimeLimitInSeconds(FlatBufferBuilder builder, long playTimeLimitInSeconds) { builder.AddLong(8, playTimeLimitInSeconds, 0); }
  public static void AddAdventureEchelonCount(FlatBufferBuilder builder, int adventureEchelonCount) { builder.AddInt(9, adventureEchelonCount, 0); }
  public static void AddRaidEchelonCount(FlatBufferBuilder builder, int raidEchelonCount) { builder.AddInt(10, raidEchelonCount, 0); }
  public static void AddDefaultEchelonCount(FlatBufferBuilder builder, int defaultEchelonCount) { builder.AddInt(11, defaultEchelonCount, 0); }
  public static void AddEventContentEchelonCount(FlatBufferBuilder builder, int eventContentEchelonCount) { builder.AddInt(12, eventContentEchelonCount, 0); }
  public static void AddTimeAttackDungeonEchelonCount(FlatBufferBuilder builder, int timeAttackDungeonEchelonCount) { builder.AddInt(13, timeAttackDungeonEchelonCount, 0); }
  public static void AddWorldRaidEchelonCount(FlatBufferBuilder builder, int worldRaidEchelonCount) { builder.AddInt(14, worldRaidEchelonCount, 0); }
  public static void AddTacticSkipClearTimeSeconds(FlatBufferBuilder builder, int tacticSkipClearTimeSeconds) { builder.AddInt(15, tacticSkipClearTimeSeconds, 0); }
  public static void AddTacticSkipFramePerSecond(FlatBufferBuilder builder, int tacticSkipFramePerSecond) { builder.AddInt(16, tacticSkipFramePerSecond, 0); }
  public static void AddConquestEchelonCount(FlatBufferBuilder builder, int conquestEchelonCount) { builder.AddInt(17, conquestEchelonCount, 0); }
  public static void AddStoryEchelonCount(FlatBufferBuilder builder, int storyEchelonCount) { builder.AddInt(18, storyEchelonCount, 0); }
  public static void AddMultiSweepPresetCount(FlatBufferBuilder builder, int multiSweepPresetCount) { builder.AddInt(19, multiSweepPresetCount, 0); }
  public static void AddMultiSweepPresetNameMaxLength(FlatBufferBuilder builder, int multiSweepPresetNameMaxLength) { builder.AddInt(20, multiSweepPresetNameMaxLength, 0); }
  public static void AddMultiSweepPresetSelectStageMaxCount(FlatBufferBuilder builder, int multiSweepPresetSelectStageMaxCount) { builder.AddInt(21, multiSweepPresetSelectStageMaxCount, 0); }
  public static void AddMultiSweepPresetMaxSweepCount(FlatBufferBuilder builder, int multiSweepPresetMaxSweepCount) { builder.AddInt(22, multiSweepPresetMaxSweepCount, 0); }
  public static Offset<FlatData.ConstStrategyExcel> EndConstStrategyExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.ConstStrategyExcel>(o);
  }
  public ConstStrategyExcelT UnPack() {
    var _o = new ConstStrategyExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstStrategyExcelT _o) {
    _o.HexaMapBoundaryOffset = this.HexaMapBoundaryOffset;
    _o.HexaMapStartCameraOffset = this.HexaMapStartCameraOffset;
    _o.CameraZoomMax = this.CameraZoomMax;
    _o.CameraZoomMin = this.CameraZoomMin;
    _o.CameraZoomDefault = this.CameraZoomDefault;
    _o.HealCostType = this.HealCostType;
    _o.HealCostAmount = new List<long>();
    for (var _j = 0; _j < this.HealCostAmountLength; ++_j) {_o.HealCostAmount.Add(this.HealCostAmount(_j));}
    _o.CanHealHpRate = this.CanHealHpRate;
    _o.PlayTimeLimitInSeconds = this.PlayTimeLimitInSeconds;
    _o.AdventureEchelonCount = this.AdventureEchelonCount;
    _o.RaidEchelonCount = this.RaidEchelonCount;
    _o.DefaultEchelonCount = this.DefaultEchelonCount;
    _o.EventContentEchelonCount = this.EventContentEchelonCount;
    _o.TimeAttackDungeonEchelonCount = this.TimeAttackDungeonEchelonCount;
    _o.WorldRaidEchelonCount = this.WorldRaidEchelonCount;
    _o.TacticSkipClearTimeSeconds = this.TacticSkipClearTimeSeconds;
    _o.TacticSkipFramePerSecond = this.TacticSkipFramePerSecond;
    _o.ConquestEchelonCount = this.ConquestEchelonCount;
    _o.StoryEchelonCount = this.StoryEchelonCount;
    _o.MultiSweepPresetCount = this.MultiSweepPresetCount;
    _o.MultiSweepPresetNameMaxLength = this.MultiSweepPresetNameMaxLength;
    _o.MultiSweepPresetSelectStageMaxCount = this.MultiSweepPresetSelectStageMaxCount;
    _o.MultiSweepPresetMaxSweepCount = this.MultiSweepPresetMaxSweepCount;
  }
  public static Offset<FlatData.ConstStrategyExcel> Pack(FlatBufferBuilder builder, ConstStrategyExcelT _o) {
    if (_o == null) return default(Offset<FlatData.ConstStrategyExcel>);
    var _HealCostAmount = default(VectorOffset);
    if (_o.HealCostAmount != null) {
      var __HealCostAmount = _o.HealCostAmount.ToArray();
      _HealCostAmount = CreateHealCostAmountVector(builder, __HealCostAmount);
    }
    return CreateConstStrategyExcel(
      builder,
      _o.HexaMapBoundaryOffset,
      _o.HexaMapStartCameraOffset,
      _o.CameraZoomMax,
      _o.CameraZoomMin,
      _o.CameraZoomDefault,
      _o.HealCostType,
      _HealCostAmount,
      _o.CanHealHpRate,
      _o.PlayTimeLimitInSeconds,
      _o.AdventureEchelonCount,
      _o.RaidEchelonCount,
      _o.DefaultEchelonCount,
      _o.EventContentEchelonCount,
      _o.TimeAttackDungeonEchelonCount,
      _o.WorldRaidEchelonCount,
      _o.TacticSkipClearTimeSeconds,
      _o.TacticSkipFramePerSecond,
      _o.ConquestEchelonCount,
      _o.StoryEchelonCount,
      _o.MultiSweepPresetCount,
      _o.MultiSweepPresetNameMaxLength,
      _o.MultiSweepPresetSelectStageMaxCount,
      _o.MultiSweepPresetMaxSweepCount);
  }
}

public class ConstStrategyExcelT
{
  [Newtonsoft.Json.JsonProperty("HexaMapBoundaryOffset")]
  public float HexaMapBoundaryOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("HexaMapStartCameraOffset")]
  public float HexaMapStartCameraOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("CameraZoomMax")]
  public float CameraZoomMax { get; set; }
  [Newtonsoft.Json.JsonProperty("CameraZoomMin")]
  public float CameraZoomMin { get; set; }
  [Newtonsoft.Json.JsonProperty("CameraZoomDefault")]
  public float CameraZoomDefault { get; set; }
  [Newtonsoft.Json.JsonProperty("HealCostType")]
  public FlatData.CurrencyTypes HealCostType { get; set; }
  [Newtonsoft.Json.JsonProperty("HealCostAmount")]
  public List<long> HealCostAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("CanHealHpRate")]
  public int CanHealHpRate { get; set; }
  [Newtonsoft.Json.JsonProperty("PlayTimeLimitInSeconds")]
  public long PlayTimeLimitInSeconds { get; set; }
  [Newtonsoft.Json.JsonProperty("AdventureEchelonCount")]
  public int AdventureEchelonCount { get; set; }
  [Newtonsoft.Json.JsonProperty("RaidEchelonCount")]
  public int RaidEchelonCount { get; set; }
  [Newtonsoft.Json.JsonProperty("DefaultEchelonCount")]
  public int DefaultEchelonCount { get; set; }
  [Newtonsoft.Json.JsonProperty("EventContentEchelonCount")]
  public int EventContentEchelonCount { get; set; }
  [Newtonsoft.Json.JsonProperty("TimeAttackDungeonEchelonCount")]
  public int TimeAttackDungeonEchelonCount { get; set; }
  [Newtonsoft.Json.JsonProperty("WorldRaidEchelonCount")]
  public int WorldRaidEchelonCount { get; set; }
  [Newtonsoft.Json.JsonProperty("TacticSkipClearTimeSeconds")]
  public int TacticSkipClearTimeSeconds { get; set; }
  [Newtonsoft.Json.JsonProperty("TacticSkipFramePerSecond")]
  public int TacticSkipFramePerSecond { get; set; }
  [Newtonsoft.Json.JsonProperty("ConquestEchelonCount")]
  public int ConquestEchelonCount { get; set; }
  [Newtonsoft.Json.JsonProperty("StoryEchelonCount")]
  public int StoryEchelonCount { get; set; }
  [Newtonsoft.Json.JsonProperty("MultiSweepPresetCount")]
  public int MultiSweepPresetCount { get; set; }
  [Newtonsoft.Json.JsonProperty("MultiSweepPresetNameMaxLength")]
  public int MultiSweepPresetNameMaxLength { get; set; }
  [Newtonsoft.Json.JsonProperty("MultiSweepPresetSelectStageMaxCount")]
  public int MultiSweepPresetSelectStageMaxCount { get; set; }
  [Newtonsoft.Json.JsonProperty("MultiSweepPresetMaxSweepCount")]
  public int MultiSweepPresetMaxSweepCount { get; set; }

  public ConstStrategyExcelT() {
    this.HexaMapBoundaryOffset = 0.0f;
    this.HexaMapStartCameraOffset = 0.0f;
    this.CameraZoomMax = 0.0f;
    this.CameraZoomMin = 0.0f;
    this.CameraZoomDefault = 0.0f;
    this.HealCostType = FlatData.CurrencyTypes.Invalid;
    this.HealCostAmount = null;
    this.CanHealHpRate = 0;
    this.PlayTimeLimitInSeconds = 0;
    this.AdventureEchelonCount = 0;
    this.RaidEchelonCount = 0;
    this.DefaultEchelonCount = 0;
    this.EventContentEchelonCount = 0;
    this.TimeAttackDungeonEchelonCount = 0;
    this.WorldRaidEchelonCount = 0;
    this.TacticSkipClearTimeSeconds = 0;
    this.TacticSkipFramePerSecond = 0;
    this.ConquestEchelonCount = 0;
    this.StoryEchelonCount = 0;
    this.MultiSweepPresetCount = 0;
    this.MultiSweepPresetNameMaxLength = 0;
    this.MultiSweepPresetSelectStageMaxCount = 0;
    this.MultiSweepPresetMaxSweepCount = 0;
  }
}


static public class ConstStrategyExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*HexaMapBoundaryOffset*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*HexaMapStartCameraOffset*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CameraZoomMax*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*CameraZoomMin*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CameraZoomDefault*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*HealCostType*/, 4 /*FlatData.CurrencyTypes*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*HealCostAmount*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 18 /*CanHealHpRate*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*PlayTimeLimitInSeconds*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*AdventureEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*RaidEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*DefaultEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*EventContentEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*TimeAttackDungeonEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*WorldRaidEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*TacticSkipClearTimeSeconds*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*TacticSkipFramePerSecond*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*ConquestEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*StoryEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*MultiSweepPresetCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*MultiSweepPresetNameMaxLength*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*MultiSweepPresetSelectStageMaxCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*MultiSweepPresetMaxSweepCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
