// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ScenarioExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ScenarioExcel GetRootAsScenarioExcel(ByteBuffer _bb) { return GetRootAsScenarioExcel(_bb, new ScenarioExcel()); }
  public static ScenarioExcel GetRootAsScenarioExcel(ByteBuffer _bb, ScenarioExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatData.ScenarioBGType None(int j) { int o = __p.__offset(4); return o != 0 ? (FlatData.ScenarioBGType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatData.ScenarioBGType)0; }
  public int NoneLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatData.ScenarioBGType> GetNoneBytes() { return __p.__vector_as_span<FlatData.ScenarioBGType>(4, 4); }
#else
  public ArraySegment<byte>? GetNoneBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public FlatData.ScenarioBGType[] GetNoneArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatData.ScenarioBGType[] a = new FlatData.ScenarioBGType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatData.ScenarioBGType)__p.bb.GetInt(p + i * 4); } return a; }
  public FlatData.ScenarioCharacterAction Idle(int j) { int o = __p.__offset(6); return o != 0 ? (FlatData.ScenarioCharacterAction)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatData.ScenarioCharacterAction)0; }
  public int IdleLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatData.ScenarioCharacterAction> GetIdleBytes() { return __p.__vector_as_span<FlatData.ScenarioCharacterAction>(6, 4); }
#else
  public ArraySegment<byte>? GetIdleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public FlatData.ScenarioCharacterAction[] GetIdleArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatData.ScenarioCharacterAction[] a = new FlatData.ScenarioCharacterAction[l]; for (int i = 0; i < l; i++) { a[i] = (FlatData.ScenarioCharacterAction)__p.bb.GetInt(p + i * 4); } return a; }
  public FlatData.DialogCategory Cafe { get { int o = __p.__offset(8); return o != 0 ? (FlatData.DialogCategory)__p.bb.GetInt(o + __p.bb_pos) : FlatData.DialogCategory.Cafe; } }
  public FlatData.DialogType Talk { get { int o = __p.__offset(10); return o != 0 ? (FlatData.DialogType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.DialogType.Talk; } }
  public FlatData.StoryCondition Open { get { int o = __p.__offset(12); return o != 0 ? (FlatData.StoryCondition)__p.bb.GetInt(o + __p.bb_pos) : FlatData.StoryCondition.Open; } }
  public FlatData.EmojiEvent EnterConver { get { int o = __p.__offset(14); return o != 0 ? (FlatData.EmojiEvent)__p.bb.GetInt(o + __p.bb_pos) : FlatData.EmojiEvent.EnterConver; } }
  public FlatData.ScenarioZoomAnchors Center { get { int o = __p.__offset(16); return o != 0 ? (FlatData.ScenarioZoomAnchors)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ScenarioZoomAnchors.Center; } }
  public FlatData.ScenarioZoomType Instant { get { int o = __p.__offset(18); return o != 0 ? (FlatData.ScenarioZoomType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ScenarioZoomType.Instant; } }
  public FlatData.ScenarioContentType Prologue { get { int o = __p.__offset(20); return o != 0 ? (FlatData.ScenarioContentType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ScenarioContentType.Prologue; } }

  public static Offset<FlatData.ScenarioExcel> CreateScenarioExcel(FlatBufferBuilder builder,
      VectorOffset NoneOffset = default(VectorOffset),
      VectorOffset IdleOffset = default(VectorOffset),
      FlatData.DialogCategory Cafe = FlatData.DialogCategory.Cafe,
      FlatData.DialogType Talk = FlatData.DialogType.Talk,
      FlatData.StoryCondition Open = FlatData.StoryCondition.Open,
      FlatData.EmojiEvent EnterConver = FlatData.EmojiEvent.EnterConver,
      FlatData.ScenarioZoomAnchors Center = FlatData.ScenarioZoomAnchors.Center,
      FlatData.ScenarioZoomType Instant = FlatData.ScenarioZoomType.Instant,
      FlatData.ScenarioContentType Prologue = FlatData.ScenarioContentType.Prologue) {
    builder.StartTable(9);
    ScenarioExcel.AddPrologue(builder, Prologue);
    ScenarioExcel.AddInstant(builder, Instant);
    ScenarioExcel.AddCenter(builder, Center);
    ScenarioExcel.AddEnterConver(builder, EnterConver);
    ScenarioExcel.AddOpen(builder, Open);
    ScenarioExcel.AddTalk(builder, Talk);
    ScenarioExcel.AddCafe(builder, Cafe);
    ScenarioExcel.AddIdle(builder, IdleOffset);
    ScenarioExcel.AddNone(builder, NoneOffset);
    return ScenarioExcel.EndScenarioExcel(builder);
  }

  public static void StartScenarioExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddNone(FlatBufferBuilder builder, VectorOffset noneOffset) { builder.AddOffset(0, noneOffset.Value, 0); }
  public static VectorOffset CreateNoneVector(FlatBufferBuilder builder, FlatData.ScenarioBGType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, FlatData.ScenarioBGType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatData.ScenarioBGType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatData.ScenarioBGType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNoneVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIdle(FlatBufferBuilder builder, VectorOffset idleOffset) { builder.AddOffset(1, idleOffset.Value, 0); }
  public static VectorOffset CreateIdleVector(FlatBufferBuilder builder, FlatData.ScenarioCharacterAction[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, FlatData.ScenarioCharacterAction[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatData.ScenarioCharacterAction> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatData.ScenarioCharacterAction>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCafe(FlatBufferBuilder builder, FlatData.DialogCategory cafe) { builder.AddInt(2, (int)cafe, 0); }
  public static void AddTalk(FlatBufferBuilder builder, FlatData.DialogType talk) { builder.AddInt(3, (int)talk, 0); }
  public static void AddOpen(FlatBufferBuilder builder, FlatData.StoryCondition open) { builder.AddInt(4, (int)open, 0); }
  public static void AddEnterConver(FlatBufferBuilder builder, FlatData.EmojiEvent enterConver) { builder.AddInt(5, (int)enterConver, 0); }
  public static void AddCenter(FlatBufferBuilder builder, FlatData.ScenarioZoomAnchors center) { builder.AddInt(6, (int)center, 0); }
  public static void AddInstant(FlatBufferBuilder builder, FlatData.ScenarioZoomType instant) { builder.AddInt(7, (int)instant, 0); }
  public static void AddPrologue(FlatBufferBuilder builder, FlatData.ScenarioContentType prologue) { builder.AddInt(8, (int)prologue, 0); }
  public static Offset<FlatData.ScenarioExcel> EndScenarioExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.ScenarioExcel>(o);
  }
  public ScenarioExcelT UnPack() {
    var _o = new ScenarioExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioExcelT _o) {
    _o.None = new List<FlatData.ScenarioBGType>();
    for (var _j = 0; _j < this.NoneLength; ++_j) {_o.None.Add(this.None(_j));}
    _o.Idle = new List<FlatData.ScenarioCharacterAction>();
    for (var _j = 0; _j < this.IdleLength; ++_j) {_o.Idle.Add(this.Idle(_j));}
    _o.Cafe = this.Cafe;
    _o.Talk = this.Talk;
    _o.Open = this.Open;
    _o.EnterConver = this.EnterConver;
    _o.Center = this.Center;
    _o.Instant = this.Instant;
    _o.Prologue = this.Prologue;
  }
  public static Offset<FlatData.ScenarioExcel> Pack(FlatBufferBuilder builder, ScenarioExcelT _o) {
    if (_o == null) return default(Offset<FlatData.ScenarioExcel>);
    var _None = default(VectorOffset);
    if (_o.None != null) {
      var __None = _o.None.ToArray();
      _None = CreateNoneVector(builder, __None);
    }
    var _Idle = default(VectorOffset);
    if (_o.Idle != null) {
      var __Idle = _o.Idle.ToArray();
      _Idle = CreateIdleVector(builder, __Idle);
    }
    return CreateScenarioExcel(
      builder,
      _None,
      _Idle,
      _o.Cafe,
      _o.Talk,
      _o.Open,
      _o.EnterConver,
      _o.Center,
      _o.Instant,
      _o.Prologue);
  }
}

public class ScenarioExcelT
{
  [Newtonsoft.Json.JsonProperty("None")]
  public List<FlatData.ScenarioBGType> None { get; set; }
  [Newtonsoft.Json.JsonProperty("Idle")]
  public List<FlatData.ScenarioCharacterAction> Idle { get; set; }
  [Newtonsoft.Json.JsonProperty("Cafe")]
  public FlatData.DialogCategory Cafe { get; set; }
  [Newtonsoft.Json.JsonProperty("Talk")]
  public FlatData.DialogType Talk { get; set; }
  [Newtonsoft.Json.JsonProperty("Open")]
  public FlatData.StoryCondition Open { get; set; }
  [Newtonsoft.Json.JsonProperty("EnterConver")]
  public FlatData.EmojiEvent EnterConver { get; set; }
  [Newtonsoft.Json.JsonProperty("Center")]
  public FlatData.ScenarioZoomAnchors Center { get; set; }
  [Newtonsoft.Json.JsonProperty("Instant")]
  public FlatData.ScenarioZoomType Instant { get; set; }
  [Newtonsoft.Json.JsonProperty("Prologue")]
  public FlatData.ScenarioContentType Prologue { get; set; }

  public ScenarioExcelT() {
    this.None = null;
    this.Idle = null;
    this.Cafe = FlatData.DialogCategory.Cafe;
    this.Talk = FlatData.DialogType.Talk;
    this.Open = FlatData.StoryCondition.Open;
    this.EnterConver = FlatData.EmojiEvent.EnterConver;
    this.Center = FlatData.ScenarioZoomAnchors.Center;
    this.Instant = FlatData.ScenarioZoomType.Instant;
    this.Prologue = FlatData.ScenarioContentType.Prologue;
  }
}


static public class ScenarioExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*None*/, 4 /*FlatData.ScenarioBGType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Idle*/, 4 /*FlatData.ScenarioCharacterAction*/, false)
      && verifier.VerifyField(tablePos, 8 /*Cafe*/, 4 /*FlatData.DialogCategory*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Talk*/, 4 /*FlatData.DialogType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Open*/, 4 /*FlatData.StoryCondition*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*EnterConver*/, 4 /*FlatData.EmojiEvent*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Center*/, 4 /*FlatData.ScenarioZoomAnchors*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Instant*/, 4 /*FlatData.ScenarioZoomType*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Prologue*/, 4 /*FlatData.ScenarioContentType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
