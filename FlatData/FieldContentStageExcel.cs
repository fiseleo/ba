// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FieldContentStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FieldContentStageExcel GetRootAsFieldContentStageExcel(ByteBuffer _bb) { return GetRootAsFieldContentStageExcel(_bb, new FieldContentStageExcel()); }
  public static FieldContentStageExcel GetRootAsFieldContentStageExcel(ByteBuffer _bb, FieldContentStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldContentStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SeasonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AreaId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.StageDifficulty StageDifficulty { get { int o = __p.__offset(12); return o != 0 ? (FlatData.StageDifficulty)__p.bb.GetInt(o + __p.bb_pos) : FlatData.StageDifficulty.None; } }
  public string Name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(14); }
  public long BattleDuration { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatData.ParcelType StageEnterCostType { get { int o = __p.__offset(18); return o != 0 ? (FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatData.ParcelType.None; } }
  public long StageEnterCostId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StageEnterCostAmount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatData.StageTopography StageTopography { get { int o = __p.__offset(24); return o != 0 ? (FlatData.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : FlatData.StageTopography.Street; } }
  public int RecommandLevel { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long GroundID { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BGMId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool InstantClear { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long FixedEchelonId { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool SkipFormationSettings { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatData.FieldContentStageExcel> CreateFieldContentStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      long SeasonId = 0,
      long AreaId = 0,
      long GroupId = 0,
      FlatData.StageDifficulty StageDifficulty = FlatData.StageDifficulty.None,
      StringOffset NameOffset = default(StringOffset),
      long BattleDuration = 0,
      FlatData.ParcelType StageEnterCostType = FlatData.ParcelType.None,
      long StageEnterCostId = 0,
      int StageEnterCostAmount = 0,
      FlatData.StageTopography StageTopography = FlatData.StageTopography.Street,
      int RecommandLevel = 0,
      long GroundID = 0,
      long BGMId = 0,
      bool InstantClear = false,
      long FixedEchelonId = 0,
      bool SkipFormationSettings = false) {
    builder.StartTable(17);
    FieldContentStageExcel.AddFixedEchelonId(builder, FixedEchelonId);
    FieldContentStageExcel.AddBGMId(builder, BGMId);
    FieldContentStageExcel.AddGroundID(builder, GroundID);
    FieldContentStageExcel.AddStageEnterCostId(builder, StageEnterCostId);
    FieldContentStageExcel.AddBattleDuration(builder, BattleDuration);
    FieldContentStageExcel.AddGroupId(builder, GroupId);
    FieldContentStageExcel.AddAreaId(builder, AreaId);
    FieldContentStageExcel.AddSeasonId(builder, SeasonId);
    FieldContentStageExcel.AddId(builder, Id);
    FieldContentStageExcel.AddRecommandLevel(builder, RecommandLevel);
    FieldContentStageExcel.AddStageTopography(builder, StageTopography);
    FieldContentStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount);
    FieldContentStageExcel.AddStageEnterCostType(builder, StageEnterCostType);
    FieldContentStageExcel.AddName(builder, NameOffset);
    FieldContentStageExcel.AddStageDifficulty(builder, StageDifficulty);
    FieldContentStageExcel.AddSkipFormationSettings(builder, SkipFormationSettings);
    FieldContentStageExcel.AddInstantClear(builder, InstantClear);
    return FieldContentStageExcel.EndFieldContentStageExcel(builder);
  }

  public static void StartFieldContentStageExcel(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddSeasonId(FlatBufferBuilder builder, long seasonId) { builder.AddLong(1, seasonId, 0); }
  public static void AddAreaId(FlatBufferBuilder builder, long areaId) { builder.AddLong(2, areaId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(3, groupId, 0); }
  public static void AddStageDifficulty(FlatBufferBuilder builder, FlatData.StageDifficulty stageDifficulty) { builder.AddInt(4, (int)stageDifficulty, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(5, nameOffset.Value, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(6, battleDuration, 0); }
  public static void AddStageEnterCostType(FlatBufferBuilder builder, FlatData.ParcelType stageEnterCostType) { builder.AddInt(7, (int)stageEnterCostType, 0); }
  public static void AddStageEnterCostId(FlatBufferBuilder builder, long stageEnterCostId) { builder.AddLong(8, stageEnterCostId, 0); }
  public static void AddStageEnterCostAmount(FlatBufferBuilder builder, int stageEnterCostAmount) { builder.AddInt(9, stageEnterCostAmount, 0); }
  public static void AddStageTopography(FlatBufferBuilder builder, FlatData.StageTopography stageTopography) { builder.AddInt(10, (int)stageTopography, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int recommandLevel) { builder.AddInt(11, recommandLevel, 0); }
  public static void AddGroundID(FlatBufferBuilder builder, long groundID) { builder.AddLong(12, groundID, 0); }
  public static void AddBGMId(FlatBufferBuilder builder, long bGMId) { builder.AddLong(13, bGMId, 0); }
  public static void AddInstantClear(FlatBufferBuilder builder, bool instantClear) { builder.AddBool(14, instantClear, false); }
  public static void AddFixedEchelonId(FlatBufferBuilder builder, long fixedEchelonId) { builder.AddLong(15, fixedEchelonId, 0); }
  public static void AddSkipFormationSettings(FlatBufferBuilder builder, bool skipFormationSettings) { builder.AddBool(16, skipFormationSettings, false); }
  public static Offset<FlatData.FieldContentStageExcel> EndFieldContentStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatData.FieldContentStageExcel>(o);
  }
  public FieldContentStageExcelT UnPack() {
    var _o = new FieldContentStageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FieldContentStageExcelT _o) {
    _o.Id = this.Id;
    _o.SeasonId = this.SeasonId;
    _o.AreaId = this.AreaId;
    _o.GroupId = this.GroupId;
    _o.StageDifficulty = this.StageDifficulty;
    _o.Name = this.Name;
    _o.BattleDuration = this.BattleDuration;
    _o.StageEnterCostType = this.StageEnterCostType;
    _o.StageEnterCostId = this.StageEnterCostId;
    _o.StageEnterCostAmount = this.StageEnterCostAmount;
    _o.StageTopography = this.StageTopography;
    _o.RecommandLevel = this.RecommandLevel;
    _o.GroundID = this.GroundID;
    _o.BGMId = this.BGMId;
    _o.InstantClear = this.InstantClear;
    _o.FixedEchelonId = this.FixedEchelonId;
    _o.SkipFormationSettings = this.SkipFormationSettings;
  }
  public static Offset<FlatData.FieldContentStageExcel> Pack(FlatBufferBuilder builder, FieldContentStageExcelT _o) {
    if (_o == null) return default(Offset<FlatData.FieldContentStageExcel>);
    var _Name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateFieldContentStageExcel(
      builder,
      _o.Id,
      _o.SeasonId,
      _o.AreaId,
      _o.GroupId,
      _o.StageDifficulty,
      _Name,
      _o.BattleDuration,
      _o.StageEnterCostType,
      _o.StageEnterCostId,
      _o.StageEnterCostAmount,
      _o.StageTopography,
      _o.RecommandLevel,
      _o.GroundID,
      _o.BGMId,
      _o.InstantClear,
      _o.FixedEchelonId,
      _o.SkipFormationSettings);
  }
}

public class FieldContentStageExcelT
{
  [Newtonsoft.Json.JsonProperty("Id")]
  public long Id { get; set; }
  [Newtonsoft.Json.JsonProperty("SeasonId")]
  public long SeasonId { get; set; }
  [Newtonsoft.Json.JsonProperty("AreaId")]
  public long AreaId { get; set; }
  [Newtonsoft.Json.JsonProperty("GroupId")]
  public long GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("StageDifficulty")]
  public FlatData.StageDifficulty StageDifficulty { get; set; }
  [Newtonsoft.Json.JsonProperty("Name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("BattleDuration")]
  public long BattleDuration { get; set; }
  [Newtonsoft.Json.JsonProperty("StageEnterCostType")]
  public FlatData.ParcelType StageEnterCostType { get; set; }
  [Newtonsoft.Json.JsonProperty("StageEnterCostId")]
  public long StageEnterCostId { get; set; }
  [Newtonsoft.Json.JsonProperty("StageEnterCostAmount")]
  public int StageEnterCostAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("StageTopography")]
  public FlatData.StageTopography StageTopography { get; set; }
  [Newtonsoft.Json.JsonProperty("RecommandLevel")]
  public int RecommandLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("GroundID")]
  public long GroundID { get; set; }
  [Newtonsoft.Json.JsonProperty("BGMId")]
  public long BGMId { get; set; }
  [Newtonsoft.Json.JsonProperty("InstantClear")]
  public bool InstantClear { get; set; }
  [Newtonsoft.Json.JsonProperty("FixedEchelonId")]
  public long FixedEchelonId { get; set; }
  [Newtonsoft.Json.JsonProperty("SkipFormationSettings")]
  public bool SkipFormationSettings { get; set; }

  public FieldContentStageExcelT() {
    this.Id = 0;
    this.SeasonId = 0;
    this.AreaId = 0;
    this.GroupId = 0;
    this.StageDifficulty = FlatData.StageDifficulty.None;
    this.Name = null;
    this.BattleDuration = 0;
    this.StageEnterCostType = FlatData.ParcelType.None;
    this.StageEnterCostId = 0;
    this.StageEnterCostAmount = 0;
    this.StageTopography = FlatData.StageTopography.Street;
    this.RecommandLevel = 0;
    this.GroundID = 0;
    this.BGMId = 0;
    this.InstantClear = false;
    this.FixedEchelonId = 0;
    this.SkipFormationSettings = false;
  }
}


static public class FieldContentStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*SeasonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*AreaId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*StageDifficulty*/, 4 /*FlatData.StageDifficulty*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*Name*/, false)
      && verifier.VerifyField(tablePos, 16 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*StageEnterCostType*/, 4 /*FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*StageEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*StageEnterCostAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*StageTopography*/, 4 /*FlatData.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*RecommandLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*GroundID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*BGMId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*InstantClear*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*FixedEchelonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*SkipFormationSettings*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
